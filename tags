!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AR	Makefile	/^AR=xcrun ar$/;"	m
ARCH_CPU_ARM64_FAMILY	port/atomic_pointer.h	228;"	d
ARCH_CPU_ARM64_FAMILY	port/atomic_pointer.h	39;"	d
ARCH_CPU_ARM_FAMILY	port/atomic_pointer.h	227;"	d
ARCH_CPU_ARM_FAMILY	port/atomic_pointer.h	37;"	d
ARCH_CPU_PPC_FAMILY	port/atomic_pointer.h	229;"	d
ARCH_CPU_PPC_FAMILY	port/atomic_pointer.h	41;"	d
ARCH_CPU_X86_FAMILY	port/atomic_pointer.h	226;"	d
ARCH_CPU_X86_FAMILY	port/atomic_pointer.h	33;"	d
ARCH_CPU_X86_FAMILY	port/atomic_pointer.h	35;"	d
Abandon	table/table_builder.cc	/^void TableBuilder::Abandon() {$/;"	f	class:leveldb::TableBuilder
Acquire	util/env_posix.cc	/^  bool Acquire() {$/;"	f	class:leveldb::__anon4::MmapLimiter
AcquireLoad	db/db_bench.cc	/^  void AcquireLoad(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
Acquire_Load	port/atomic_pointer.h	/^  inline void* Acquire_Load() const {$/;"	f	class:leveldb::port::AtomicPointer
Add	db/db_impl.h	/^    void Add(const CompactionStats& c) {$/;"	f	struct:leveldb::DBImpl::CompactionStats
Add	db/memtable.cc	/^void MemTable::Add(SequenceNumber s, ValueType type,$/;"	f	class:leveldb::MemTable
Add	table/block_builder.cc	/^void BlockBuilder::Add(const Slice& key, const Slice& value) {$/;"	f	class:leveldb::BlockBuilder
Add	table/table_builder.cc	/^void TableBuilder::Add(const Slice& key, const Slice& value) {$/;"	f	class:leveldb::TableBuilder
Add	util/histogram.cc	/^void Histogram::Add(double value) {$/;"	f	class:leveldb::Histogram
AddBytes	db/db_bench.cc	/^  void AddBytes(int64_t n) {$/;"	f	class:leveldb::__anon21::Stats
AddFile	db/version_edit.h	/^  void AddFile(int level, uint64_t file,$/;"	f	class:leveldb::VersionEdit
AddInputDeletions	db/version_set.cc	/^void Compaction::AddInputDeletions(VersionEdit* edit) {$/;"	f	class:leveldb::Compaction
AddIterators	db/version_set.cc	/^void Version::AddIterators(const ReadOptions& options,$/;"	f	class:leveldb::Version
AddKey	table/filter_block.cc	/^void FilterBlockBuilder::AddKey(const Slice& key) {$/;"	f	class:leveldb::FilterBlockBuilder
AddLiveFiles	db/version_set.cc	/^void VersionSet::AddLiveFiles(std::set<uint64_t>* live) {$/;"	f	class:leveldb::VersionSet
AddMessage	db/db_bench.cc	/^  void AddMessage(Slice msg) {$/;"	f	class:leveldb::__anon21::Stats
AddRecord	db/log_writer.cc	/^Status Writer::AddRecord(const Slice& slice) {$/;"	f	class:leveldb::log::Writer
AfterFile	db/version_set.cc	/^static bool AfterFile(const Comparator* ucmp,$/;"	f	namespace:leveldb
Allocate	util/arena.h	/^inline char* Arena::Allocate(size_t bytes) {$/;"	f	class:leveldb::Arena
AllocateAligned	util/arena.cc	/^char* Arena::AllocateAligned(size_t bytes) {$/;"	f	class:leveldb::Arena
AllocateFallback	util/arena.cc	/^char* Arena::AllocateFallback(size_t bytes) {$/;"	f	class:leveldb::Arena
AllocateNewBlock	util/arena.cc	/^char* Arena::AllocateNewBlock(size_t block_bytes) {$/;"	f	class:leveldb::Arena
Append	db/leveldb_main.cc	/^  virtual Status Append(const Slice& data) {$/;"	f	class:leveldb::__anon19::StdoutPrinter
Append	db/write_batch.cc	/^void WriteBatchInternal::Append(WriteBatch* dst, const WriteBatch* src) {$/;"	f	class:leveldb::WriteBatchInternal
Append	helpers/memenv/memenv.cc	/^  Status Append(const Slice& data) {$/;"	f	class:leveldb::__anon13::FileState
Append	helpers/memenv/memenv.cc	/^  virtual Status Append(const Slice& data) {$/;"	f	class:leveldb::__anon13::WritableFileImpl
Append	util/env_posix.cc	/^  virtual Status Append(const Slice& data) {$/;"	f	class:leveldb::__anon4::PosixWritableFile
AppendEscapedStringTo	util/logging.cc	/^void AppendEscapedStringTo(std::string* str, const Slice& value) {$/;"	f	namespace:leveldb
AppendInternalKey	db/dbformat.cc	/^void AppendInternalKey(std::string* result, const ParsedInternalKey& key) {$/;"	f	namespace:leveldb
AppendNumberTo	util/logging.cc	/^void AppendNumberTo(std::string* str, uint64_t num) {$/;"	f	namespace:leveldb
AppendVersion	db/version_set.cc	/^void VersionSet::AppendVersion(Version* v) {$/;"	f	class:leveldb::VersionSet
AppendWithSpace	db/db_bench.cc	/^static void AppendWithSpace(std::string* str, Slice msg) {$/;"	f	namespace:leveldb::__anon21
Apply	db/version_set.cc	/^  void Apply(VersionEdit* edit) {$/;"	f	class:leveldb::VersionSet::Builder
ApproximateMemoryUsage	db/memtable.cc	/^size_t MemTable::ApproximateMemoryUsage() { return arena_.MemoryUsage(); }$/;"	f	class:leveldb::MemTable
ApproximateOffsetOf	db/version_set.cc	/^uint64_t VersionSet::ApproximateOffsetOf(Version* v, const InternalKey& ikey) {$/;"	f	class:leveldb::VersionSet
ApproximateOffsetOf	table/table.cc	/^uint64_t Table::ApproximateOffsetOf(const Slice& key) const {$/;"	f	class:leveldb::Table
ArchiveFile	db/repair.cc	/^  void ArchiveFile(const std::string& fname) {$/;"	f	class:leveldb::__anon22::Repairer	file:
Arena	util/arena.cc	/^Arena::Arena() {$/;"	f	class:leveldb::Arena
Arena	util/arena.h	/^class Arena {$/;"	c	namespace:leveldb
AssertHeld	port/port_posix.h	/^  void AssertHeld() { }$/;"	f	class:leveldb::port::Mutex
AtomicPointer	port/atomic_pointer.h	/^  AtomicPointer() { }$/;"	f	class:leveldb::port::AtomicPointer
AtomicPointer	port/atomic_pointer.h	/^  explicit AtomicPointer(void* p) : rep_(p) {}$/;"	f	class:leveldb::port::AtomicPointer
AtomicPointer	port/atomic_pointer.h	/^class AtomicPointer {$/;"	c	namespace:leveldb::port
AtomicPointer	port/port_example.h	/^  explicit AtomicPointer(void* v) : rep_(v) { }$/;"	f	class:leveldb::port::AtomicPointer
AtomicPointer	port/port_example.h	/^class AtomicPointer {$/;"	c	namespace:leveldb::port
Average	util/histogram.cc	/^double Histogram::Average() const {$/;"	f	class:leveldb::Histogram
BENCHMARKS	Makefile	/^BENCHMARKS = db_bench_sqlite3 db_bench_tree_db$/;"	m
BGItem	util/env_posix.cc	/^  struct BGItem { void* arg; void (*function)(void*); };$/;"	s	class:leveldb::__anon4::PosixEnv	file:
BGQueue	util/env_posix.cc	/^  typedef std::deque<BGItem> BGQueue;$/;"	t	class:leveldb::__anon4::PosixEnv	file:
BGThread	util/env_posix.cc	/^void PosixEnv::BGThread() {$/;"	f	class:leveldb::__anon4::PosixEnv
BGThreadWrapper	util/env_posix.cc	/^  static void* BGThreadWrapper(void* arg) {$/;"	f	class:leveldb::__anon4::PosixEnv	file:
BGWork	db/db_impl.cc	/^void DBImpl::BGWork(void* db) {$/;"	f	class:leveldb::DBImpl
BUG	db/bigtable.cc	22;"	d	file:
BUG	db/db_impl.cc	44;"	d	file:
BUG_ON	db/bigtable.cc	15;"	d	file:
BUG_ON	db/db_impl.cc	37;"	d	file:
BackgroundCall	db/db_impl.cc	/^void DBImpl::BackgroundCall() {$/;"	f	class:leveldb::DBImpl
BackgroundCompaction	db/db_impl.cc	/^void DBImpl::BackgroundCompaction() {$/;"	f	class:leveldb::DBImpl
BeforeFile	db/version_set.cc	/^static bool BeforeFile(const Comparator* ucmp,$/;"	f	namespace:leveldb
Benchmark	db/db_bench.cc	/^  Benchmark()$/;"	f	class:leveldb::Benchmark
Benchmark	db/db_bench.cc	/^class Benchmark {$/;"	c	namespace:leveldb	file:
BigTable	db/bigtable.cc	/^BigTable::BigTable(const Options& options, const std::string& dir)$/;"	f	class:leveldb::BigTable
BigTable	db/bigtable.h	/^class BigTable {$/;"	c	namespace:leveldb
BigTable_name	db/bigtable.h	/^  const std::string BigTable_name; \/\/ big table name, default = \/tmp\/BigTable-0\/$/;"	m	class:leveldb::BigTable
Block	table/block.cc	/^Block::Block(const BlockContents& contents)$/;"	f	class:leveldb::Block
Block	table/block.h	/^class Block {$/;"	c	namespace:leveldb
BlockBuilder	table/block_builder.cc	/^BlockBuilder::BlockBuilder(const Options* options)$/;"	f	class:leveldb::BlockBuilder
BlockBuilder	table/block_builder.h	/^class BlockBuilder {$/;"	c	namespace:leveldb
BlockContents	table/format.h	/^struct BlockContents {$/;"	s	namespace:leveldb
BlockFunction	table/two_level_iterator.cc	/^typedef Iterator* (*BlockFunction)(void*, const ReadOptions&, const Slice&);$/;"	t	namespace:leveldb::__anon12	file:
BlockHandle	table/format.h	/^class BlockHandle {$/;"	c	namespace:leveldb
BlockHandle	table/format.h	/^inline BlockHandle::BlockHandle()$/;"	f	class:leveldb::BlockHandle
BlockReader	table/table.cc	/^Iterator* Table::BlockReader(void* arg,$/;"	f	class:leveldb::Table
BloomFilterPolicy	util/bloom.cc	/^  explicit BloomFilterPolicy(int bits_per_key)$/;"	f	class:leveldb::__anon2::BloomFilterPolicy
BloomFilterPolicy	util/bloom.cc	/^class BloomFilterPolicy : public FilterPolicy {$/;"	c	namespace:leveldb::__anon2	file:
BloomHash	util/bloom.cc	/^static uint32_t BloomHash(const Slice& key) {$/;"	f	namespace:leveldb::__anon2
BuildBatchGroup	db/db_impl.cc	/^WriteBatch* DBImpl::BuildBatchGroup(Writer** last_writer) {$/;"	f	class:leveldb::DBImpl
BuildTable	db/builder.cc	/^Status BuildTable(const std::string& dbname,$/;"	f	namespace:leveldb
Builder	db/version_set.cc	/^  Builder(VersionSet* vset, Version* base)$/;"	f	class:leveldb::VersionSet::Builder
Builder	db/version_set.cc	/^class VersionSet::Builder {$/;"	c	class:leveldb::VersionSet	file:
BySmallestKey	db/version_set.cc	/^  struct BySmallestKey {$/;"	s	class:leveldb::VersionSet::Builder	file:
ByteSize	db/write_batch_internal.h	/^  static size_t ByteSize(const WriteBatch* batch) {$/;"	f	class:leveldb::WriteBatchInternal
BytewiseComparator	util/comparator.cc	/^const Comparator* BytewiseComparator() {$/;"	f	namespace:leveldb
BytewiseComparatorImpl	util/comparator.cc	/^  BytewiseComparatorImpl() { }$/;"	f	class:leveldb::__anon7::BytewiseComparatorImpl
BytewiseComparatorImpl	util/comparator.cc	/^class BytewiseComparatorImpl : public Comparator {$/;"	c	namespace:leveldb::__anon7	file:
Cache	include/leveldb/cache.h	/^  Cache() { }$/;"	f	class:leveldb::Cache
Cache	include/leveldb/cache.h	/^class Cache {$/;"	c	namespace:leveldb
ChangeOptions	table/table_builder.cc	/^Status TableBuilder::ChangeOptions(const Options& options) {$/;"	f	class:leveldb::TableBuilder
Cleanup	include/leveldb/iterator.h	/^  struct Cleanup {$/;"	s	class:leveldb::Iterator
CleanupCompaction	db/db_impl.cc	/^void DBImpl::CleanupCompaction(CompactionState* compact) {$/;"	f	class:leveldb::DBImpl
CleanupFunction	include/leveldb/iterator.h	/^  typedef void (*CleanupFunction)(void* arg1, void* arg2);$/;"	t	class:leveldb::Iterator
CleanupIteratorState	db/db_impl.cc	/^static void CleanupIteratorState(void* arg1, void* arg2) {$/;"	f	namespace:leveldb::__anon18
Clear	db/dbformat.h	/^  void Clear() { rep_.clear(); }$/;"	f	class:leveldb::InternalKey
Clear	db/version_edit.cc	/^void VersionEdit::Clear() {$/;"	f	class:leveldb::VersionEdit
Clear	db/write_batch.cc	/^void WriteBatch::Clear() {$/;"	f	class:leveldb::WriteBatch
Clear	util/histogram.cc	/^void Histogram::Clear() {$/;"	f	class:leveldb::Histogram
ClearSavedValue	db/db_iter.cc	/^  inline void ClearSavedValue() {$/;"	f	class:leveldb::__anon20::DBIter	file:
ClipToRange	db/db_impl.cc	/^static void ClipToRange(T* ptr, V minvalue, V maxvalue) {$/;"	f	namespace:leveldb
Close	db/leveldb_main.cc	/^  virtual Status Close() { return Status::OK(); }$/;"	f	class:leveldb::__anon19::StdoutPrinter
Close	helpers/memenv/memenv.cc	/^  virtual Status Close() { return Status::OK(); }$/;"	f	class:leveldb::__anon13::WritableFileImpl
Close	util/env_posix.cc	/^  virtual Status Close() {$/;"	f	class:leveldb::__anon4::PosixWritableFile
Code	include/leveldb/status.h	/^  enum Code {$/;"	g	class:leveldb::Status
Compact	db/db_bench.cc	/^  void Compact(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
CompactMemTable	db/db_impl.cc	/^void DBImpl::CompactMemTable() {$/;"	f	class:leveldb::DBImpl
CompactRange	db/db_impl.cc	/^void DBImpl::CompactRange(const Slice* begin, const Slice* end) {$/;"	f	class:leveldb::DBImpl
CompactRange	db/version_set.cc	/^Compaction* VersionSet::CompactRange($/;"	f	class:leveldb::VersionSet
Compaction	db/version_set.cc	/^Compaction::Compaction(int level)$/;"	f	class:leveldb::Compaction
Compaction	db/version_set.h	/^class Compaction {$/;"	c	namespace:leveldb
CompactionState	db/db_impl.cc	/^  explicit CompactionState(Compaction* c)$/;"	f	struct:leveldb::DBImpl::CompactionState
CompactionState	db/db_impl.cc	/^struct DBImpl::CompactionState {$/;"	s	class:leveldb::DBImpl	file:
CompactionStats	db/db_impl.h	/^    CompactionStats() : micros(0), bytes_read(0), bytes_written(0) { }$/;"	f	struct:leveldb::DBImpl::CompactionStats
CompactionStats	db/db_impl.h	/^  struct CompactionStats {$/;"	s	class:leveldb::DBImpl
Comparator	include/leveldb/comparator.h	/^class Comparator {$/;"	c	namespace:leveldb
Compare	db/c.cc	/^  virtual int Compare(const Slice& a, const Slice& b) const {$/;"	f	struct:leveldb_comparator_t
Compare	db/dbformat.cc	/^int InternalKeyComparator::Compare(const Slice& akey, const Slice& bkey) const {$/;"	f	class:leveldb::InternalKeyComparator
Compare	db/dbformat.h	/^inline int InternalKeyComparator::Compare($/;"	f	class:leveldb::InternalKeyComparator
Compare	table/block.cc	/^  inline int Compare(const Slice& a, const Slice& b) const {$/;"	f	class:leveldb::Block::Iter	file:
Compare	util/comparator.cc	/^  virtual int Compare(const Slice& a, const Slice& b) const {$/;"	f	class:leveldb::__anon7::BytewiseComparatorImpl
CompressibleString	util/testutil.cc	/^extern Slice CompressibleString(Random* rnd, double compressed_fraction,$/;"	f	namespace:leveldb::test
CompressionType	include/leveldb/options.h	/^enum CompressionType {$/;"	g	namespace:leveldb
CondVar	port/port_example.h	/^class CondVar {$/;"	c	namespace:leveldb::port
CondVar	port/port_posix.cc	/^CondVar::CondVar(Mutex* mu)$/;"	f	class:leveldb::port::CondVar
CondVar	port/port_posix.h	/^class CondVar {$/;"	c	namespace:leveldb::port
ConsumeDecimalNumber	util/logging.cc	/^bool ConsumeDecimalNumber(Slice* in, uint64_t* val) {$/;"	f	namespace:leveldb
Contains	db/skiplist.h	/^bool SkipList<Key,Comparator>::Contains(const Key& key) const {$/;"	f	class:leveldb::SkipList
Contents	db/write_batch_internal.h	/^  static Slice Contents(const WriteBatch* batch) {$/;"	f	class:leveldb::WriteBatchInternal
ConvertLogFilesToTables	db/repair.cc	/^  void ConvertLogFilesToTables() {$/;"	f	class:leveldb::__anon22::Repairer	file:
ConvertLogToTable	db/repair.cc	/^  Status ConvertLogToTable(uint64_t log) {$/;"	f	class:leveldb::__anon22::Repairer	file:
CopyState	util/status.cc	/^const char* Status::CopyState(const char* state) {$/;"	f	class:leveldb::Status
CopyString	db/c.cc	/^static char* CopyString(const std::string& str) {$/;"	f	file:
Corruption	db/dumpfile.cc	/^  virtual void Corruption(size_t bytes, const Status& status) {$/;"	f	class:leveldb::__anon24::CorruptionReporter
Corruption	include/leveldb/status.h	/^  static Status Corruption(const Slice& msg, const Slice& msg2 = Slice()) {$/;"	f	class:leveldb::Status
CorruptionError	table/block.cc	/^  void CorruptionError() {$/;"	f	class:leveldb::Block::Iter	file:
CorruptionReporter	db/dumpfile.cc	/^class CorruptionReporter : public log::Reader::Reporter {$/;"	c	namespace:leveldb::__anon24	file:
Count	db/write_batch.cc	/^int WriteBatchInternal::Count(const WriteBatch* b) {$/;"	f	class:leveldb::WriteBatchInternal
Crc32c	db/db_bench.cc	/^  void Crc32c(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
CreateDir	helpers/memenv/memenv.cc	/^  virtual Status CreateDir(const std::string& dirname) {$/;"	f	class:leveldb::__anon13::InMemoryEnv
CreateDir	include/leveldb/env.h	/^  Status CreateDir(const std::string& d) { return target_->CreateDir(d); }$/;"	f	class:leveldb::EnvWrapper
CreateDir	util/env_posix.cc	/^  virtual Status CreateDir(const std::string& name) {$/;"	f	class:leveldb::__anon4::PosixEnv
CreateFilter	db/c.cc	/^  virtual void CreateFilter(const Slice* keys, int n, std::string* dst) const {$/;"	f	struct:leveldb_filterpolicy_t
CreateFilter	db/dbformat.cc	/^void InternalFilterPolicy::CreateFilter(const Slice* keys, int n,$/;"	f	class:leveldb::InternalFilterPolicy
CreateFilter	util/bloom.cc	/^  virtual void CreateFilter(const Slice* keys, int n, std::string* dst) const {$/;"	f	class:leveldb::__anon2::BloomFilterPolicy
CurrentFileName	db/filename.cc	/^std::string CurrentFileName(const std::string& dbname) {$/;"	f	namespace:leveldb
CurrentSizeEstimate	table/block_builder.cc	/^size_t BlockBuilder::CurrentSizeEstimate() const {$/;"	f	class:leveldb::BlockBuilder
DB	include/leveldb/db.h	/^  DB() { }$/;"	f	class:leveldb::DB
DB	include/leveldb/db.h	/^class DB {$/;"	c	namespace:leveldb
DBImpl	db/db_impl.cc	/^DBImpl::DBImpl(const Options& raw_options, const std::string& dbname)$/;"	f	class:leveldb::DBImpl
DBImpl	db/db_impl.h	/^class DBImpl : public DB {$/;"	c	namespace:leveldb
DBIter	db/db_iter.cc	/^  DBIter(DBImpl* db, const Comparator* cmp, Iterator* iter, SequenceNumber s,$/;"	f	class:leveldb::__anon20::DBIter
DBIter	db/db_iter.cc	/^class DBIter: public Iterator {$/;"	c	namespace:leveldb::__anon20	file:
DEVICEROOT	Makefile	/^DEVICEROOT=$(PLATFORMSROOT)\/iPhoneOS.platform\/Developer$/;"	m
DebugString	db/dbformat.cc	/^std::string InternalKey::DebugString() const {$/;"	f	class:leveldb::InternalKey
DebugString	db/dbformat.cc	/^std::string ParsedInternalKey::DebugString() const {$/;"	f	class:leveldb::ParsedInternalKey
DebugString	db/version_edit.cc	/^std::string VersionEdit::DebugString() const {$/;"	f	class:leveldb::VersionEdit
DebugString	db/version_set.cc	/^std::string Version::DebugString() const {$/;"	f	class:leveldb::Version
DecodeEntry	table/block.cc	/^static inline const char* DecodeEntry(const char* p, const char* limit,$/;"	f	namespace:leveldb
DecodeFixed32	util/coding.h	/^inline uint32_t DecodeFixed32(const char* ptr) {$/;"	f	namespace:leveldb
DecodeFixed64	util/coding.h	/^inline uint64_t DecodeFixed64(const char* ptr) {$/;"	f	namespace:leveldb
DecodeFrom	db/dbformat.h	/^  void DecodeFrom(const Slice& s) { rep_.assign(s.data(), s.size()); }$/;"	f	class:leveldb::InternalKey
DecodeFrom	db/version_edit.cc	/^Status VersionEdit::DecodeFrom(const Slice& src) {$/;"	f	class:leveldb::VersionEdit
DecodeFrom	table/format.cc	/^Status BlockHandle::DecodeFrom(Slice* input) {$/;"	f	class:leveldb::BlockHandle
DecodeFrom	table/format.cc	/^Status Footer::DecodeFrom(Slice* input) {$/;"	f	class:leveldb::Footer
Default	util/env_posix.cc	/^Env* Env::Default() {$/;"	f	class:leveldb::Env
Delete	db/bigtable.cc	/^Status BigTable::Delete(const WriteOptions& opt, const Slice& key)$/;"	f	class:leveldb::BigTable
Delete	db/db_impl.cc	/^Status DB::Delete(const WriteOptions& opt, const Slice& key) {$/;"	f	class:leveldb::DB
Delete	db/db_impl.cc	/^Status DBImpl::Delete(const WriteOptions& options, const Slice& key) {$/;"	f	class:leveldb::DBImpl
Delete	db/dumpfile.cc	/^  virtual void Delete(const Slice& key) {$/;"	f	class:leveldb::__anon24::WriteBatchItemPrinter
Delete	db/snapshot.h	/^  void Delete(const SnapshotImpl* s) {$/;"	f	class:leveldb::SnapshotList
Delete	db/write_batch.cc	/^  virtual void Delete(const Slice& key) {$/;"	f	class:leveldb::__anon23::MemTableInserter
Delete	db/write_batch.cc	/^void WriteBatch::Delete(const Slice& key) {$/;"	f	class:leveldb::WriteBatch
DeleteBlock	table/table.cc	/^static void DeleteBlock(void* arg, void* ignored) {$/;"	f	namespace:leveldb
DeleteCachedBlock	table/table.cc	/^static void DeleteCachedBlock(const Slice& key, void* value) {$/;"	f	namespace:leveldb
DeleteDir	helpers/memenv/memenv.cc	/^  virtual Status DeleteDir(const std::string& dirname) {$/;"	f	class:leveldb::__anon13::InMemoryEnv
DeleteDir	include/leveldb/env.h	/^  Status DeleteDir(const std::string& d) { return target_->DeleteDir(d); }$/;"	f	class:leveldb::EnvWrapper
DeleteDir	util/env_posix.cc	/^  virtual Status DeleteDir(const std::string& name) {$/;"	f	class:leveldb::__anon4::PosixEnv
DeleteEntry	db/table_cache.cc	/^static void DeleteEntry(const Slice& key, void* value) {$/;"	f	namespace:leveldb
DeleteFile	db/version_edit.h	/^  void DeleteFile(int level, uint64_t file) {$/;"	f	class:leveldb::VersionEdit
DeleteFile	helpers/memenv/memenv.cc	/^  virtual Status DeleteFile(const std::string& fname) {$/;"	f	class:leveldb::__anon13::InMemoryEnv
DeleteFile	include/leveldb/env.h	/^  Status DeleteFile(const std::string& f) { return target_->DeleteFile(f); }$/;"	f	class:leveldb::EnvWrapper
DeleteFile	util/env_posix.cc	/^  virtual Status DeleteFile(const std::string& fname) {$/;"	f	class:leveldb::__anon4::PosixEnv
DeleteFileInternal	helpers/memenv/memenv.cc	/^  void DeleteFileInternal(const std::string& fname) {$/;"	f	class:leveldb::__anon13::InMemoryEnv
DeleteObsoleteFiles	db/db_impl.cc	/^void DBImpl::DeleteObsoleteFiles() {$/;"	f	class:leveldb::DBImpl
DeleteRandom	db/db_bench.cc	/^  void DeleteRandom(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
DeleteSeq	db/db_bench.cc	/^  void DeleteSeq(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
DeletedFileSet	db/version_edit.h	/^  typedef std::set< std::pair<int, uint64_t> > DeletedFileSet;$/;"	t	class:leveldb::VersionEdit
DescriptorFileName	db/filename.cc	/^std::string DescriptorFileName(const std::string& dbname, uint64_t number) {$/;"	f	namespace:leveldb
DestroyDB	db/db_impl.cc	/^Status DestroyDB(const std::string& dbname, const Options& options) {$/;"	f	namespace:leveldb
Direction	db/db_iter.cc	/^  enum Direction {$/;"	g	class:leveldb::__anon20::DBIter	file:
Direction	table/merger.cc	/^  enum Direction {$/;"	g	class:leveldb::__anon9::MergingIterator	file:
DisableSplit	db/db_impl.h	/^  void DisableSplit() {$/;"	f	class:leveldb::DBImpl
DoCompactionWork	db/db_impl.cc	/^Status DBImpl::DoCompactionWork(CompactionState* compact) {$/;"	f	class:leveldb::DBImpl
DoDelete	db/db_bench.cc	/^  void DoDelete(ThreadState* thread, bool seq) {$/;"	f	class:leveldb::Benchmark	file:
DoWrite	db/db_bench.cc	/^  void DoWrite(ThreadState* thread, bool seq) {$/;"	f	class:leveldb::Benchmark	file:
DoWriteStringToFile	util/env.cc	/^static Status DoWriteStringToFile(Env* env, const Slice& data,$/;"	f	namespace:leveldb
DumpDescriptor	db/dumpfile.cc	/^Status DumpDescriptor(Env* env, const std::string& fname, WritableFile* dst) {$/;"	f	namespace:leveldb::__anon24
DumpFile	db/dumpfile.cc	/^Status DumpFile(Env* env, const std::string& fname, WritableFile* dst) {$/;"	f	namespace:leveldb
DumpLog	db/dumpfile.cc	/^Status DumpLog(Env* env, const std::string& fname, WritableFile* dst) {$/;"	f	namespace:leveldb::__anon24
DumpTable	db/dumpfile.cc	/^Status DumpTable(Env* env, const std::string& fname, WritableFile* dst) {$/;"	f	namespace:leveldb::__anon24
EXCLUSIVE_LOCKS_REQUIRED	port/thread_annotations.h	13;"	d
EXCLUSIVE_LOCK_FUNCTION	port/thread_annotations.h	37;"	d
EXCLUSIVE_LOCK_FUNCTION	util/mutexlock.h	/^  explicit MutexLock(port::Mutex *mu) EXCLUSIVE_LOCK_FUNCTION(mu)$/;"	f	class:leveldb::MutexLock
EXCLUSIVE_TRYLOCK_FUNCTION	port/thread_annotations.h	45;"	d
EmitPhysicalRecord	db/log_writer.cc	/^Status Writer::EmitPhysicalRecord(RecordType t, const char* ptr, size_t n) {$/;"	f	class:leveldb::log::Writer
EmptyIterator	table/iterator.cc	/^  EmptyIterator(const Status& s) : status_(s) { }$/;"	f	class:leveldb::__anon8::EmptyIterator
EmptyIterator	table/iterator.cc	/^class EmptyIterator : public Iterator {$/;"	c	namespace:leveldb::__anon8	file:
EnableSplit	db/db_impl.h	/^  void EnableSplit() {$/;"	f	class:leveldb::DBImpl
Encode	db/dbformat.h	/^  Slice Encode() const {$/;"	f	class:leveldb::InternalKey
EncodeFixed32	util/coding.cc	/^void EncodeFixed32(char* buf, uint32_t value) {$/;"	f	namespace:leveldb
EncodeFixed64	util/coding.cc	/^void EncodeFixed64(char* buf, uint64_t value) {$/;"	f	namespace:leveldb
EncodeKey	db/memtable.cc	/^static const char* EncodeKey(std::string* scratch, const Slice& target) {$/;"	f	namespace:leveldb
EncodeTo	db/version_edit.cc	/^void VersionEdit::EncodeTo(std::string* dst) const {$/;"	f	class:leveldb::VersionEdit
EncodeTo	table/format.cc	/^void BlockHandle::EncodeTo(std::string* dst) const {$/;"	f	class:leveldb::BlockHandle
EncodeTo	table/format.cc	/^void Footer::EncodeTo(std::string* dst) const {$/;"	f	class:leveldb::Footer
EncodeVarint32	util/coding.cc	/^char* EncodeVarint32(char* dst, uint32_t v) {$/;"	f	namespace:leveldb
EncodeVarint64	util/coding.cc	/^char* EncodeVarint64(char* dst, uint64_t v) {$/;"	f	namespace:leveldb
Env	include/leveldb/env.h	/^  Env() { }$/;"	f	class:leveldb::Env
Env	include/leveldb/env.h	/^class Env {$/;"	c	namespace:leveldb
EnvWrapper	include/leveldb/env.h	/^  explicit EnvWrapper(Env* t) : target_(t) { }$/;"	f	class:leveldb::EnvWrapper
EnvWrapper	include/leveldb/env.h	/^class EnvWrapper : public Env {$/;"	c	namespace:leveldb
Equal	db/skiplist.h	/^  bool Equal(const Key& a, const Key& b) const { return (compare_(a, b) == 0); }$/;"	f	class:leveldb::SkipList
Erase	util/cache.cc	/^  virtual void Erase(const Slice& key) {$/;"	f	class:leveldb::__anon3::ShardedLRUCache
Erase	util/cache.cc	/^void LRUCache::Erase(const Slice& key, uint32_t hash) {$/;"	f	class:leveldb::__anon3::LRUCache
ErrorEnv	util/testutil.h	/^  ErrorEnv() : EnvWrapper(Env::Default()),$/;"	f	class:leveldb::test::ErrorEnv
ErrorEnv	util/testutil.h	/^class ErrorEnv : public EnvWrapper {$/;"	c	namespace:leveldb::test
EscapeString	util/logging.cc	/^std::string EscapeString(const Slice& value) {$/;"	f	namespace:leveldb
Evict	db/table_cache.cc	/^void TableCache::Evict(uint64_t file_number) {$/;"	f	class:leveldb::TableCache
Extend	util/crc32c.cc	/^uint32_t Extend(uint32_t crc, const char* buf, size_t size) {$/;"	f	namespace:leveldb::crc32c
ExtractMetaData	db/repair.cc	/^  void ExtractMetaData() {$/;"	f	class:leveldb::__anon22::Repairer	file:
ExtractUserKey	db/dbformat.h	/^inline Slice ExtractUserKey(const Slice& internal_key) {$/;"	f	namespace:leveldb
ExtractValueType	db/dbformat.h	/^inline ValueType ExtractValueType(const Slice& internal_key) {$/;"	f	namespace:leveldb
FALLTHROUGH_INTENDED	util/hash.cc	13;"	d	file:
FLAGS_benchmarks	db/db_bench.cc	/^static const char* FLAGS_benchmarks =$/;"	v	file:
FLAGS_bloom_bits	db/db_bench.cc	/^static int FLAGS_bloom_bits = -1;$/;"	v	file:
FLAGS_cache_size	db/db_bench.cc	/^static int FLAGS_cache_size = -1;$/;"	v	file:
FLAGS_compression_ratio	db/db_bench.cc	/^static double FLAGS_compression_ratio = 0.5;$/;"	v	file:
FLAGS_db	db/db_bench.cc	/^static const char* FLAGS_db = NULL;$/;"	v	file:
FLAGS_histogram	db/db_bench.cc	/^static bool FLAGS_histogram = false;$/;"	v	file:
FLAGS_num	db/db_bench.cc	/^static int FLAGS_num = 10000000;$/;"	v	file:
FLAGS_open_files	db/db_bench.cc	/^static int FLAGS_open_files = 0;$/;"	v	file:
FLAGS_reads	db/db_bench.cc	/^static int FLAGS_reads = -1;$/;"	v	file:
FLAGS_threads	db/db_bench.cc	/^static int FLAGS_threads = 1;$/;"	v	file:
FLAGS_use_existing_db	db/db_bench.cc	/^static bool FLAGS_use_existing_db = false;$/;"	v	file:
FLAGS_value_size	db/db_bench.cc	/^static int FLAGS_value_size = 100;$/;"	v	file:
FLAGS_write_buffer_size	db/db_bench.cc	/^static int FLAGS_write_buffer_size = 0;$/;"	v	file:
FileExists	helpers/memenv/memenv.cc	/^  virtual bool FileExists(const std::string& fname) {$/;"	f	class:leveldb::__anon13::InMemoryEnv
FileExists	include/leveldb/env.h	/^  bool FileExists(const std::string& f) { return target_->FileExists(f); }$/;"	f	class:leveldb::EnvWrapper
FileExists	util/env_posix.cc	/^  virtual bool FileExists(const std::string& fname) {$/;"	f	class:leveldb::__anon4::PosixEnv
FileLock	include/leveldb/env.h	/^  FileLock() { }$/;"	f	class:leveldb::FileLock
FileLock	include/leveldb/env.h	/^class FileLock {$/;"	c	namespace:leveldb
FileMetaData	db/version_edit.h	/^  FileMetaData() : refs(0), allowed_seeks(1 << 30), file_size(0) { }$/;"	f	struct:leveldb::FileMetaData
FileMetaData	db/version_edit.h	/^struct FileMetaData {$/;"	s	namespace:leveldb
FileSet	db/version_set.cc	/^  typedef std::set<FileMetaData*, BySmallestKey> FileSet;$/;"	t	class:leveldb::VersionSet::Builder	file:
FileSize	table/table_builder.cc	/^uint64_t TableBuilder::FileSize() const {$/;"	f	class:leveldb::TableBuilder
FileState	helpers/memenv/memenv.cc	/^  FileState() : refs_(0), size_(0) {}$/;"	f	class:leveldb::__anon13::FileState
FileState	helpers/memenv/memenv.cc	/^class FileState {$/;"	c	namespace:leveldb::__anon13	file:
FileSystem	helpers/memenv/memenv.cc	/^  typedef std::map<std::string, FileState*> FileSystem;$/;"	t	class:leveldb::__anon13::InMemoryEnv	file:
FileType	db/filename.h	/^enum FileType {$/;"	g	namespace:leveldb
FilterBlockBuilder	table/filter_block.cc	/^FilterBlockBuilder::FilterBlockBuilder(const FilterPolicy* policy)$/;"	f	class:leveldb::FilterBlockBuilder
FilterBlockBuilder	table/filter_block.h	/^class FilterBlockBuilder {$/;"	c	namespace:leveldb
FilterBlockReader	table/filter_block.cc	/^FilterBlockReader::FilterBlockReader(const FilterPolicy* policy,$/;"	f	class:leveldb::FilterBlockReader
FilterBlockReader	table/filter_block.h	/^class FilterBlockReader {$/;"	c	namespace:leveldb
FilterPolicy	include/leveldb/filter_policy.h	/^class FilterPolicy {$/;"	c	namespace:leveldb
Finalize	db/version_set.cc	/^void VersionSet::Finalize(Version* v) {$/;"	f	class:leveldb::VersionSet
FindFile	db/version_set.cc	/^int FindFile(const InternalKeyComparator& icmp,$/;"	f	namespace:leveldb
FindFiles	db/repair.cc	/^  Status FindFiles() {$/;"	f	class:leveldb::__anon22::Repairer	file:
FindGreaterOrEqual	db/skiplist.h	/^typename SkipList<Key,Comparator>::Node* SkipList<Key,Comparator>::FindGreaterOrEqual(const Key& key, Node** prev)$/;"	f	class:leveldb::SkipList
FindLargest	table/merger.cc	/^void MergingIterator::FindLargest() {$/;"	f	class:leveldb::__anon9::MergingIterator
FindLast	db/skiplist.h	/^typename SkipList<Key,Comparator>::Node* SkipList<Key,Comparator>::FindLast()$/;"	f	class:leveldb::SkipList
FindLessThan	db/skiplist.h	/^SkipList<Key,Comparator>::FindLessThan(const Key& key) const {$/;"	f	class:leveldb::SkipList
FindNextUserEntry	db/db_iter.cc	/^void DBIter::FindNextUserEntry(bool skipping, std::string* skip) {$/;"	f	class:leveldb::__anon20::DBIter
FindPointer	util/cache.cc	/^  LRUHandle** FindPointer(const Slice& key, uint32_t hash) {$/;"	f	class:leveldb::__anon3::HandleTable	file:
FindPrevUserEntry	db/db_iter.cc	/^void DBIter::FindPrevUserEntry() {$/;"	f	class:leveldb::__anon20::DBIter
FindShortSuccessor	db/c.cc	/^  virtual void FindShortSuccessor(std::string* key) const { }$/;"	f	struct:leveldb_comparator_t
FindShortSuccessor	db/dbformat.cc	/^void InternalKeyComparator::FindShortSuccessor(std::string* key) const {$/;"	f	class:leveldb::InternalKeyComparator
FindShortSuccessor	util/comparator.cc	/^  virtual void FindShortSuccessor(std::string* key) const {$/;"	f	class:leveldb::__anon7::BytewiseComparatorImpl
FindShortestSeparator	db/c.cc	/^  virtual void FindShortestSeparator(std::string*, const Slice&) const { }$/;"	f	struct:leveldb_comparator_t
FindShortestSeparator	db/dbformat.cc	/^void InternalKeyComparator::FindShortestSeparator($/;"	f	class:leveldb::InternalKeyComparator
FindShortestSeparator	util/comparator.cc	/^  virtual void FindShortestSeparator($/;"	f	class:leveldb::__anon7::BytewiseComparatorImpl
FindSmallest	table/merger.cc	/^void MergingIterator::FindSmallest() {$/;"	f	class:leveldb::__anon9::MergingIterator
FindTable	db/table_cache.cc	/^Status TableCache::FindTable(uint64_t file_number, uint64_t file_size,$/;"	f	class:leveldb::TableCache
Finish	table/block_builder.cc	/^Slice BlockBuilder::Finish() {$/;"	f	class:leveldb::BlockBuilder
Finish	table/filter_block.cc	/^Slice FilterBlockBuilder::Finish() {$/;"	f	class:leveldb::FilterBlockBuilder
Finish	table/table_builder.cc	/^Status TableBuilder::Finish() {$/;"	f	class:leveldb::TableBuilder
FinishCompactionOutputFile	db/db_impl.cc	/^Status DBImpl::FinishCompactionOutputFile(CompactionState* compact,$/;"	f	class:leveldb::DBImpl
FinishedSingleOp	db/db_bench.cc	/^  void FinishedSingleOp() {$/;"	f	class:leveldb::__anon21::Stats
Flush	db/leveldb_main.cc	/^  virtual Status Flush() { return Status::OK(); }$/;"	f	class:leveldb::__anon19::StdoutPrinter
Flush	helpers/memenv/memenv.cc	/^  virtual Status Flush() { return Status::OK(); }$/;"	f	class:leveldb::__anon13::WritableFileImpl
Flush	table/table_builder.cc	/^void TableBuilder::Flush() {$/;"	f	class:leveldb::TableBuilder
Flush	util/env_posix.cc	/^  virtual Status Flush() {$/;"	f	class:leveldb::__anon4::PosixWritableFile
Footer	table/format.h	/^  Footer() { }$/;"	f	class:leveldb::Footer
Footer	table/format.h	/^class Footer {$/;"	c	namespace:leveldb
ForEachOverlapping	db/version_set.cc	/^void Version::ForEachOverlapping(Slice user_key, Slice internal_key,$/;"	f	class:leveldb::Version
Generate	db/db_bench.cc	/^  Slice Generate(size_t len) {$/;"	f	class:leveldb::__anon21::RandomGenerator
GenerateFilter	table/filter_block.cc	/^void FilterBlockBuilder::GenerateFilter() {$/;"	f	class:leveldb::FilterBlockBuilder
Get	db/bigtable.cc	/^Status BigTable::Get(const ReadOptions& opt, const Slice& key, $/;"	f	class:leveldb::BigTable
Get	db/db_impl.cc	/^Status DBImpl::Get(const ReadOptions& options,$/;"	f	class:leveldb::DBImpl
Get	db/memtable.cc	/^bool MemTable::Get(const LookupKey& key, std::string* value, Status* s) {$/;"	f	class:leveldb::MemTable
Get	db/table_cache.cc	/^Status TableCache::Get(const ReadOptions& options,$/;"	f	class:leveldb::TableCache
Get	db/version_set.cc	/^Status Version::Get(const ReadOptions& options,$/;"	f	class:leveldb::Version
GetAllowed	util/env_posix.cc	/^  intptr_t GetAllowed() const {$/;"	f	class:leveldb::__anon4::MmapLimiter	file:
GetApproximateSizes	db/db_impl.cc	/^void DBImpl::GetApproximateSizes($/;"	f	class:leveldb::DBImpl
GetChildren	db/bigtable.cc	/^Status GetChildren(const std::string& dir,$/;"	f	namespace:leveldb
GetChildren	helpers/memenv/memenv.cc	/^  virtual Status GetChildren(const std::string& dir,$/;"	f	class:leveldb::__anon13::InMemoryEnv
GetChildren	include/leveldb/env.h	/^  Status GetChildren(const std::string& dir, std::vector<std::string>* r) {$/;"	f	class:leveldb::EnvWrapper
GetChildren	util/env_posix.cc	/^  virtual Status GetChildren(const std::string& dir,$/;"	f	class:leveldb::__anon4::PosixEnv
GetCurrentDescriptorName	db/db_impl.cc	/^std::string DBImpl::GetCurrentDescriptorName()$/;"	f	class:leveldb::DBImpl
GetFileIterator	db/version_set.cc	/^static Iterator* GetFileIterator(void* arg,$/;"	f	namespace:leveldb
GetFileSize	helpers/memenv/memenv.cc	/^  virtual Status GetFileSize(const std::string& fname, uint64_t* file_size) {$/;"	f	class:leveldb::__anon13::InMemoryEnv
GetFileSize	include/leveldb/env.h	/^  Status GetFileSize(const std::string& f, uint64_t* s) {$/;"	f	class:leveldb::EnvWrapper
GetFileSize	util/env_posix.cc	/^  virtual Status GetFileSize(const std::string& fname, uint64_t* size) {$/;"	f	class:leveldb::__anon4::PosixEnv
GetHeapProfile	port/port_posix.h	/^inline bool GetHeapProfile(void (*func)(void*, const char*, int), void* arg) {$/;"	f	namespace:leveldb::port
GetInternalKey	db/version_edit.cc	/^static bool GetInternalKey(Slice* input, InternalKey* dst) {$/;"	f	namespace:leveldb
GetLengthPrefixedSlice	db/memtable.cc	/^static Slice GetLengthPrefixedSlice(const char* data) {$/;"	f	namespace:leveldb
GetLengthPrefixedSlice	util/coding.cc	/^bool GetLengthPrefixedSlice(Slice* input, Slice* result) {$/;"	f	namespace:leveldb
GetLengthPrefixedSlice	util/coding.cc	/^const char* GetLengthPrefixedSlice(const char* p, const char* limit,$/;"	f	namespace:leveldb
GetLevel	db/version_edit.cc	/^static bool GetLevel(Slice* input, int* level) {$/;"	f	namespace:leveldb
GetMaxHeight	db/skiplist.h	/^  inline int GetMaxHeight() const {$/;"	f	class:leveldb::SkipList
GetMetaTabletName	db/bigtable.cc	/^std::string BigTable::GetMetaTabletName(const std::string& dbname)$/;"	f	class:leveldb::BigTable
GetNewTabletNum	db/bigtable.h	/^  uint64_t GetNewTabletNum() { return tablet_num_++;}$/;"	f	class:leveldb::BigTable
GetOverlappingInputs	db/version_set.cc	/^void Version::GetOverlappingInputs($/;"	f	class:leveldb::Version
GetProperty	db/db_impl.cc	/^bool DBImpl::GetProperty(const Slice& property, std::string* value) {$/;"	f	class:leveldb::DBImpl
GetRange	db/version_set.cc	/^void VersionSet::GetRange(const std::vector<FileMetaData*>& inputs,$/;"	f	class:leveldb::VersionSet
GetRange2	db/version_set.cc	/^void VersionSet::GetRange2(const std::vector<FileMetaData*>& inputs1,$/;"	f	class:leveldb::VersionSet
GetRestartPoint	table/block.cc	/^  uint32_t GetRestartPoint(uint32_t index) {$/;"	f	class:leveldb::Block::Iter	file:
GetSnapshot	db/db_impl.cc	/^const Snapshot* DBImpl::GetSnapshot() {$/;"	f	class:leveldb::DBImpl
GetStats	db/version_set.h	/^  struct GetStats {$/;"	s	class:leveldb::Version
GetTabletID	db/bigtable.cc	/^uint64_t GetTabletID(const std::string& DataTabletName)$/;"	f	namespace:leveldb
GetTabletName	db/bigtable.cc	/^std::string GetTabletName(uint64_t tid)$/;"	f	namespace:leveldb
GetTestDirectory	helpers/memenv/memenv.cc	/^  virtual Status GetTestDirectory(std::string* path) {$/;"	f	class:leveldb::__anon13::InMemoryEnv
GetTestDirectory	include/leveldb/env.h	/^  virtual Status GetTestDirectory(std::string* path) {$/;"	f	class:leveldb::EnvWrapper
GetTestDirectory	util/env_posix.cc	/^  virtual Status GetTestDirectory(std::string* result) {$/;"	f	class:leveldb::__anon4::PosixEnv
GetVarint32	util/coding.cc	/^bool GetVarint32(Slice* input, uint32_t* value) {$/;"	f	namespace:leveldb
GetVarint32Ptr	util/coding.h	/^inline const char* GetVarint32Ptr(const char* p,$/;"	f	namespace:leveldb
GetVarint32PtrFallback	util/coding.cc	/^const char* GetVarint32PtrFallback(const char* p,$/;"	f	namespace:leveldb
GetVarint64	util/coding.cc	/^bool GetVarint64(Slice* input, uint64_t* value) {$/;"	f	namespace:leveldb
GetVarint64Ptr	util/coding.cc	/^const char* GetVarint64Ptr(const char* p, const char* limit, uint64_t* value) {$/;"	f	namespace:leveldb
GuessType	db/dumpfile.cc	/^bool GuessType(const std::string& fname, FileType* type) {$/;"	f	namespace:leveldb::__anon24
Handle	include/leveldb/cache.h	/^  struct Handle { };$/;"	s	class:leveldb::Cache
HandleDumpCommand	db/leveldb_main.cc	/^bool HandleDumpCommand(Env* env, char** files, int num) {$/;"	f	namespace:leveldb::__anon19
HandleTable	util/cache.cc	/^  HandleTable() : length_(0), elems_(0), list_(NULL) { Resize(); }$/;"	f	class:leveldb::__anon3::HandleTable
HandleTable	util/cache.cc	/^class HandleTable {$/;"	c	namespace:leveldb::__anon3	file:
Handler	include/leveldb/write_batch.h	/^  class Handler {$/;"	c	class:leveldb::WriteBatch
Hash	util/hash.cc	/^uint32_t Hash(const char* data, size_t n, uint32_t seed) {$/;"	f	namespace:leveldb
HashSlice	util/cache.cc	/^  static inline uint32_t HashSlice(const Slice& s) {$/;"	f	class:leveldb::__anon3::ShardedLRUCache	file:
HeapProfile	db/db_bench.cc	/^  void HeapProfile() {$/;"	f	class:leveldb::Benchmark	file:
Histogram	util/histogram.h	/^  Histogram() { }$/;"	f	class:leveldb::Histogram
Histogram	util/histogram.h	/^class Histogram {$/;"	c	namespace:leveldb
IOError	include/leveldb/status.h	/^  static Status IOError(const Slice& msg, const Slice& msg2 = Slice()) {$/;"	f	class:leveldb::Status
IOError	util/env_posix.cc	/^static Status IOError(const std::string& context, int err_number) {$/;"	f	namespace:leveldb::__anon4
IOSARCH	Makefile	/^IOSARCH=-arch armv6 -arch armv7 -arch armv7s -arch arm64$/;"	m
IOSVERSION	Makefile	/^IOSVERSION=$(shell defaults read $(PLATFORMSROOT)\/iPhoneOS.platform\/version CFBundleShortVersionString)$/;"	m
InMemoryEnv	helpers/memenv/memenv.cc	/^  explicit InMemoryEnv(Env* base_env) : EnvWrapper(base_env) { }$/;"	f	class:leveldb::__anon13::InMemoryEnv
InMemoryEnv	helpers/memenv/memenv.cc	/^class InMemoryEnv : public EnvWrapper {$/;"	c	namespace:leveldb::__anon13	file:
InfoLogFileName	db/filename.cc	/^std::string InfoLogFileName(const std::string& dbname) {$/;"	f	namespace:leveldb
InitDataBlock	table/two_level_iterator.cc	/^void TwoLevelIterator::InitDataBlock() {$/;"	f	class:leveldb::__anon12::TwoLevelIterator
InitDefaultEnv	util/env_posix.cc	/^static void InitDefaultEnv() { default_env = new PosixEnv; }$/;"	f	namespace:leveldb
InitModule	util/comparator.cc	/^static void InitModule() {$/;"	f	namespace:leveldb
InitOnce	port/port_posix.cc	/^void InitOnce(OnceType* once, void (*initializer)()) {$/;"	f	namespace:leveldb::port
Insert	db/skiplist.h	/^void SkipList<Key,Comparator>::Insert(const Key& key) {$/;"	f	class:leveldb::SkipList
Insert	util/cache.cc	/^  LRUHandle* Insert(LRUHandle* h) {$/;"	f	class:leveldb::__anon3::HandleTable
Insert	util/cache.cc	/^  virtual Handle* Insert(const Slice& key, void* value, size_t charge,$/;"	f	class:leveldb::__anon3::ShardedLRUCache
Insert	util/cache.cc	/^Cache::Handle* LRUCache::Insert($/;"	f	class:leveldb::__anon3::LRUCache
Insert	util/env_posix.cc	/^  bool Insert(const std::string& fname) {$/;"	f	class:leveldb::__anon4::PosixLockTable
InsertInto	db/write_batch.cc	/^Status WriteBatchInternal::InsertInto(const WriteBatch* b,$/;"	f	class:leveldb::WriteBatchInternal
InstallCompactionResults	db/db_impl.cc	/^Status DBImpl::InstallCompactionResults(CompactionState* compact) {$/;"	f	class:leveldb::DBImpl
InternalFilterPolicy	db/dbformat.h	/^  explicit InternalFilterPolicy(const FilterPolicy* p) : user_policy_(p) { }$/;"	f	class:leveldb::InternalFilterPolicy
InternalFilterPolicy	db/dbformat.h	/^class InternalFilterPolicy : public FilterPolicy {$/;"	c	namespace:leveldb
InternalGet	table/table.cc	/^Status Table::InternalGet(const ReadOptions& options, const Slice& k,$/;"	f	class:leveldb::Table
InternalKey	db/dbformat.h	/^  InternalKey() { }   \/\/ Leave rep_ as empty to indicate it is invalid$/;"	f	class:leveldb::InternalKey
InternalKey	db/dbformat.h	/^  InternalKey(const Slice& user_key, SequenceNumber s, ValueType t) {$/;"	f	class:leveldb::InternalKey
InternalKey	db/dbformat.h	/^class InternalKey {$/;"	c	namespace:leveldb
InternalKeyComparator	db/dbformat.h	/^  explicit InternalKeyComparator(const Comparator* c) : user_comparator_(c) { }$/;"	f	class:leveldb::InternalKeyComparator
InternalKeyComparator	db/dbformat.h	/^class InternalKeyComparator : public Comparator {$/;"	c	namespace:leveldb
InternalKeyEncodingLength	db/dbformat.h	/^inline size_t InternalKeyEncodingLength(const ParsedInternalKey& key) {$/;"	f	namespace:leveldb
InvalidArgument	include/leveldb/status.h	/^  static Status InvalidArgument(const Slice& msg, const Slice& msg2 = Slice()) {$/;"	f	class:leveldb::Status
IsBaseLevelForKey	db/version_set.cc	/^bool Compaction::IsBaseLevelForKey(const Slice& user_key) {$/;"	f	class:leveldb::Compaction
IsCorruption	include/leveldb/status.h	/^  bool IsCorruption() const { return code() == kCorruption; }$/;"	f	class:leveldb::Status
IsIOError	include/leveldb/status.h	/^  bool IsIOError() const { return code() == kIOError; }$/;"	f	class:leveldb::Status
IsNotFound	include/leveldb/status.h	/^  bool IsNotFound() const { return code() == kNotFound; }$/;"	f	class:leveldb::Status
IsTrivialMove	db/version_set.cc	/^bool Compaction::IsTrivialMove() const {$/;"	f	class:leveldb::Compaction
Iter	table/block.cc	/^  Iter(const Comparator* comparator,$/;"	f	class:leveldb::Block::Iter
Iter	table/block.cc	/^class Block::Iter : public Iterator {$/;"	c	class:leveldb::Block	file:
IterState	db/db_impl.cc	/^struct IterState {$/;"	s	namespace:leveldb::__anon18	file:
Iterate	db/write_batch.cc	/^Status WriteBatch::Iterate(Handler* handler) const {$/;"	f	class:leveldb::WriteBatch
Iterator	db/skiplist.h	/^  class Iterator {$/;"	c	class:leveldb::SkipList
Iterator	db/skiplist.h	/^inline SkipList<Key,Comparator>::Iterator::Iterator(const SkipList* list) {$/;"	f	class:leveldb::SkipList::Iterator
Iterator	include/leveldb/iterator.h	/^class Iterator {$/;"	c	namespace:leveldb
Iterator	table/iterator.cc	/^Iterator::Iterator() {$/;"	f	class:leveldb::Iterator
IteratorWrapper	table/iterator_wrapper.h	/^  IteratorWrapper(): iter_(NULL), valid_(false) { }$/;"	f	class:leveldb::IteratorWrapper
IteratorWrapper	table/iterator_wrapper.h	/^  explicit IteratorWrapper(Iterator* iter): iter_(NULL) {$/;"	f	class:leveldb::IteratorWrapper
IteratorWrapper	table/iterator_wrapper.h	/^class IteratorWrapper {$/;"	c	namespace:leveldb
KeyComparator	db/memtable.h	/^    explicit KeyComparator(const InternalKeyComparator& c) : comparator(c) { }$/;"	f	struct:leveldb::MemTable::KeyComparator
KeyComparator	db/memtable.h	/^  struct KeyComparator {$/;"	s	class:leveldb::MemTable
KeyIsAfterNode	db/skiplist.h	/^bool SkipList<Key,Comparator>::KeyIsAfterNode(const Key& key, Node* n) const {$/;"	f	class:leveldb::SkipList
KeyMayMatch	db/c.cc	/^  virtual bool KeyMayMatch(const Slice& key, const Slice& filter) const {$/;"	f	struct:leveldb_filterpolicy_t
KeyMayMatch	db/dbformat.cc	/^bool InternalFilterPolicy::KeyMayMatch(const Slice& key, const Slice& f) const {$/;"	f	class:leveldb::InternalFilterPolicy
KeyMayMatch	table/filter_block.cc	/^bool FilterBlockReader::KeyMayMatch(uint64_t block_offset, const Slice& key) {$/;"	f	class:leveldb::FilterBlockReader
KeyMayMatch	util/bloom.cc	/^  virtual bool KeyMayMatch(const Slice& key, const Slice& bloom_filter) const {$/;"	f	class:leveldb::__anon2::BloomFilterPolicy
LEVELDB_HAVE_MEMORY_BARRIER	port/atomic_pointer.h	225;"	d
LEVELDB_HAVE_MEMORY_BARRIER	port/atomic_pointer.h	52;"	d
LEVELDB_ONCE_INIT	port/port_example.h	71;"	d
LEVELDB_ONCE_INIT	port/port_posix.h	113;"	d
LE_LOAD32	util/crc32c.cc	/^static inline uint32_t LE_LOAD32(const uint8_t *p) {$/;"	f	namespace:leveldb::crc32c
LIBOBJECTS	Makefile	/^LIBOBJECTS = $(SOURCES:.cc=.o)$/;"	m
LIBRARY	Makefile	/^LIBRARY = libleveldb.a$/;"	m
LOCKABLE	port/thread_annotations.h	29;"	d
LOCKS_EXCLUDED	port/thread_annotations.h	21;"	d
LOCK_RETURNED	port/thread_annotations.h	25;"	d
LRUCache	util/cache.cc	/^LRUCache::LRUCache()$/;"	f	class:leveldb::__anon3::LRUCache
LRUCache	util/cache.cc	/^class LRUCache {$/;"	c	namespace:leveldb::__anon3	file:
LRUHandle	util/cache.cc	/^struct LRUHandle {$/;"	s	namespace:leveldb::__anon3	file:
LRU_Append	util/cache.cc	/^void LRUCache::LRU_Append(LRUHandle* e) {$/;"	f	class:leveldb::__anon3::LRUCache
LRU_Remove	util/cache.cc	/^void LRUCache::LRU_Remove(LRUHandle* e) {$/;"	f	class:leveldb::__anon3::LRUCache
LastRecordOffset	db/log_reader.cc	/^uint64_t Reader::LastRecordOffset() {$/;"	f	class:leveldb::log::Reader
LastSequence	db/version_set.h	/^  uint64_t LastSequence() const { return last_sequence_; }$/;"	f	class:leveldb::VersionSet
LevelFileNumIterator	db/version_set.cc	/^  LevelFileNumIterator(const InternalKeyComparator& icmp,$/;"	f	class:leveldb::Version::LevelFileNumIterator
LevelFileNumIterator	db/version_set.cc	/^class Version::LevelFileNumIterator : public Iterator {$/;"	c	class:leveldb::Version	file:
LevelState	db/version_set.cc	/^  struct LevelState {$/;"	s	class:leveldb::VersionSet::Builder	file:
LevelSummary	db/version_set.cc	/^const char* VersionSet::LevelSummary(LevelSummaryStorage* scratch) const {$/;"	f	class:leveldb::VersionSet
LevelSummaryStorage	db/version_set.h	/^  struct LevelSummaryStorage {$/;"	s	class:leveldb::VersionSet
Lock	port/port_posix.cc	/^void Mutex::Lock() { PthreadCall("lock", pthread_mutex_lock(&mu_)); }$/;"	f	class:leveldb::port::Mutex
LockFile	helpers/memenv/memenv.cc	/^  virtual Status LockFile(const std::string& fname, FileLock** lock) {$/;"	f	class:leveldb::__anon13::InMemoryEnv
LockFile	include/leveldb/env.h	/^  Status LockFile(const std::string& f, FileLock** l) {$/;"	f	class:leveldb::EnvWrapper
LockFile	util/env_posix.cc	/^  virtual Status LockFile(const std::string& fname, FileLock** lock) {$/;"	f	class:leveldb::__anon4::PosixEnv
LockFileName	db/filename.cc	/^std::string LockFileName(const std::string& dbname) {$/;"	f	namespace:leveldb
LockOrUnlock	util/env_posix.cc	/^static int LockOrUnlock(int fd, bool lock) {$/;"	f	namespace:leveldb::__anon4
Log	util/env.cc	/^void Log(Logger* info_log, const char* format, ...) {$/;"	f	namespace:leveldb
LogAndApply	db/version_set.cc	/^Status VersionSet::LogAndApply(VersionEdit* edit, port::Mutex* mu) {$/;"	f	class:leveldb::VersionSet
LogFileName	db/filename.cc	/^std::string LogFileName(const std::string& name, uint64_t number) {$/;"	f	namespace:leveldb
LogNumber	db/version_set.h	/^  uint64_t LogNumber() const { return log_number_; }$/;"	f	class:leveldb::VersionSet
Logger	include/leveldb/env.h	/^  Logger() { }$/;"	f	class:leveldb::Logger
Logger	include/leveldb/env.h	/^class Logger {$/;"	c	namespace:leveldb
Logv	helpers/memenv/memenv.cc	/^  virtual void Logv(const char* format, va_list ap) { }$/;"	f	class:leveldb::__anon13::NoOpLogger
Logv	util/posix_logger.h	/^  virtual void Logv(const char* format, va_list ap) {$/;"	f	class:leveldb::PosixLogger
Lookup	util/cache.cc	/^  LRUHandle* Lookup(const Slice& key, uint32_t hash) {$/;"	f	class:leveldb::__anon3::HandleTable
Lookup	util/cache.cc	/^  virtual Handle* Lookup(const Slice& key) {$/;"	f	class:leveldb::__anon3::ShardedLRUCache
Lookup	util/cache.cc	/^Cache::Handle* LRUCache::Lookup(const Slice& key, uint32_t hash) {$/;"	f	class:leveldb::__anon3::LRUCache
LookupKey	db/dbformat.cc	/^LookupKey::LookupKey(const Slice& user_key, SequenceNumber s) {$/;"	f	class:leveldb::LookupKey
LookupKey	db/dbformat.h	/^class LookupKey {$/;"	c	namespace:leveldb
LookupTablet	db/bigtable.cc	/^Tablet* BigTable::LookupTablet(const Slice& key)$/;"	f	class:leveldb::BigTable
MEMENVLIBRARY	Makefile	/^MEMENVLIBRARY = libmemenv.a$/;"	m
MEMENVOBJECTS	Makefile	/^MEMENVOBJECTS = $(MEMENV_SOURCES:.cc=.o)$/;"	m
MakeFileName	db/filename.cc	/^static std::string MakeFileName(const std::string& name, uint64_t number,$/;"	f	namespace:leveldb
MakeInputIterator	db/version_set.cc	/^Iterator* VersionSet::MakeInputIterator(Compaction* c) {$/;"	f	class:leveldb::VersionSet
MakeRoomForWrite	db/db_impl.cc	/^Status DBImpl::MakeRoomForWrite(bool force) {$/;"	f	class:leveldb::DBImpl
ManifestFileNumber	db/version_set.h	/^  uint64_t ManifestFileNumber() const { return manifest_file_number_; }$/;"	f	class:leveldb::VersionSet
ManualCompaction	db/db_impl.h	/^  struct ManualCompaction {$/;"	s	class:leveldb::DBImpl
MarkFileNumberUsed	db/version_set.cc	/^void VersionSet::MarkFileNumberUsed(uint64_t number) {$/;"	f	class:leveldb::VersionSet
Mask	util/crc32c.h	/^inline uint32_t Mask(uint32_t crc) {$/;"	f	namespace:leveldb::crc32c
MaxBytesForLevel	db/version_set.cc	/^static double MaxBytesForLevel(int level) {$/;"	f	namespace:leveldb
MaxFileSizeForLevel	db/version_set.cc	/^static uint64_t MaxFileSizeForLevel(int level) {$/;"	f	namespace:leveldb
MaxNextLevelOverlappingBytes	db/version_set.cc	/^int64_t VersionSet::MaxNextLevelOverlappingBytes() {$/;"	f	class:leveldb::VersionSet
MaxOutputFileSize	db/version_set.h	/^  uint64_t MaxOutputFileSize() const { return max_output_file_size_; }$/;"	f	class:leveldb::Compaction
MaybeAddFile	db/version_set.cc	/^  void MaybeAddFile(Version* v, int level, FileMetaData* f) {$/;"	f	class:leveldb::VersionSet::Builder
MaybeIgnoreError	db/db_impl.cc	/^void DBImpl::MaybeIgnoreError(Status* s) const {$/;"	f	class:leveldb::DBImpl
MaybeScheduleCompaction	db/db_impl.cc	/^void DBImpl::MaybeScheduleCompaction() {$/;"	f	class:leveldb::DBImpl
Median	util/histogram.cc	/^double Histogram::Median() const {$/;"	f	class:leveldb::Histogram
MemTable	db/memtable.cc	/^MemTable::MemTable(const InternalKeyComparator& cmp)$/;"	f	class:leveldb::MemTable
MemTable	db/memtable.h	/^class MemTable {$/;"	c	namespace:leveldb
MemTableInserter	db/write_batch.cc	/^class MemTableInserter : public WriteBatch::Handler {$/;"	c	namespace:leveldb::__anon23	file:
MemTableIterator	db/memtable.cc	/^  explicit MemTableIterator(MemTable::Table* table) : iter_(table) { }$/;"	f	class:leveldb::MemTableIterator
MemTableIterator	db/memtable.cc	/^class MemTableIterator: public Iterator {$/;"	c	namespace:leveldb	file:
MemoryUsage	util/arena.h	/^  size_t MemoryUsage() const {$/;"	f	class:leveldb::Arena
Merge	db/db_bench.cc	/^  void Merge(const Stats& other) {$/;"	f	class:leveldb::__anon21::Stats
Merge	util/histogram.cc	/^void Histogram::Merge(const Histogram& other) {$/;"	f	class:leveldb::Histogram
MergingIterator	table/merger.cc	/^  MergingIterator(const Comparator* comparator, Iterator** children, int n)$/;"	f	class:leveldb::__anon9::MergingIterator
MergingIterator	table/merger.cc	/^class MergingIterator : public Iterator {$/;"	c	namespace:leveldb::__anon9	file:
MmapLimiter	util/env_posix.cc	/^  MmapLimiter() {$/;"	f	class:leveldb::__anon4::MmapLimiter
MmapLimiter	util/env_posix.cc	/^class MmapLimiter {$/;"	c	namespace:leveldb::__anon4	file:
Mutex	port/port_example.h	/^class Mutex {$/;"	c	namespace:leveldb::port
Mutex	port/port_posix.cc	/^Mutex::Mutex() { PthreadCall("init mutex", pthread_mutex_init(&mu_, NULL)); }$/;"	f	class:leveldb::port::Mutex
Mutex	port/port_posix.h	/^class Mutex {$/;"	c	namespace:leveldb::port
MutexLock	util/mutexlock.h	/^class SCOPED_LOCKABLE MutexLock {$/;"	c	namespace:leveldb
NO_THREAD_SAFETY_ANALYSIS	port/thread_annotations.h	57;"	d
Name	db/c.cc	/^  virtual const char* Name() const {$/;"	f	struct:leveldb_comparator_t
Name	db/c.cc	/^  virtual const char* Name() const {$/;"	f	struct:leveldb_filterpolicy_t
Name	db/dbformat.cc	/^const char* InternalFilterPolicy::Name() const {$/;"	f	class:leveldb::InternalFilterPolicy
Name	db/dbformat.cc	/^const char* InternalKeyComparator::Name() const {$/;"	f	class:leveldb::InternalKeyComparator
Name	util/bloom.cc	/^  virtual const char* Name() const {$/;"	f	class:leveldb::__anon2::BloomFilterPolicy
Name	util/comparator.cc	/^  virtual const char* Name() const {$/;"	f	class:leveldb::__anon7::BytewiseComparatorImpl
NeedsCompaction	db/version_set.h	/^  bool NeedsCompaction() const {$/;"	f	class:leveldb::VersionSet
New	db/snapshot.h	/^  const SnapshotImpl* New(SequenceNumber seq) {$/;"	f	class:leveldb::SnapshotList
NewBloomFilterPolicy	util/bloom.cc	/^const FilterPolicy* NewBloomFilterPolicy(int bits_per_key) {$/;"	f	namespace:leveldb
NewConcatenatingIterator	db/version_set.cc	/^Iterator* Version::NewConcatenatingIterator(const ReadOptions& options,$/;"	f	class:leveldb::Version
NewDB	db/db_impl.cc	/^Status DBImpl::NewDB() {$/;"	f	class:leveldb::DBImpl
NewDBIterator	db/db_iter.cc	/^Iterator* NewDBIterator($/;"	f	namespace:leveldb
NewEmptyIterator	table/iterator.cc	/^Iterator* NewEmptyIterator() {$/;"	f	namespace:leveldb
NewErrorIterator	table/iterator.cc	/^Iterator* NewErrorIterator(const Status& status) {$/;"	f	namespace:leveldb
NewFileNumber	db/version_set.h	/^  uint64_t NewFileNumber() { return next_file_number_++; }$/;"	f	class:leveldb::VersionSet
NewId	util/cache.cc	/^  virtual uint64_t NewId() {$/;"	f	class:leveldb::__anon3::ShardedLRUCache
NewInternalIterator	db/db_impl.cc	/^Iterator* DBImpl::NewInternalIterator(const ReadOptions& options,$/;"	f	class:leveldb::DBImpl
NewIterator	db/db_impl.cc	/^Iterator* DBImpl::NewIterator(const ReadOptions& options) {$/;"	f	class:leveldb::DBImpl
NewIterator	db/memtable.cc	/^Iterator* MemTable::NewIterator() {$/;"	f	class:leveldb::MemTable
NewIterator	db/table_cache.cc	/^Iterator* TableCache::NewIterator(const ReadOptions& options,$/;"	f	class:leveldb::TableCache
NewIterator	table/block.cc	/^Iterator* Block::NewIterator(const Comparator* cmp) {$/;"	f	class:leveldb::Block
NewIterator	table/table.cc	/^Iterator* Table::NewIterator(const ReadOptions& options) const {$/;"	f	class:leveldb::Table
NewLRUCache	util/cache.cc	/^Cache* NewLRUCache(size_t capacity) {$/;"	f	namespace:leveldb
NewLogger	helpers/memenv/memenv.cc	/^  virtual Status NewLogger(const std::string& fname, Logger** result) {$/;"	f	class:leveldb::__anon13::InMemoryEnv
NewLogger	include/leveldb/env.h	/^  virtual Status NewLogger(const std::string& fname, Logger** result) {$/;"	f	class:leveldb::EnvWrapper
NewLogger	util/env_posix.cc	/^  virtual Status NewLogger(const std::string& fname, Logger** result) {$/;"	f	class:leveldb::__anon4::PosixEnv
NewMemEnv	helpers/memenv/memenv.cc	/^Env* NewMemEnv(Env* base_env) {$/;"	f	namespace:leveldb
NewMergingIterator	table/merger.cc	/^Iterator* NewMergingIterator(const Comparator* cmp, Iterator** list, int n) {$/;"	f	namespace:leveldb
NewNode	db/skiplist.h	/^SkipList<Key,Comparator>::NewNode(const Key& key, int height) {$/;"	f	class:leveldb::SkipList
NewRandomAccessFile	helpers/memenv/memenv.cc	/^  virtual Status NewRandomAccessFile(const std::string& fname,$/;"	f	class:leveldb::__anon13::InMemoryEnv
NewRandomAccessFile	include/leveldb/env.h	/^  Status NewRandomAccessFile(const std::string& f, RandomAccessFile** r) {$/;"	f	class:leveldb::EnvWrapper
NewRandomAccessFile	util/env_posix.cc	/^  virtual Status NewRandomAccessFile(const std::string& fname,$/;"	f	class:leveldb::__anon4::PosixEnv
NewSequentialFile	helpers/memenv/memenv.cc	/^  virtual Status NewSequentialFile(const std::string& fname,$/;"	f	class:leveldb::__anon13::InMemoryEnv
NewSequentialFile	include/leveldb/env.h	/^  Status NewSequentialFile(const std::string& f, SequentialFile** r) {$/;"	f	class:leveldb::EnvWrapper
NewSequentialFile	util/env_posix.cc	/^  virtual Status NewSequentialFile(const std::string& fname,$/;"	f	class:leveldb::__anon4::PosixEnv
NewTableIterator	db/repair.cc	/^  Iterator* NewTableIterator(const FileMetaData& meta) {$/;"	f	class:leveldb::__anon22::Repairer	file:
NewTwoLevelIterator	table/two_level_iterator.cc	/^Iterator* NewTwoLevelIterator($/;"	f	namespace:leveldb
NewWritableFile	helpers/memenv/memenv.cc	/^  virtual Status NewWritableFile(const std::string& fname,$/;"	f	class:leveldb::__anon13::InMemoryEnv
NewWritableFile	include/leveldb/env.h	/^  Status NewWritableFile(const std::string& f, WritableFile** r) {$/;"	f	class:leveldb::EnvWrapper
NewWritableFile	util/env_posix.cc	/^  virtual Status NewWritableFile(const std::string& fname,$/;"	f	class:leveldb::__anon4::PosixEnv
NewWritableFile	util/testutil.h	/^  virtual Status NewWritableFile(const std::string& fname,$/;"	f	class:leveldb::test::ErrorEnv
NewestFirst	db/version_set.cc	/^static bool NewestFirst(FileMetaData* a, FileMetaData* b) {$/;"	f	namespace:leveldb
Next	db/db_iter.cc	/^void DBIter::Next() {$/;"	f	class:leveldb::__anon20::DBIter
Next	db/memtable.cc	/^  virtual void Next() { iter_.Next(); }$/;"	f	class:leveldb::MemTableIterator
Next	db/skiplist.h	/^  Node* Next(int n) {$/;"	f	struct:leveldb::SkipList::Node
Next	db/skiplist.h	/^inline void SkipList<Key,Comparator>::Iterator::Next() {$/;"	f	class:leveldb::SkipList::Iterator
Next	db/version_set.cc	/^  virtual void Next() {$/;"	f	class:leveldb::Version::LevelFileNumIterator
Next	table/block.cc	/^  virtual void Next() {$/;"	f	class:leveldb::Block::Iter
Next	table/iterator.cc	/^  virtual void Next() { assert(false); }$/;"	f	class:leveldb::__anon8::EmptyIterator
Next	table/iterator_wrapper.h	/^  void Next()               { assert(iter_); iter_->Next();        Update(); }$/;"	f	class:leveldb::IteratorWrapper
Next	table/merger.cc	/^  virtual void Next() {$/;"	f	class:leveldb::__anon9::MergingIterator
Next	table/two_level_iterator.cc	/^void TwoLevelIterator::Next() {$/;"	f	class:leveldb::__anon12::TwoLevelIterator
Next	util/random.h	/^  uint32_t Next() {$/;"	f	class:leveldb::Random
NextEntryOffset	table/block.cc	/^  inline uint32_t NextEntryOffset() const {$/;"	f	class:leveldb::Block::Iter	file:
NoBarrier_Load	port/atomic_pointer.h	/^  inline void* NoBarrier_Load() const { return rep_; }$/;"	f	class:leveldb::port::AtomicPointer
NoBarrier_Next	db/skiplist.h	/^  Node* NoBarrier_Next(int n) {$/;"	f	struct:leveldb::SkipList::Node
NoBarrier_SetNext	db/skiplist.h	/^  void NoBarrier_SetNext(int n, Node* x) {$/;"	f	struct:leveldb::SkipList::Node
NoBarrier_Store	port/atomic_pointer.h	/^  inline void NoBarrier_Store(void* v) { rep_ = v; }$/;"	f	class:leveldb::port::AtomicPointer
NoOpLogger	helpers/memenv/memenv.cc	/^class NoOpLogger : public Logger {$/;"	c	namespace:leveldb::__anon13	file:
Node	db/skiplist.h	/^  explicit Node(const Key& k) : key(k) { }$/;"	f	struct:leveldb::SkipList::Node
Node	db/skiplist.h	/^struct SkipList<Key,Comparator>::Node {$/;"	s	class:leveldb::SkipList
NotFound	include/leveldb/status.h	/^  static Status NotFound(const Slice& msg, const Slice& msg2 = Slice()) {$/;"	f	class:leveldb::Status
NotSupported	include/leveldb/status.h	/^  static Status NotSupported(const Slice& msg, const Slice& msg2 = Slice()) {$/;"	f	class:leveldb::Status
NowMicros	include/leveldb/env.h	/^  uint64_t NowMicros() {$/;"	f	class:leveldb::EnvWrapper
NowMicros	util/env_posix.cc	/^  virtual uint64_t NowMicros() {$/;"	f	class:leveldb::__anon4::PosixEnv
NumEntries	table/table_builder.cc	/^uint64_t TableBuilder::NumEntries() const {$/;"	f	class:leveldb::TableBuilder
NumFiles	db/version_set.h	/^  int NumFiles(int level) const { return files_[level].size(); }$/;"	f	class:leveldb::Version
NumLevelBytes	db/version_set.cc	/^int64_t VersionSet::NumLevelBytes(int level) const {$/;"	f	class:leveldb::VersionSet
NumLevelFiles	db/version_set.cc	/^int VersionSet::NumLevelFiles(int level) const {$/;"	f	class:leveldb::VersionSet
NumRestarts	table/block.cc	/^inline uint32_t Block::NumRestarts() const {$/;"	f	class:leveldb::Block
NumberToString	util/logging.cc	/^std::string NumberToString(uint64_t num) {$/;"	f	namespace:leveldb
OK	include/leveldb/status.h	/^  static Status OK() { return Status(); }$/;"	f	class:leveldb::Status
OPT	Makefile	/^ OPT ?= -g2$/;"	m
OldInfoLogFileName	db/filename.cc	/^std::string OldInfoLogFileName(const std::string& dbname) {$/;"	f	namespace:leveldb
OnceType	port/port_example.h	/^typedef intptr_t OnceType;$/;"	t	namespace:leveldb::port
OnceType	port/port_posix.h	/^typedef pthread_once_t OnceType;$/;"	t	namespace:leveldb::port
OneIn	util/random.h	/^  bool OneIn(int n) { return (Next() % n) == 0; }$/;"	f	class:leveldb::Random
Open	db/bigtable.cc	/^Status BigTable::Open(const Options& options, const std::string& dbname,$/;"	f	class:leveldb::BigTable
Open	db/db_bench.cc	/^  void Open() {$/;"	f	class:leveldb::Benchmark	file:
Open	db/db_impl.cc	/^Status DB::Open(const Options& options, const std::string& dbname,$/;"	f	class:leveldb::DB
Open	table/table.cc	/^Status Table::Open(const Options& options,$/;"	f	class:leveldb::Table
OpenBench	db/db_bench.cc	/^  void OpenBench(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
OpenCompactionOutputFile	db/db_impl.cc	/^Status DBImpl::OpenCompactionOutputFile(CompactionState* compact) {$/;"	f	class:leveldb::DBImpl
OpenTablet	db/bigtable.cc	/^Tablet* BigTable::OpenTablet(uint64_t tid, Slice lkey)$/;"	f	class:leveldb::BigTable
Options	include/leveldb/options.h	/^struct Options {$/;"	s	namespace:leveldb
Options	util/options.cc	/^Options::Options()$/;"	f	class:leveldb::Options
Output	db/db_impl.cc	/^  struct Output {$/;"	s	struct:leveldb::DBImpl::CompactionState	file:
OverlapInLevel	db/version_set.cc	/^bool Version::OverlapInLevel(int level,$/;"	f	class:leveldb::Version
PLATFORMSROOT	Makefile	/^PLATFORMSROOT=\/Applications\/Xcode.app\/Contents\/Developer\/Platforms$/;"	m
PLATFORM_IS_LITTLE_ENDIAN	port/port_posix.h	10;"	d
PLATFORM_IS_LITTLE_ENDIAN	port/port_posix.h	14;"	d
PLATFORM_IS_LITTLE_ENDIAN	port/port_posix.h	20;"	d
PLATFORM_IS_LITTLE_ENDIAN	port/port_posix.h	22;"	d
PLATFORM_IS_LITTLE_ENDIAN	port/port_posix.h	28;"	d
PLATFORM_IS_LITTLE_ENDIAN	port/port_posix.h	30;"	d
PLATFORM_IS_LITTLE_ENDIAN	port/port_posix.h	36;"	d
PLATFORM_IS_LITTLE_ENDIAN	port/port_posix.h	50;"	d
PLATFORM_IS_LITTLE_ENDIAN	port/port_posix.h	78;"	d
PORT_ATOMIC_POINTER_H_	port/atomic_pointer.h	19;"	d
PROGRAMS	Makefile	/^PROGRAMS = db_bench leveldbutil $(TESTS)$/;"	m
PackSequenceAndType	db/dbformat.cc	/^static uint64_t PackSequenceAndType(uint64_t seq, ValueType t) {$/;"	f	namespace:leveldb
ParseFileName	db/filename.cc	/^bool ParseFileName(const std::string& fname,$/;"	f	namespace:leveldb
ParseInternalKey	db/dbformat.h	/^inline bool ParseInternalKey(const Slice& internal_key,$/;"	f	namespace:leveldb
ParseKey	db/db_iter.cc	/^inline bool DBIter::ParseKey(ParsedInternalKey* ikey) {$/;"	f	class:leveldb::__anon20::DBIter
ParseNextKey	table/block.cc	/^  bool ParseNextKey() {$/;"	f	class:leveldb::Block::Iter	file:
ParsedInternalKey	db/dbformat.h	/^  ParsedInternalKey() { }  \/\/ Intentionally left uninitialized (for speed)$/;"	f	struct:leveldb::ParsedInternalKey
ParsedInternalKey	db/dbformat.h	/^  ParsedInternalKey(const Slice& u, const SequenceNumber& seq, ValueType t)$/;"	f	struct:leveldb::ParsedInternalKey
ParsedInternalKey	db/dbformat.h	/^struct ParsedInternalKey {$/;"	s	namespace:leveldb
Percentile	util/histogram.cc	/^double Histogram::Percentile(double p) const {$/;"	f	class:leveldb::Histogram
PickCompaction	db/version_set.cc	/^Compaction* VersionSet::PickCompaction() {$/;"	f	class:leveldb::VersionSet
PickLevelForMemTableOutput	db/version_set.cc	/^int Version::PickLevelForMemTableOutput($/;"	f	class:leveldb::Version
PickSplitKey	db/db_impl.cc	/^Status DBImpl::PickSplitKey(InternalKey* ikey)$/;"	f	class:leveldb::DBImpl
PickSplitKey	db/version_set.cc	/^Status VersionSet::PickSplitKey(InternalKey* ikey) const {$/;"	f	class:leveldb::VersionSet
PosixEnv	util/env_posix.cc	/^PosixEnv::PosixEnv() : started_bgthread_(false) {$/;"	f	class:leveldb::__anon4::PosixEnv
PosixEnv	util/env_posix.cc	/^class PosixEnv : public Env {$/;"	c	namespace:leveldb::__anon4	file:
PosixFileLock	util/env_posix.cc	/^class PosixFileLock : public FileLock {$/;"	c	namespace:leveldb::__anon4	file:
PosixLockTable	util/env_posix.cc	/^class PosixLockTable {$/;"	c	namespace:leveldb::__anon4	file:
PosixLogger	util/posix_logger.h	/^  PosixLogger(FILE* f, uint64_t (*gettid)()) : file_(f), gettid_(gettid) { }$/;"	f	class:leveldb::PosixLogger
PosixLogger	util/posix_logger.h	/^class PosixLogger : public Logger {$/;"	c	namespace:leveldb
PosixMmapReadableFile	util/env_posix.cc	/^  PosixMmapReadableFile(const std::string& fname, void* base, size_t length,$/;"	f	class:leveldb::__anon4::PosixMmapReadableFile
PosixMmapReadableFile	util/env_posix.cc	/^class PosixMmapReadableFile: public RandomAccessFile {$/;"	c	namespace:leveldb::__anon4	file:
PosixRandomAccessFile	util/env_posix.cc	/^  PosixRandomAccessFile(const std::string& fname, int fd)$/;"	f	class:leveldb::__anon4::PosixRandomAccessFile
PosixRandomAccessFile	util/env_posix.cc	/^class PosixRandomAccessFile: public RandomAccessFile {$/;"	c	namespace:leveldb::__anon4	file:
PosixSequentialFile	util/env_posix.cc	/^  PosixSequentialFile(const std::string& fname, FILE* f)$/;"	f	class:leveldb::__anon4::PosixSequentialFile
PosixSequentialFile	util/env_posix.cc	/^class PosixSequentialFile: public SequentialFile {$/;"	c	namespace:leveldb::__anon4	file:
PosixWritableFile	util/env_posix.cc	/^  PosixWritableFile(const std::string& fname, FILE* f)$/;"	f	class:leveldb::__anon4::PosixWritableFile
PosixWritableFile	util/env_posix.cc	/^class PosixWritableFile : public WritableFile {$/;"	c	namespace:leveldb::__anon4	file:
Prev	db/db_iter.cc	/^void DBIter::Prev() {$/;"	f	class:leveldb::__anon20::DBIter
Prev	db/memtable.cc	/^  virtual void Prev() { iter_.Prev(); }$/;"	f	class:leveldb::MemTableIterator
Prev	db/skiplist.h	/^inline void SkipList<Key,Comparator>::Iterator::Prev() {$/;"	f	class:leveldb::SkipList::Iterator
Prev	db/version_set.cc	/^  virtual void Prev() {$/;"	f	class:leveldb::Version::LevelFileNumIterator
Prev	table/block.cc	/^  virtual void Prev() {$/;"	f	class:leveldb::Block::Iter
Prev	table/iterator.cc	/^  virtual void Prev() { assert(false); }$/;"	f	class:leveldb::__anon8::EmptyIterator
Prev	table/iterator_wrapper.h	/^  void Prev()               { assert(iter_); iter_->Prev();        Update(); }$/;"	f	class:leveldb::IteratorWrapper
Prev	table/merger.cc	/^  virtual void Prev() {$/;"	f	class:leveldb::__anon9::MergingIterator
Prev	table/two_level_iterator.cc	/^void TwoLevelIterator::Prev() {$/;"	f	class:leveldb::__anon12::TwoLevelIterator
PrevLogNumber	db/version_set.h	/^  uint64_t PrevLogNumber() const { return prev_log_number_; }$/;"	f	class:leveldb::VersionSet
PrintEnvironment	db/db_bench.cc	/^  void PrintEnvironment() {$/;"	f	class:leveldb::Benchmark	file:
PrintHeader	db/db_bench.cc	/^  void PrintHeader() {$/;"	f	class:leveldb::Benchmark	file:
PrintLogContents	db/dumpfile.cc	/^Status PrintLogContents(Env* env, const std::string& fname,$/;"	f	namespace:leveldb::__anon24
PrintStats	db/db_bench.cc	/^  void PrintStats(const char* key) {$/;"	f	class:leveldb::Benchmark	file:
PrintWarnings	db/db_bench.cc	/^  void PrintWarnings() {$/;"	f	class:leveldb::Benchmark	file:
PthreadCall	port/port_posix.cc	/^static void PthreadCall(const char* label, int result) {$/;"	f	namespace:leveldb::port
PthreadCall	util/env_posix.cc	/^  void PthreadCall(const char* label, int result) {$/;"	f	class:leveldb::__anon4::PosixEnv	file:
Put	db/bigtable.cc	/^Status BigTable::Put(const WriteOptions& opt, const Slice& key, $/;"	f	class:leveldb::BigTable
Put	db/db_impl.cc	/^Status DB::Put(const WriteOptions& opt, const Slice& key, const Slice& value) {$/;"	f	class:leveldb::DB
Put	db/db_impl.cc	/^Status DBImpl::Put(const WriteOptions& o, const Slice& key, const Slice& val) {$/;"	f	class:leveldb::DBImpl
Put	db/dumpfile.cc	/^  virtual void Put(const Slice& key, const Slice& value) {$/;"	f	class:leveldb::__anon24::WriteBatchItemPrinter
Put	db/write_batch.cc	/^  virtual void Put(const Slice& key, const Slice& value) {$/;"	f	class:leveldb::__anon23::MemTableInserter
Put	db/write_batch.cc	/^void WriteBatch::Put(const Slice& key, const Slice& value) {$/;"	f	class:leveldb::WriteBatch
PutFixed32	util/coding.cc	/^void PutFixed32(std::string* dst, uint32_t value) {$/;"	f	namespace:leveldb
PutFixed64	util/coding.cc	/^void PutFixed64(std::string* dst, uint64_t value) {$/;"	f	namespace:leveldb
PutLengthPrefixedSlice	util/coding.cc	/^void PutLengthPrefixedSlice(std::string* dst, const Slice& value) {$/;"	f	namespace:leveldb
PutVarint32	util/coding.cc	/^void PutVarint32(std::string* dst, uint32_t v) {$/;"	f	namespace:leveldb
PutVarint64	util/coding.cc	/^void PutVarint64(std::string* dst, uint64_t v) {$/;"	f	namespace:leveldb
RWLock	db/bigtable.h	/^  RWLock() {$/;"	f	class:leveldb::port::RWLock
RWLock	db/bigtable.h	/^class RWLock {$/;"	c	namespace:leveldb::port
Random	util/random.h	/^  explicit Random(uint32_t s) : seed_(s & 0x7fffffffu) {$/;"	f	class:leveldb::Random
Random	util/random.h	/^class Random {$/;"	c	namespace:leveldb
RandomAccessFile	include/leveldb/env.h	/^  RandomAccessFile() { }$/;"	f	class:leveldb::RandomAccessFile
RandomAccessFile	include/leveldb/env.h	/^class RandomAccessFile {$/;"	c	namespace:leveldb
RandomAccessFileImpl	helpers/memenv/memenv.cc	/^  explicit RandomAccessFileImpl(FileState* file) : file_(file) {$/;"	f	class:leveldb::__anon13::RandomAccessFileImpl
RandomAccessFileImpl	helpers/memenv/memenv.cc	/^class RandomAccessFileImpl : public RandomAccessFile {$/;"	c	namespace:leveldb::__anon13	file:
RandomGenerator	db/db_bench.cc	/^  RandomGenerator() {$/;"	f	class:leveldb::__anon21::RandomGenerator
RandomGenerator	db/db_bench.cc	/^class RandomGenerator {$/;"	c	namespace:leveldb::__anon21	file:
RandomHeight	db/skiplist.h	/^int SkipList<Key,Comparator>::RandomHeight() {$/;"	f	class:leveldb::SkipList
RandomKey	util/testutil.cc	/^std::string RandomKey(Random* rnd, int len) {$/;"	f	namespace:leveldb::test
RandomPeriod	db/db_iter.cc	/^  ssize_t RandomPeriod() {$/;"	f	class:leveldb::__anon20::DBIter	file:
RandomString	util/testutil.cc	/^Slice RandomString(Random* rnd, int len, std::string* dst) {$/;"	f	namespace:leveldb::test
Range	include/leveldb/db.h	/^  Range() { }$/;"	f	struct:leveldb::Range
Range	include/leveldb/db.h	/^  Range(const Slice& s, const Slice& l) : start(s), limit(l) { }$/;"	f	struct:leveldb::Range
Range	include/leveldb/db.h	/^struct Range {$/;"	s	namespace:leveldb
Read	helpers/memenv/memenv.cc	/^  Status Read(uint64_t offset, size_t n, Slice* result, char* scratch) const {$/;"	f	class:leveldb::__anon13::FileState
Read	helpers/memenv/memenv.cc	/^  virtual Status Read(size_t n, Slice* result, char* scratch) {$/;"	f	class:leveldb::__anon13::SequentialFileImpl
Read	helpers/memenv/memenv.cc	/^  virtual Status Read(uint64_t offset, size_t n, Slice* result,$/;"	f	class:leveldb::__anon13::RandomAccessFileImpl
Read	util/env_posix.cc	/^  virtual Status Read(size_t n, Slice* result, char* scratch) {$/;"	f	class:leveldb::__anon4::PosixSequentialFile
Read	util/env_posix.cc	/^  virtual Status Read(uint64_t offset, size_t n, Slice* result,$/;"	f	class:leveldb::__anon4::PosixMmapReadableFile
Read	util/env_posix.cc	/^  virtual Status Read(uint64_t offset, size_t n, Slice* result,$/;"	f	class:leveldb::__anon4::PosixRandomAccessFile
ReadBlock	table/format.cc	/^Status ReadBlock(RandomAccessFile* file,$/;"	f	namespace:leveldb
ReadFileToString	util/env.cc	/^Status ReadFileToString(Env* env, const std::string& fname, std::string* data) {$/;"	f	namespace:leveldb
ReadFilter	table/table.cc	/^void Table::ReadFilter(const Slice& filter_handle_value) {$/;"	f	class:leveldb::Table
ReadHot	db/db_bench.cc	/^  void ReadHot(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
ReadLock	db/bigtable.h	/^  void ReadLock() {$/;"	f	class:leveldb::port::RWLock
ReadMeta	table/table.cc	/^void Table::ReadMeta(const Footer& footer) {$/;"	f	class:leveldb::Table
ReadMissing	db/db_bench.cc	/^  void ReadMissing(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
ReadOptions	include/leveldb/options.h	/^  ReadOptions()$/;"	f	struct:leveldb::ReadOptions
ReadOptions	include/leveldb/options.h	/^struct ReadOptions {$/;"	s	namespace:leveldb
ReadPhysicalRecord	db/log_reader.cc	/^unsigned int Reader::ReadPhysicalRecord(Slice* result) {$/;"	f	class:leveldb::log::Reader
ReadRandom	db/db_bench.cc	/^  void ReadRandom(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
ReadRecord	db/log_reader.cc	/^bool Reader::ReadRecord(Slice* record, std::string* scratch) {$/;"	f	class:leveldb::log::Reader
ReadReverse	db/db_bench.cc	/^  void ReadReverse(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
ReadSequential	db/db_bench.cc	/^  void ReadSequential(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
ReadWhileWriting	db/db_bench.cc	/^  void ReadWhileWriting(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
Reader	db/log_reader.cc	/^Reader::Reader(SequentialFile* file, Reporter* reporter, bool checksum,$/;"	f	class:leveldb::log::Reader
Reader	db/log_reader.h	/^class Reader {$/;"	c	namespace:leveldb::log
RecordBackgroundError	db/db_impl.cc	/^void DBImpl::RecordBackgroundError(const Status& s) {$/;"	f	class:leveldb::DBImpl
RecordReadSample	db/db_impl.cc	/^void DBImpl::RecordReadSample(Slice key) {$/;"	f	class:leveldb::DBImpl
RecordReadSample	db/version_set.cc	/^bool Version::RecordReadSample(Slice internal_key) {$/;"	f	class:leveldb::Version
RecordType	db/log_format.h	/^enum RecordType {$/;"	g	namespace:leveldb::log
Recover	db/db_impl.cc	/^Status DBImpl::Recover(VersionEdit* edit) {$/;"	f	class:leveldb::DBImpl
Recover	db/version_set.cc	/^Status VersionSet::Recover() {$/;"	f	class:leveldb::VersionSet
RecoverLogFile	db/db_impl.cc	/^Status DBImpl::RecoverLogFile(uint64_t log_number,$/;"	f	class:leveldb::DBImpl
Ref	db/memtable.h	/^  void Ref() { ++refs_; }$/;"	f	class:leveldb::MemTable
Ref	db/version_set.cc	/^void Version::Ref() {$/;"	f	class:leveldb::Version
Ref	helpers/memenv/memenv.cc	/^  void Ref() {$/;"	f	class:leveldb::__anon13::FileState
RegisterCleanup	table/iterator.cc	/^void Iterator::RegisterCleanup(CleanupFunction func, void* arg1, void* arg2) {$/;"	f	class:leveldb::Iterator
Release	util/cache.cc	/^  virtual void Release(Handle* handle) {$/;"	f	class:leveldb::__anon3::ShardedLRUCache
Release	util/cache.cc	/^void LRUCache::Release(Cache::Handle* handle) {$/;"	f	class:leveldb::__anon3::LRUCache
Release	util/env_posix.cc	/^  void Release() {$/;"	f	class:leveldb::__anon4::MmapLimiter
ReleaseBlock	table/table.cc	/^static void ReleaseBlock(void* arg, void* h) {$/;"	f	namespace:leveldb
ReleaseInputs	db/version_set.cc	/^void Compaction::ReleaseInputs() {$/;"	f	class:leveldb::Compaction
ReleaseSnapshot	db/db_impl.cc	/^void DBImpl::ReleaseSnapshot(const Snapshot* s) {$/;"	f	class:leveldb::DBImpl
Release_Store	port/atomic_pointer.h	/^  inline void Release_Store(void* v) {$/;"	f	class:leveldb::port::AtomicPointer
Remove	util/cache.cc	/^  LRUHandle* Remove(const Slice& key, uint32_t hash) {$/;"	f	class:leveldb::__anon3::HandleTable
Remove	util/env_posix.cc	/^  void Remove(const std::string& fname) {$/;"	f	class:leveldb::__anon4::PosixLockTable
RenameFile	helpers/memenv/memenv.cc	/^  virtual Status RenameFile(const std::string& src,$/;"	f	class:leveldb::__anon13::InMemoryEnv
RenameFile	include/leveldb/env.h	/^  Status RenameFile(const std::string& s, const std::string& t) {$/;"	f	class:leveldb::EnvWrapper
RenameFile	util/env_posix.cc	/^  virtual Status RenameFile(const std::string& src, const std::string& target) {$/;"	f	class:leveldb::__anon4::PosixEnv
Rep	table/table.cc	/^struct Table::Rep {$/;"	s	class:leveldb::Table	file:
Rep	table/table_builder.cc	/^  Rep(const Options& opt, WritableFile* f)$/;"	f	struct:leveldb::TableBuilder::Rep
Rep	table/table_builder.cc	/^struct TableBuilder::Rep {$/;"	s	class:leveldb::TableBuilder	file:
RepairDB	db/repair.cc	/^Status RepairDB(const std::string& dbname, const Options& options) {$/;"	f	namespace:leveldb
RepairTable	db/repair.cc	/^  void RepairTable(const std::string& src, TableInfo t) {$/;"	f	class:leveldb::__anon22::Repairer	file:
Repairer	db/repair.cc	/^  Repairer(const std::string& dbname, const Options& options)$/;"	f	class:leveldb::__anon22::Repairer
Repairer	db/repair.cc	/^class Repairer {$/;"	c	namespace:leveldb::__anon22	file:
ReplicateDB	db/db_impl.cc	/^Status DBImpl::ReplicateDB(const std::string newtablet)$/;"	f	class:leveldb::DBImpl
Report	db/db_bench.cc	/^  void Report(const Slice& name) {$/;"	f	class:leveldb::__anon21::Stats
ReportCorruption	db/log_reader.cc	/^void Reader::ReportCorruption(uint64_t bytes, const char* reason) {$/;"	f	class:leveldb::log::Reader
ReportDrop	db/log_reader.cc	/^void Reader::ReportDrop(uint64_t bytes, const Status& reason) {$/;"	f	class:leveldb::log::Reader
Reporter	db/log_reader.h	/^  class Reporter {$/;"	c	class:leveldb::log::Reader
Reset	table/block_builder.cc	/^void BlockBuilder::Reset() {$/;"	f	class:leveldb::BlockBuilder
Resize	util/cache.cc	/^  void Resize() {$/;"	f	class:leveldb::__anon3::HandleTable	file:
ReuseFileNumber	db/version_set.h	/^  void ReuseFileNumber(uint64_t file_number) {$/;"	f	class:leveldb::VersionSet
Run	db/db_bench.cc	/^  void Run() {$/;"	f	class:leveldb::Benchmark
Run	db/repair.cc	/^  Status Run() {$/;"	f	class:leveldb::__anon22::Repairer
RunBenchmark	db/db_bench.cc	/^  void RunBenchmark(int n, Slice name,$/;"	f	class:leveldb::Benchmark	file:
SCOPED_LOCKABLE	port/thread_annotations.h	33;"	d
SHARED	Makefile	/^SHARED = $(SHARED1) $(SHARED2) $(SHARED3)$/;"	m
SHARED	Makefile	/^SHARED = $(SHARED1)$/;"	m
SHARED1	Makefile	/^SHARED1 = libleveldb.$(PLATFORM_SHARED_EXT)$/;"	m
SHARED2	Makefile	/^SHARED2 = $(SHARED1)$/;"	m
SHARED2	Makefile	/^SHARED2 = $(SHARED1).$(SHARED_MAJOR)$/;"	m
SHARED3	Makefile	/^SHARED3 = $(SHARED1)$/;"	m
SHARED3	Makefile	/^SHARED3 = $(SHARED1).$(SHARED_MAJOR).$(SHARED_MINOR)$/;"	m
SHARED_LOCKS_REQUIRED	port/thread_annotations.h	17;"	d
SHARED_LOCK_FUNCTION	port/thread_annotations.h	41;"	d
SHARED_MAJOR	Makefile	/^SHARED_MAJOR = 1$/;"	m
SHARED_MINOR	Makefile	/^SHARED_MINOR = 18$/;"	m
SHARED_TRYLOCK_FUNCTION	port/thread_annotations.h	49;"	d
SIMULATORROOT	Makefile	/^SIMULATORROOT=$(PLATFORMSROOT)\/iPhoneSimulator.platform\/Developer$/;"	m
SPLIT_LEFT	db/version_edit.h	/^  SPLIT_LEFT,$/;"	e	enum:leveldb::SplitDirect
SPLIT_RIGHT	db/version_edit.h	/^  SPLIT_RIGHT,$/;"	e	enum:leveldb::SplitDirect
SSTTableFileName	db/filename.cc	/^std::string SSTTableFileName(const std::string& name, uint64_t number) {$/;"	f	namespace:leveldb
STEP1	util/crc32c.cc	291;"	d	file:
STEP1	util/crc32c.cc	327;"	d	file:
STEP4	util/crc32c.cc	295;"	d	file:
STEP4	util/crc32c.cc	326;"	d	file:
STORAGE_LEVELDB_DB_BUILDER_H_	db/builder.h	6;"	d
STORAGE_LEVELDB_DB_BigTable_H_	db/bigtable.h	2;"	d
STORAGE_LEVELDB_DB_DBFORMAT_H_	db/dbformat.h	6;"	d
STORAGE_LEVELDB_DB_DB_IMPL_H_	db/db_impl.h	6;"	d
STORAGE_LEVELDB_DB_DB_ITER_H_	db/db_iter.h	6;"	d
STORAGE_LEVELDB_DB_FILENAME_H_	db/filename.h	8;"	d
STORAGE_LEVELDB_DB_LOG_FORMAT_H_	db/log_format.h	9;"	d
STORAGE_LEVELDB_DB_LOG_READER_H_	db/log_reader.h	6;"	d
STORAGE_LEVELDB_DB_LOG_WRITER_H_	db/log_writer.h	6;"	d
STORAGE_LEVELDB_DB_MEMTABLE_H_	db/memtable.h	6;"	d
STORAGE_LEVELDB_DB_SKIPLIST_H_	db/skiplist.h	6;"	d
STORAGE_LEVELDB_DB_SNAPSHOT_H_	db/snapshot.h	6;"	d
STORAGE_LEVELDB_DB_TABLE_CACHE_H_	db/table_cache.h	8;"	d
STORAGE_LEVELDB_DB_VERSION_EDIT_H_	db/version_edit.h	6;"	d
STORAGE_LEVELDB_DB_VERSION_SET_H_	db/version_set.h	16;"	d
STORAGE_LEVELDB_DB_WRITE_BATCH_INTERNAL_H_	db/write_batch_internal.h	6;"	d
STORAGE_LEVELDB_HELPERS_MEMENV_MEMENV_H_	helpers/memenv/memenv.h	6;"	d
STORAGE_LEVELDB_INCLUDE_CACHE_H_	include/leveldb/cache.h	19;"	d
STORAGE_LEVELDB_INCLUDE_COMPARATOR_H_	include/leveldb/comparator.h	6;"	d
STORAGE_LEVELDB_INCLUDE_C_H_	include/leveldb/c.h	41;"	d
STORAGE_LEVELDB_INCLUDE_DB_H_	include/leveldb/db.h	6;"	d
STORAGE_LEVELDB_INCLUDE_DUMPFILE_H_	include/leveldb/dumpfile.h	6;"	d
STORAGE_LEVELDB_INCLUDE_ENV_H_	include/leveldb/env.h	14;"	d
STORAGE_LEVELDB_INCLUDE_FILTER_POLICY_H_	include/leveldb/filter_policy.h	17;"	d
STORAGE_LEVELDB_INCLUDE_ITERATOR_H_	include/leveldb/iterator.h	16;"	d
STORAGE_LEVELDB_INCLUDE_OPTIONS_H_	include/leveldb/options.h	6;"	d
STORAGE_LEVELDB_INCLUDE_SLICE_H_	include/leveldb/slice.h	16;"	d
STORAGE_LEVELDB_INCLUDE_STATUS_H_	include/leveldb/status.h	14;"	d
STORAGE_LEVELDB_INCLUDE_TABLE_BUILDER_H_	include/leveldb/table_builder.h	15;"	d
STORAGE_LEVELDB_INCLUDE_TABLE_H_	include/leveldb/table.h	6;"	d
STORAGE_LEVELDB_INCLUDE_WRITE_BATCH_H_	include/leveldb/write_batch.h	22;"	d
STORAGE_LEVELDB_PORT_PORT_EXAMPLE_H_	port/port_example.h	11;"	d
STORAGE_LEVELDB_PORT_PORT_H_	port/port.h	6;"	d
STORAGE_LEVELDB_PORT_PORT_POSIX_H_	port/port_posix.h	8;"	d
STORAGE_LEVELDB_PORT_THREAD_ANNOTATIONS_H_	port/thread_annotations.h	6;"	d
STORAGE_LEVELDB_TABLE_BLOCK_BUILDER_H_	table/block_builder.h	6;"	d
STORAGE_LEVELDB_TABLE_BLOCK_H_	table/block.h	6;"	d
STORAGE_LEVELDB_TABLE_FILTER_BLOCK_H_	table/filter_block.h	10;"	d
STORAGE_LEVELDB_TABLE_FORMAT_H_	table/format.h	6;"	d
STORAGE_LEVELDB_TABLE_ITERATOR_WRAPPER_H_	table/iterator_wrapper.h	6;"	d
STORAGE_LEVELDB_TABLE_MERGER_H_	table/merger.h	6;"	d
STORAGE_LEVELDB_TABLE_TWO_LEVEL_ITERATOR_H_	table/two_level_iterator.h	6;"	d
STORAGE_LEVELDB_UTIL_ARENA_H_	util/arena.h	6;"	d
STORAGE_LEVELDB_UTIL_CODING_H_	util/coding.h	11;"	d
STORAGE_LEVELDB_UTIL_CRC32C_H_	util/crc32c.h	6;"	d
STORAGE_LEVELDB_UTIL_HASH_H_	util/hash.h	8;"	d
STORAGE_LEVELDB_UTIL_HISTOGRAM_H_	util/histogram.h	6;"	d
STORAGE_LEVELDB_UTIL_LOGGING_H_	util/logging.h	9;"	d
STORAGE_LEVELDB_UTIL_MUTEXLOCK_H_	util/mutexlock.h	6;"	d
STORAGE_LEVELDB_UTIL_POSIX_LOGGER_H_	util/posix_logger.h	9;"	d
STORAGE_LEVELDB_UTIL_RANDOM_H_	util/random.h	6;"	d
STORAGE_LEVELDB_UTIL_TESTUTIL_H_	util/testutil.h	6;"	d
SanitizeOptions	db/db_impl.cc	/^Options SanitizeOptions(const std::string& dbname,$/;"	f	namespace:leveldb
SaveError	db/c.cc	/^static bool SaveError(char** errptr, const Status& s) {$/;"	f	file:
SaveError	table/two_level_iterator.cc	/^  void SaveError(const Status& s) {$/;"	f	class:leveldb::__anon12::TwoLevelIterator	file:
SaveKey	db/db_iter.cc	/^  inline void SaveKey(const Slice& k, std::string* dst) {$/;"	f	class:leveldb::__anon20::DBIter	file:
SaveTo	db/version_set.cc	/^  void SaveTo(Version* v) {$/;"	f	class:leveldb::VersionSet::Builder
SaveValue	db/version_set.cc	/^static void SaveValue(void* arg, const Slice& ikey, const Slice& v) {$/;"	f	namespace:leveldb
Saver	db/version_set.cc	/^struct Saver {$/;"	s	namespace:leveldb::__anon17	file:
SaverState	db/version_set.cc	/^enum SaverState {$/;"	g	namespace:leveldb::__anon17	file:
ScanTable	db/repair.cc	/^  void ScanTable(uint64_t number) {$/;"	f	class:leveldb::__anon22::Repairer	file:
Schedule	include/leveldb/env.h	/^  void Schedule(void (*f)(void*), void* a) {$/;"	f	class:leveldb::EnvWrapper
Schedule	util/env_posix.cc	/^void PosixEnv::Schedule(void (*function)(void*), void* arg) {$/;"	f	class:leveldb::__anon4::PosixEnv
Seek	db/db_iter.cc	/^void DBIter::Seek(const Slice& target) {$/;"	f	class:leveldb::__anon20::DBIter
Seek	db/memtable.cc	/^  virtual void Seek(const Slice& k) { iter_.Seek(EncodeKey(&tmp_, k)); }$/;"	f	class:leveldb::MemTableIterator
Seek	db/skiplist.h	/^inline void SkipList<Key,Comparator>::Iterator::Seek(const Key& target) {$/;"	f	class:leveldb::SkipList::Iterator
Seek	db/version_set.cc	/^  virtual void Seek(const Slice& target) {$/;"	f	class:leveldb::Version::LevelFileNumIterator
Seek	table/block.cc	/^  virtual void Seek(const Slice& target) {$/;"	f	class:leveldb::Block::Iter
Seek	table/iterator.cc	/^  virtual void Seek(const Slice& target) { }$/;"	f	class:leveldb::__anon8::EmptyIterator
Seek	table/iterator_wrapper.h	/^  void Seek(const Slice& k) { assert(iter_); iter_->Seek(k);       Update(); }$/;"	f	class:leveldb::IteratorWrapper
Seek	table/merger.cc	/^  virtual void Seek(const Slice& target) {$/;"	f	class:leveldb::__anon9::MergingIterator
Seek	table/two_level_iterator.cc	/^void TwoLevelIterator::Seek(const Slice& target) {$/;"	f	class:leveldb::__anon12::TwoLevelIterator
SeekRandom	db/db_bench.cc	/^  void SeekRandom(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
SeekToFirst	db/db_iter.cc	/^void DBIter::SeekToFirst() {$/;"	f	class:leveldb::__anon20::DBIter
SeekToFirst	db/memtable.cc	/^  virtual void SeekToFirst() { iter_.SeekToFirst(); }$/;"	f	class:leveldb::MemTableIterator
SeekToFirst	db/skiplist.h	/^inline void SkipList<Key,Comparator>::Iterator::SeekToFirst() {$/;"	f	class:leveldb::SkipList::Iterator
SeekToFirst	db/version_set.cc	/^  virtual void SeekToFirst() { index_ = 0; }$/;"	f	class:leveldb::Version::LevelFileNumIterator
SeekToFirst	table/block.cc	/^  virtual void SeekToFirst() {$/;"	f	class:leveldb::Block::Iter
SeekToFirst	table/iterator.cc	/^  virtual void SeekToFirst() { }$/;"	f	class:leveldb::__anon8::EmptyIterator
SeekToFirst	table/iterator_wrapper.h	/^  void SeekToFirst()        { assert(iter_); iter_->SeekToFirst(); Update(); }$/;"	f	class:leveldb::IteratorWrapper
SeekToFirst	table/merger.cc	/^  virtual void SeekToFirst() {$/;"	f	class:leveldb::__anon9::MergingIterator
SeekToFirst	table/two_level_iterator.cc	/^void TwoLevelIterator::SeekToFirst() {$/;"	f	class:leveldb::__anon12::TwoLevelIterator
SeekToLast	db/db_iter.cc	/^void DBIter::SeekToLast() {$/;"	f	class:leveldb::__anon20::DBIter
SeekToLast	db/memtable.cc	/^  virtual void SeekToLast() { iter_.SeekToLast(); }$/;"	f	class:leveldb::MemTableIterator
SeekToLast	db/skiplist.h	/^inline void SkipList<Key,Comparator>::Iterator::SeekToLast() {$/;"	f	class:leveldb::SkipList::Iterator
SeekToLast	db/version_set.cc	/^  virtual void SeekToLast() {$/;"	f	class:leveldb::Version::LevelFileNumIterator
SeekToLast	table/block.cc	/^  virtual void SeekToLast() {$/;"	f	class:leveldb::Block::Iter
SeekToLast	table/iterator.cc	/^  virtual void SeekToLast() { }$/;"	f	class:leveldb::__anon8::EmptyIterator
SeekToLast	table/iterator_wrapper.h	/^  void SeekToLast()         { assert(iter_); iter_->SeekToLast();  Update(); }$/;"	f	class:leveldb::IteratorWrapper
SeekToLast	table/merger.cc	/^  virtual void SeekToLast() {$/;"	f	class:leveldb::__anon9::MergingIterator
SeekToLast	table/two_level_iterator.cc	/^void TwoLevelIterator::SeekToLast() {$/;"	f	class:leveldb::__anon12::TwoLevelIterator
SeekToRestartPoint	table/block.cc	/^  void SeekToRestartPoint(uint32_t index) {$/;"	f	class:leveldb::Block::Iter	file:
Sequence	db/write_batch.cc	/^SequenceNumber WriteBatchInternal::Sequence(const WriteBatch* b) {$/;"	f	class:leveldb::WriteBatchInternal
SequenceNumber	db/dbformat.h	/^typedef uint64_t SequenceNumber;$/;"	t	namespace:leveldb
SequentialFile	include/leveldb/env.h	/^  SequentialFile() { }$/;"	f	class:leveldb::SequentialFile
SequentialFile	include/leveldb/env.h	/^class SequentialFile {$/;"	c	namespace:leveldb
SequentialFileImpl	helpers/memenv/memenv.cc	/^  explicit SequentialFileImpl(FileState* file) : file_(file), pos_(0) {$/;"	f	class:leveldb::__anon13::SequentialFileImpl
SequentialFileImpl	helpers/memenv/memenv.cc	/^class SequentialFileImpl : public SequentialFile {$/;"	c	namespace:leveldb::__anon13	file:
Set	table/iterator_wrapper.h	/^  void Set(Iterator* iter) {$/;"	f	class:leveldb::IteratorWrapper
SetAllowed	util/env_posix.cc	/^  void SetAllowed(intptr_t v) {$/;"	f	class:leveldb::__anon4::MmapLimiter	file:
SetCapacity	util/cache.cc	/^  void SetCapacity(size_t capacity) { capacity_ = capacity; }$/;"	f	class:leveldb::__anon3::LRUCache
SetCompactPointer	db/version_edit.h	/^  void SetCompactPointer(int level, const InternalKey& key) {$/;"	f	class:leveldb::VersionEdit
SetComparatorName	db/version_edit.h	/^  void SetComparatorName(const Slice& name) {$/;"	f	class:leveldb::VersionEdit
SetContents	db/write_batch.cc	/^void WriteBatchInternal::SetContents(WriteBatch* b, const Slice& contents) {$/;"	f	class:leveldb::WriteBatchInternal
SetCount	db/write_batch.cc	/^void WriteBatchInternal::SetCount(WriteBatch* b, int n) {$/;"	f	class:leveldb::WriteBatchInternal
SetCurrentFile	db/filename.cc	/^Status SetCurrentFile(Env* env, const std::string& dbname,$/;"	f	namespace:leveldb
SetDataIterator	table/two_level_iterator.cc	/^void TwoLevelIterator::SetDataIterator(Iterator* data_iter) {$/;"	f	class:leveldb::__anon12::TwoLevelIterator
SetFrom	db/dbformat.h	/^  void SetFrom(const ParsedInternalKey& p) {$/;"	f	class:leveldb::InternalKey
SetLastSequence	db/version_edit.h	/^  void SetLastSequence(SequenceNumber seq) {$/;"	f	class:leveldb::VersionEdit
SetLastSequence	db/version_set.h	/^  void SetLastSequence(uint64_t s) {$/;"	f	class:leveldb::VersionSet
SetLogNumber	db/version_edit.h	/^  void SetLogNumber(uint64_t num) {$/;"	f	class:leveldb::VersionEdit
SetNext	db/skiplist.h	/^  void SetNext(int n, Node* x) {$/;"	f	struct:leveldb::SkipList::Node
SetNextFile	db/version_edit.h	/^  void SetNextFile(uint64_t num) {$/;"	f	class:leveldb::VersionEdit
SetPrevLogNumber	db/version_edit.h	/^  void SetPrevLogNumber(uint64_t num) {$/;"	f	class:leveldb::VersionEdit
SetSequence	db/write_batch.cc	/^void WriteBatchInternal::SetSequence(WriteBatch* b, SequenceNumber seq) {$/;"	f	class:leveldb::WriteBatchInternal
SetupOtherInputs	db/version_set.cc	/^void VersionSet::SetupOtherInputs(Compaction* c) {$/;"	f	class:leveldb::VersionSet
Shard	util/cache.cc	/^  static uint32_t Shard(uint32_t hash) {$/;"	f	class:leveldb::__anon3::ShardedLRUCache	file:
ShardedLRUCache	util/cache.cc	/^  explicit ShardedLRUCache(size_t capacity)$/;"	f	class:leveldb::__anon3::ShardedLRUCache
ShardedLRUCache	util/cache.cc	/^class ShardedLRUCache : public Cache {$/;"	c	namespace:leveldb::__anon3	file:
SharedState	db/db_bench.cc	/^  SharedState() : cv(&mu) { }$/;"	f	struct:leveldb::__anon21::SharedState
SharedState	db/db_bench.cc	/^struct SharedState {$/;"	s	namespace:leveldb::__anon21	file:
ShouldStopBefore	db/version_set.cc	/^bool Compaction::ShouldStopBefore(const Slice& internal_key) {$/;"	f	class:leveldb::Compaction
Signal	port/port_posix.cc	/^void CondVar::Signal() {$/;"	f	class:leveldb::port::CondVar
SignalAll	port/port_posix.cc	/^void CondVar::SignalAll() {$/;"	f	class:leveldb::port::CondVar
Size	helpers/memenv/memenv.cc	/^  uint64_t Size() const { return size_; }$/;"	f	class:leveldb::__anon13::FileState
Skewed	util/random.h	/^  uint32_t Skewed(int max_log) {$/;"	f	class:leveldb::Random
Skip	helpers/memenv/memenv.cc	/^  virtual Status Skip(uint64_t n) {$/;"	f	class:leveldb::__anon13::SequentialFileImpl
Skip	util/env_posix.cc	/^  virtual Status Skip(uint64_t n) {$/;"	f	class:leveldb::__anon4::PosixSequentialFile
SkipEmptyDataBlocksBackward	table/two_level_iterator.cc	/^void TwoLevelIterator::SkipEmptyDataBlocksBackward() {$/;"	f	class:leveldb::__anon12::TwoLevelIterator
SkipEmptyDataBlocksForward	table/two_level_iterator.cc	/^void TwoLevelIterator::SkipEmptyDataBlocksForward() {$/;"	f	class:leveldb::__anon12::TwoLevelIterator
SkipList	db/skiplist.h	/^SkipList<Key,Comparator>::SkipList(Comparator cmp, Arena* arena)$/;"	f	class:leveldb::SkipList
SkipList	db/skiplist.h	/^class SkipList {$/;"	c	namespace:leveldb
SkipToInitialBlock	db/log_reader.cc	/^bool Reader::SkipToInitialBlock() {$/;"	f	class:leveldb::log::Reader
SleepForMicroseconds	include/leveldb/env.h	/^  void SleepForMicroseconds(int micros) {$/;"	f	class:leveldb::EnvWrapper
SleepForMicroseconds	util/env_posix.cc	/^  virtual void SleepForMicroseconds(int micros) {$/;"	f	class:leveldb::__anon4::PosixEnv
Slice	include/leveldb/slice.h	/^  Slice() : data_(""), size_(0) { }$/;"	f	class:leveldb::Slice
Slice	include/leveldb/slice.h	/^  Slice(const char* d, size_t n) : data_(d), size_(n) { }$/;"	f	class:leveldb::Slice
Slice	include/leveldb/slice.h	/^  Slice(const char* s) : data_(s), size_(strlen(s)) { }$/;"	f	class:leveldb::Slice
Slice	include/leveldb/slice.h	/^  Slice(const std::string& s) : data_(s.data()), size_(s.size()) { }$/;"	f	class:leveldb::Slice
Slice	include/leveldb/slice.h	/^class Slice {$/;"	c	namespace:leveldb
SnappyCompress	db/db_bench.cc	/^  void SnappyCompress(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
SnappyUncompress	db/db_bench.cc	/^  void SnappyUncompress(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
Snappy_Compress	port/port_posix.h	/^inline bool Snappy_Compress(const char* input, size_t length,$/;"	f	namespace:leveldb::port
Snappy_GetUncompressedLength	port/port_posix.h	/^inline bool Snappy_GetUncompressedLength(const char* input, size_t length,$/;"	f	namespace:leveldb::port
Snappy_Uncompress	port/port_posix.h	/^inline bool Snappy_Uncompress(const char* input, size_t length,$/;"	f	namespace:leveldb::port
Snapshot	include/leveldb/db.h	/^class Snapshot {$/;"	c	namespace:leveldb
SnapshotImpl	db/snapshot.h	/^class SnapshotImpl : public Snapshot {$/;"	c	namespace:leveldb
SnapshotList	db/snapshot.h	/^  SnapshotList() {$/;"	f	class:leveldb::SnapshotList
SnapshotList	db/snapshot.h	/^class SnapshotList {$/;"	c	namespace:leveldb
SomeFileOverlapsRange	db/version_set.cc	/^bool SomeFileOverlapsRange($/;"	f	namespace:leveldb
SortByLargestKey	db/bigtable.h	/^  static int SortByLargestKey(const Slice& a, const Slice& b) {$/;"	f	struct:leveldb::Tablet
SplitDS	db/db_impl.cc	/^Status DBImpl::SplitDS(const std::string newtablet, InternalKey& ikey)$/;"	f	class:leveldb::DBImpl
SplitDirect	db/version_edit.h	/^enum SplitDirect {$/;"	g	namespace:leveldb
SplitEdit	db/version_edit.cc	/^Status VersionEdit::SplitEdit(InternalKey& ikey, $/;"	f	class:leveldb::VersionEdit
SplitTablet	db/bigtable.cc	/^Status BigTable::SplitTablet(uint64_t tablet_num)$/;"	f	class:leveldb::BigTable
SplitTablet	db/db_bench.cc	/^  void SplitTablet(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
SplitTablet	db/db_impl.cc	/^Status DBImpl::SplitTablet(const std::string newtablet, std::string* newkey)$/;"	f	class:leveldb::DBImpl
SplitWait	db/db_impl.h	/^  void SplitWait() {$/;"	f	class:leveldb::DBImpl
StandardDeviation	util/histogram.cc	/^double Histogram::StandardDeviation() const {$/;"	f	class:leveldb::Histogram
Start	db/db_bench.cc	/^  void Start() {$/;"	f	class:leveldb::__anon21::Stats
StartBlock	table/filter_block.cc	/^void FilterBlockBuilder::StartBlock(uint64_t block_offset) {$/;"	f	class:leveldb::FilterBlockBuilder
StartThread	include/leveldb/env.h	/^  void StartThread(void (*f)(void*), void* a) {$/;"	f	class:leveldb::EnvWrapper
StartThread	util/env_posix.cc	/^void PosixEnv::StartThread(void (*function)(void* arg), void* arg) {$/;"	f	class:leveldb::__anon4::PosixEnv
StartThreadState	util/env_posix.cc	/^struct StartThreadState {$/;"	s	namespace:leveldb::__anon4::__anon5	file:
StartThreadWrapper	util/env_posix.cc	/^static void* StartThreadWrapper(void* arg) {$/;"	f	namespace:leveldb::__anon4
Stats	db/db_bench.cc	/^  Stats() { Start(); }$/;"	f	class:leveldb::__anon21::Stats
Stats	db/db_bench.cc	/^class Stats {$/;"	c	namespace:leveldb::__anon21	file:
Status	include/leveldb/status.h	/^  Status() : state_(NULL) { }$/;"	f	class:leveldb::Status
Status	include/leveldb/status.h	/^class Status {$/;"	c	namespace:leveldb
Status	include/leveldb/status.h	/^inline Status::Status(const Status& s) {$/;"	f	class:leveldb::Status
Status	util/status.cc	/^Status::Status(Code code, const Slice& msg, const Slice& msg2) {$/;"	f	class:leveldb::Status
StdoutPrinter	db/leveldb_main.cc	/^class StdoutPrinter : public WritableFile {$/;"	c	namespace:leveldb::__anon19	file:
Stop	db/db_bench.cc	/^  void Stop() {$/;"	f	class:leveldb::__anon21::Stats
Sync	db/leveldb_main.cc	/^  virtual Status Sync() { return Status::OK(); }$/;"	f	class:leveldb::__anon19::StdoutPrinter
Sync	helpers/memenv/memenv.cc	/^  virtual Status Sync() { return Status::OK(); }$/;"	f	class:leveldb::__anon13::WritableFileImpl
Sync	util/env_posix.cc	/^  virtual Status Sync() {$/;"	f	class:leveldb::__anon4::PosixWritableFile
SyncDirIfManifest	util/env_posix.cc	/^  Status SyncDirIfManifest() {$/;"	f	class:leveldb::__anon4::PosixWritableFile
TESTHARNESS	Makefile	/^TESTHARNESS = .\/util\/testharness.o $(TESTUTIL)$/;"	m
TESTS	Makefile	/^TESTS = \\$/;"	m
TESTUTIL	Makefile	/^TESTUTIL = .\/util\/testutil.o$/;"	m
TEST_CompactMemTable	db/db_impl.cc	/^Status DBImpl::TEST_CompactMemTable() {$/;"	f	class:leveldb::DBImpl
TEST_CompactRange	db/db_impl.cc	/^void DBImpl::TEST_CompactRange(int level, const Slice* begin,const Slice* end) {$/;"	f	class:leveldb::DBImpl
TEST_MaxNextLevelOverlappingBytes	db/db_impl.cc	/^int64_t DBImpl::TEST_MaxNextLevelOverlappingBytes() {$/;"	f	class:leveldb::DBImpl
TEST_NewInternalIterator	db/db_impl.cc	/^Iterator* DBImpl::TEST_NewInternalIterator() {$/;"	f	class:leveldb::DBImpl
Table	db/memtable.h	/^  typedef SkipList<const char*, KeyComparator> Table;$/;"	t	class:leveldb::MemTable
Table	include/leveldb/table.h	/^  explicit Table(Rep* rep) { rep_ = rep; }$/;"	f	class:leveldb::Table
Table	include/leveldb/table.h	/^class Table {$/;"	c	namespace:leveldb
TableAndFile	db/table_cache.cc	/^struct TableAndFile {$/;"	s	namespace:leveldb	file:
TableBuilder	include/leveldb/table_builder.h	/^class TableBuilder {$/;"	c	namespace:leveldb
TableBuilder	table/table_builder.cc	/^TableBuilder::TableBuilder(const Options& options, WritableFile* file)$/;"	f	class:leveldb::TableBuilder
TableCache	db/table_cache.cc	/^TableCache::TableCache(const std::string& dbname,$/;"	f	class:leveldb::TableCache
TableCache	db/table_cache.h	/^class TableCache {$/;"	c	namespace:leveldb
TableFileName	db/filename.cc	/^std::string TableFileName(const std::string& name, uint64_t number) {$/;"	f	namespace:leveldb
TableInfo	db/repair.cc	/^  struct TableInfo {$/;"	s	class:leveldb::__anon22::Repairer	file:
Tablet	db/bigtable.h	/^  Tablet(uint64_t tid) : db(NULL), tabletId(tid) {}$/;"	f	struct:leveldb::Tablet
Tablet	db/bigtable.h	/^struct Tablet {$/;"	s	namespace:leveldb
TabletCompare	db/bigtable.h	/^  static bool TabletCompare(const Tablet* left, const Tablet* right)$/;"	f	struct:leveldb::Tablet
Tag	db/version_edit.cc	/^enum Tag {$/;"	g	namespace:leveldb	file:
TempFileName	db/filename.cc	/^std::string TempFileName(const std::string& dbname, uint64_t number) {$/;"	f	namespace:leveldb
ThreadArg	db/db_bench.cc	/^  struct ThreadArg {$/;"	s	class:leveldb::Benchmark	file:
ThreadBody	db/db_bench.cc	/^  static void ThreadBody(void* v) {$/;"	f	class:leveldb::Benchmark	file:
ThreadState	db/db_bench.cc	/^  ThreadState(int index)$/;"	f	struct:leveldb::__anon21::ThreadState
ThreadState	db/db_bench.cc	/^struct ThreadState {$/;"	s	namespace:leveldb::__anon21	file:
ToString	include/leveldb/slice.h	/^  std::string ToString() const { return std::string(data_, size_); }$/;"	f	class:leveldb::Slice
ToString	util/histogram.cc	/^std::string Histogram::ToString() const {$/;"	f	class:leveldb::Histogram
ToString	util/status.cc	/^std::string Status::ToString() const {$/;"	f	class:leveldb::Status
TotalFileSize	db/version_set.cc	/^static int64_t TotalFileSize(const std::vector<FileMetaData*>& files) {$/;"	f	namespace:leveldb
TrimSpace	db/db_bench.cc	/^static Slice TrimSpace(Slice s) {$/;"	f	namespace:leveldb::__anon21
TwoLevelIterator	table/two_level_iterator.cc	/^TwoLevelIterator::TwoLevelIterator($/;"	f	class:leveldb::__anon12::TwoLevelIterator
TwoLevelIterator	table/two_level_iterator.cc	/^class TwoLevelIterator: public Iterator {$/;"	c	namespace:leveldb::__anon12	file:
UNLOCK_FUNCTION	port/thread_annotations.h	53;"	d
UNLOCK_FUNCTION	util/mutexlock.h	/^  ~MutexLock() UNLOCK_FUNCTION() { this->mu_->Unlock(); }$/;"	f	class:leveldb::MutexLock
Uniform	util/random.h	/^  uint32_t Uniform(int n) { return Next() % n; }$/;"	f	class:leveldb::Random
Unlock	db/bigtable.h	/^  void Unlock() {$/;"	f	class:leveldb::port::RWLock
Unlock	port/port_posix.cc	/^void Mutex::Unlock() { PthreadCall("unlock", pthread_mutex_unlock(&mu_)); }$/;"	f	class:leveldb::port::Mutex
UnlockFile	helpers/memenv/memenv.cc	/^  virtual Status UnlockFile(FileLock* lock) {$/;"	f	class:leveldb::__anon13::InMemoryEnv
UnlockFile	include/leveldb/env.h	/^  Status UnlockFile(FileLock* l) { return target_->UnlockFile(l); }$/;"	f	class:leveldb::EnvWrapper
UnlockFile	util/env_posix.cc	/^  virtual Status UnlockFile(FileLock* lock) {$/;"	f	class:leveldb::__anon4::PosixEnv
Unmask	util/crc32c.h	/^inline uint32_t Unmask(uint32_t masked_crc) {$/;"	f	namespace:leveldb::crc32c
Unref	db/memtable.h	/^  void Unref() {$/;"	f	class:leveldb::MemTable
Unref	db/version_set.cc	/^void Version::Unref() {$/;"	f	class:leveldb::Version
Unref	helpers/memenv/memenv.cc	/^  void Unref() {$/;"	f	class:leveldb::__anon13::FileState
Unref	util/cache.cc	/^void LRUCache::Unref(LRUHandle* e) {$/;"	f	class:leveldb::__anon3::LRUCache
UnrefEntry	db/table_cache.cc	/^static void UnrefEntry(void* arg1, void* arg2) {$/;"	f	namespace:leveldb
Update	table/iterator_wrapper.h	/^  void Update() {$/;"	f	class:leveldb::IteratorWrapper
UpdateStats	db/version_set.cc	/^bool Version::UpdateStats(const GetStats& stats) {$/;"	f	class:leveldb::Version
Usage	db/leveldb_main.cc	/^static void Usage() {$/;"	f	file:
Valid	db/db_iter.cc	/^  virtual bool Valid() const { return valid_; }$/;"	f	class:leveldb::__anon20::DBIter
Valid	db/memtable.cc	/^  virtual bool Valid() const { return iter_.Valid(); }$/;"	f	class:leveldb::MemTableIterator
Valid	db/skiplist.h	/^inline bool SkipList<Key,Comparator>::Iterator::Valid() const {$/;"	f	class:leveldb::SkipList::Iterator
Valid	db/version_set.cc	/^  virtual bool Valid() const {$/;"	f	class:leveldb::Version::LevelFileNumIterator
Valid	table/block.cc	/^  virtual bool Valid() const { return current_ < restarts_; }$/;"	f	class:leveldb::Block::Iter
Valid	table/iterator.cc	/^  virtual bool Valid() const { return false; }$/;"	f	class:leveldb::__anon8::EmptyIterator
Valid	table/iterator_wrapper.h	/^  bool Valid() const        { return valid_; }$/;"	f	class:leveldb::IteratorWrapper
Valid	table/merger.cc	/^  virtual bool Valid() const {$/;"	f	class:leveldb::__anon9::MergingIterator
Valid	table/two_level_iterator.cc	/^  virtual bool Valid() const {$/;"	f	class:leveldb::__anon12::TwoLevelIterator
Value	util/cache.cc	/^  virtual void* Value(Handle* handle) {$/;"	f	class:leveldb::__anon3::ShardedLRUCache
Value	util/crc32c.h	/^inline uint32_t Value(const char* data, size_t n) {$/;"	f	namespace:leveldb::crc32c
ValueType	db/dbformat.h	/^enum ValueType {$/;"	g	namespace:leveldb
VarintLength	util/coding.cc	/^int VarintLength(uint64_t v) {$/;"	f	namespace:leveldb
Version	db/version_set.h	/^  explicit Version(VersionSet* vset)$/;"	f	class:leveldb::Version
Version	db/version_set.h	/^class Version {$/;"	c	namespace:leveldb
VersionEdit	db/version_edit.h	/^  VersionEdit() { Clear(); }$/;"	f	class:leveldb::VersionEdit
VersionEdit	db/version_edit.h	/^class VersionEdit {$/;"	c	namespace:leveldb
VersionEditPrinter	db/dumpfile.cc	/^static void VersionEditPrinter(uint64_t pos, Slice record, WritableFile* dst) {$/;"	f	namespace:leveldb::__anon24
VersionSet	db/version_set.cc	/^VersionSet::VersionSet(const std::string& dbname,$/;"	f	class:leveldb::VersionSet
VersionSet	db/version_set.h	/^class VersionSet {$/;"	c	namespace:leveldb
Wait	port/port_posix.cc	/^void CondVar::Wait() {$/;"	f	class:leveldb::port::CondVar
WritableFile	include/leveldb/env.h	/^  WritableFile() { }$/;"	f	class:leveldb::WritableFile
WritableFile	include/leveldb/env.h	/^class WritableFile {$/;"	c	namespace:leveldb
WritableFileImpl	helpers/memenv/memenv.cc	/^  WritableFileImpl(FileState* file) : file_(file) {$/;"	f	class:leveldb::__anon13::WritableFileImpl
WritableFileImpl	helpers/memenv/memenv.cc	/^class WritableFileImpl : public WritableFile {$/;"	c	namespace:leveldb::__anon13	file:
Write	db/db_impl.cc	/^Status DBImpl::Write(const WriteOptions& options, WriteBatch* my_batch) {$/;"	f	class:leveldb::DBImpl
WriteBatch	db/write_batch.cc	/^WriteBatch::WriteBatch() {$/;"	f	class:leveldb::WriteBatch
WriteBatch	include/leveldb/write_batch.h	/^class WriteBatch {$/;"	c	namespace:leveldb
WriteBatchInternal	db/write_batch_internal.h	/^class WriteBatchInternal {$/;"	c	namespace:leveldb
WriteBatchItemPrinter	db/dumpfile.cc	/^class WriteBatchItemPrinter : public WriteBatch::Handler {$/;"	c	namespace:leveldb::__anon24	file:
WriteBatchPrinter	db/dumpfile.cc	/^static void WriteBatchPrinter(uint64_t pos, Slice record, WritableFile* dst) {$/;"	f	namespace:leveldb::__anon24
WriteBlock	table/table_builder.cc	/^void TableBuilder::WriteBlock(BlockBuilder* block, BlockHandle* handle) {$/;"	f	class:leveldb::TableBuilder
WriteDescriptor	db/repair.cc	/^  Status WriteDescriptor() {$/;"	f	class:leveldb::__anon22::Repairer	file:
WriteLevel0Table	db/db_impl.cc	/^Status DBImpl::WriteLevel0Table(MemTable* mem, VersionEdit* edit,$/;"	f	class:leveldb::DBImpl
WriteLock	db/bigtable.h	/^  void WriteLock() {$/;"	f	class:leveldb::port::RWLock
WriteOptions	include/leveldb/options.h	/^  WriteOptions()$/;"	f	struct:leveldb::WriteOptions
WriteOptions	include/leveldb/options.h	/^struct WriteOptions {$/;"	s	namespace:leveldb
WriteRandom	db/db_bench.cc	/^  void WriteRandom(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
WriteRawBlock	table/table_builder.cc	/^void TableBuilder::WriteRawBlock(const Slice& block_contents,$/;"	f	class:leveldb::TableBuilder
WriteSeq	db/db_bench.cc	/^  void WriteSeq(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
WriteSnapshot	db/version_set.cc	/^Status VersionSet::WriteSnapshot(log::Writer* log) {$/;"	f	class:leveldb::VersionSet
WriteStringToFile	util/env.cc	/^Status WriteStringToFile(Env* env, const Slice& data,$/;"	f	namespace:leveldb
WriteStringToFileSync	util/env.cc	/^Status WriteStringToFileSync(Env* env, const Slice& data,$/;"	f	namespace:leveldb
WriteToFile	db/db_bench.cc	/^  static void WriteToFile(void* arg, const char* buf, int n) {$/;"	f	class:leveldb::Benchmark	file:
Writer	db/db_impl.cc	/^  explicit Writer(port::Mutex* mu) : cv(mu) { }$/;"	f	struct:leveldb::DBImpl::Writer
Writer	db/db_impl.cc	/^struct DBImpl::Writer {$/;"	s	class:leveldb::DBImpl	file:
Writer	db/log_writer.cc	/^Writer::Writer(WritableFile* dest)$/;"	f	class:leveldb::log::Writer
Writer	db/log_writer.h	/^class Writer {$/;"	c	namespace:leveldb::log
added_files	db/version_set.cc	/^    FileSet* added_files;$/;"	m	struct:leveldb::VersionSet::Builder::LevelState	file:
alloc_bytes_remaining_	util/arena.h	/^  size_t alloc_bytes_remaining_;$/;"	m	class:leveldb::Arena
alloc_ptr_	util/arena.h	/^  char* alloc_ptr_;$/;"	m	class:leveldb::Arena
allowed_	util/env_posix.cc	/^  port::AtomicPointer allowed_;$/;"	m	class:leveldb::__anon4::MmapLimiter	file:
allowed_seeks	db/version_edit.h	/^  int allowed_seeks;          \/\/ Seeks allowed until compaction, 该sst最大的seek次数，一旦为负，则触发compact$/;"	m	struct:leveldb::FileMetaData
arena_	db/memtable.h	/^  Arena arena_; \/\/ TODO: 目测是空间分配管理$/;"	m	class:leveldb::MemTable
arena_	db/skiplist.h	/^  Arena* const arena_;    \/\/ Arena used for allocations of nodes$/;"	m	class:leveldb::SkipList
arg	util/env_posix.cc	/^  struct BGItem { void* arg; void (*function)(void*); };$/;"	m	struct:leveldb::__anon4::PosixEnv::BGItem	file:
arg	util/env_posix.cc	/^  void* arg;$/;"	m	struct:leveldb::__anon4::__anon5::StartThreadState	file:
arg1	include/leveldb/iterator.h	/^    void* arg1;$/;"	m	struct:leveldb::Iterator::Cleanup
arg2	include/leveldb/iterator.h	/^    void* arg2;$/;"	m	struct:leveldb::Iterator::Cleanup
arg_	table/two_level_iterator.cc	/^  void* arg_;$/;"	m	class:leveldb::__anon12::TwoLevelIterator	file:
backing_store_	db/log_reader.h	/^  char* const backing_store_;$/;"	m	class:leveldb::log::Reader
barrier_cv	db/db_impl.h	/^  port::CondVar barrier_cv; \/\/ before split, wait until all compact finish$/;"	m	class:leveldb::DBImpl
barrier_lock	db/db_impl.h	/^  port::Mutex barrier_lock;$/;"	m	class:leveldb::DBImpl
base_	db/version_set.cc	/^  Version* base_; \/\/ builder需要apply更新的基本version$/;"	m	class:leveldb::VersionSet::Builder	file:
base_lg_	table/filter_block.h	/^  size_t base_lg_;      \/\/ Encoding parameter (see kFilterBaseLg in .cc file)$/;"	m	class:leveldb::FilterBlockReader
batch	db/db_impl.cc	/^  WriteBatch* batch; \/\/ 批处理多个写记录$/;"	m	struct:leveldb::DBImpl::Writer	file:
begin	db/db_impl.h	/^    const InternalKey* begin;   \/\/ NULL means beginning of key range$/;"	m	struct:leveldb::DBImpl::ManualCompaction
bg_compaction_scheduled_	db/db_impl.h	/^  bool bg_compaction_scheduled_;$/;"	m	class:leveldb::DBImpl
bg_cv_	db/db_impl.h	/^  port::CondVar bg_cv_;          \/\/ Signalled when background work finishes, 后台工作线程的同步变量$/;"	m	class:leveldb::DBImpl
bg_error_	db/db_impl.h	/^  Status bg_error_; \/\/ 后台操作故障码$/;"	m	class:leveldb::DBImpl
bgsignal_	util/env_posix.cc	/^  pthread_cond_t bgsignal_;$/;"	m	class:leveldb::__anon4::PosixEnv	file:
bgthread_	util/env_posix.cc	/^  pthread_t bgthread_;$/;"	m	class:leveldb::__anon4::PosixEnv	file:
bits_per_key_	util/bloom.cc	/^  size_t bits_per_key_;$/;"	m	class:leveldb::__anon2::BloomFilterPolicy	file:
block_cache	include/leveldb/options.h	/^  Cache* block_cache;$/;"	m	struct:leveldb::Options
block_function_	table/two_level_iterator.cc	/^  BlockFunction block_function_;$/;"	m	class:leveldb::__anon12::TwoLevelIterator	file:
block_offset_	db/log_writer.h	/^  int block_offset_;       \/\/ Current offset in block, 当前日志块的写偏移$/;"	m	class:leveldb::log::Writer
block_restart_interval	include/leveldb/options.h	/^  int block_restart_interval;$/;"	m	struct:leveldb::Options
block_size	include/leveldb/options.h	/^  size_t block_size;$/;"	m	struct:leveldb::Options
blocks_	helpers/memenv/memenv.cc	/^  std::vector<char*> blocks_;$/;"	m	class:leveldb::__anon13::FileState	file:
blocks_	util/arena.h	/^  std::vector<char*> blocks_;$/;"	m	class:leveldb::Arena
blocks_memory_	util/arena.h	/^  size_t blocks_memory_;$/;"	m	class:leveldb::Arena
bm	db/db_bench.cc	/^    Benchmark* bm;$/;"	m	struct:leveldb::Benchmark::ThreadArg	file:
buckets_	util/histogram.h	/^  double buckets_[kNumBuckets];$/;"	m	class:leveldb::Histogram
buffer	db/version_set.h	/^    char buffer[100];$/;"	m	struct:leveldb::VersionSet::LevelSummaryStorage
buffer_	db/log_reader.h	/^  Slice buffer_;$/;"	m	class:leveldb::log::Reader
buffer_	table/block_builder.h	/^  std::string           buffer_;      \/\/ Destination buffer$/;"	m	class:leveldb::BlockBuilder
builder	db/db_impl.cc	/^  TableBuilder* builder;$/;"	m	struct:leveldb::DBImpl::CompactionState	file:
bytes_	db/db_bench.cc	/^  int64_t bytes_;$/;"	m	class:leveldb::__anon21::Stats	file:
bytes_counter_	db/db_iter.cc	/^  ssize_t bytes_counter_;$/;"	m	class:leveldb::__anon20::DBIter	file:
bytes_read	db/db_impl.h	/^    int64_t bytes_read;$/;"	m	struct:leveldb::DBImpl::CompactionStats
bytes_written	db/db_impl.h	/^    int64_t bytes_written;$/;"	m	struct:leveldb::DBImpl::CompactionStats
bytewise	util/comparator.cc	/^static const Comparator* bytewise;$/;"	m	namespace:leveldb	file:
cachable	table/format.h	/^  bool cachable;        \/\/ True iff data can be cached$/;"	m	struct:leveldb::BlockContents
cache_	db/db_bench.cc	/^  Cache* cache_;$/;"	m	class:leveldb::Benchmark	file:
cache_	db/table_cache.h	/^  Cache* cache_; \/\/ key:val = sst file number : table * + file *$/;"	m	class:leveldb::TableCache
cache_id	table/table.cc	/^  uint64_t cache_id;$/;"	m	struct:leveldb::Table::Rep	file:
capacity_	util/cache.cc	/^  size_t capacity_; \/\/ 总的lru cache 大小$/;"	m	class:leveldb::__anon3::LRUCache	file:
charge	util/cache.cc	/^  size_t charge;      \/\/ 表述该项的权重，一般为1。TODO(opt): Only allow uint32_t?$/;"	m	struct:leveldb::__anon3::LRUHandle	file:
checksum_	db/log_reader.h	/^  bool const checksum_;$/;"	m	class:leveldb::log::Reader
children_	table/merger.cc	/^  IteratorWrapper* children_;$/;"	m	class:leveldb::__anon9::MergingIterator	file:
cleanup_	include/leveldb/iterator.h	/^  Cleanup cleanup_;$/;"	m	class:leveldb::Iterator
clear	include/leveldb/slice.h	/^  void clear() { data_ = ""; size_ = 0; }$/;"	f	class:leveldb::Slice
closed	table/table_builder.cc	/^  bool closed;          \/\/ Either Finish() or Abandon() has been called.$/;"	m	struct:leveldb::TableBuilder::Rep	file:
code	include/leveldb/status.h	/^  Code code() const {$/;"	f	class:leveldb::Status
compact_pointer_	db/version_set.h	/^  std::string compact_pointer_[config::kNumLevels];\/\/该层下一次需要执行的compact位置$/;"	m	class:leveldb::VersionSet
compact_pointers_	db/version_edit.h	/^  std::vector< std::pair<int, InternalKey> > compact_pointers_;$/;"	m	class:leveldb::VersionEdit
compaction	db/db_impl.cc	/^  Compaction* const compaction;$/;"	m	struct:leveldb::DBImpl::CompactionState	file:
compaction_level_	db/version_set.h	/^  int compaction_level_;$/;"	m	class:leveldb::Version
compaction_score_	db/version_set.h	/^  double compaction_score_;$/;"	m	class:leveldb::Version
comparator	db/memtable.h	/^    const InternalKeyComparator comparator;$/;"	m	struct:leveldb::MemTable::KeyComparator
comparator	include/leveldb/options.h	/^  const Comparator* comparator;$/;"	m	struct:leveldb::Options
comparator_	db/memtable.h	/^  KeyComparator comparator_; \/\/ key的比较函数$/;"	m	class:leveldb::MemTable
comparator_	db/version_edit.h	/^  std::string comparator_;$/;"	m	class:leveldb::VersionEdit
comparator_	table/block.cc	/^  const Comparator* const comparator_;$/;"	m	class:leveldb::Block::Iter	file:
comparator_	table/merger.cc	/^  const Comparator* comparator_;$/;"	m	class:leveldb::__anon9::MergingIterator	file:
compare	include/leveldb/slice.h	/^inline int Slice::compare(const Slice& b) const {$/;"	f	class:leveldb::Slice
compare_	db/c.cc	/^  int (*compare_)($/;"	m	struct:leveldb_comparator_t	file:
compare_	db/skiplist.h	/^  Comparator const compare_;$/;"	m	class:leveldb::SkipList
compressed_output	table/table_builder.cc	/^  std::string compressed_output;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
compression	include/leveldb/options.h	/^  CompressionType compression;$/;"	m	struct:leveldb::Options
config	db/dbformat.h	/^namespace config {$/;"	n	namespace:leveldb
counter_	table/block_builder.h	/^  int                   counter_;     \/\/ Number of entries emitted since restart$/;"	m	class:leveldb::BlockBuilder
crc32c	util/crc32c.cc	/^namespace crc32c {$/;"	n	namespace:leveldb	file:
crc32c	util/crc32c.h	/^namespace crc32c {$/;"	n	namespace:leveldb
createBigTableDir	db/bigtable.cc	/^Status createBigTableDir(const std::string& dbname)$/;"	f	namespace:leveldb
create_	db/c.cc	/^  char* (*create_)($/;"	m	struct:leveldb_filterpolicy_t	file:
create_if_missing	include/leveldb/options.h	/^  bool create_if_missing;$/;"	m	struct:leveldb::Options
current	db/version_set.h	/^  Version* current() const { return current_; }$/;"	f	class:leveldb::VersionSet
current_	db/version_set.h	/^  Version* current_;        \/\/ == dummy_versions_.prev_$/;"	m	class:leveldb::VersionSet
current_	table/block.cc	/^  uint32_t current_; \/\/ 当前key的offset$/;"	m	class:leveldb::Block::Iter	file:
current_	table/merger.cc	/^  IteratorWrapper* current_;$/;"	m	class:leveldb::__anon9::MergingIterator	file:
current_output	db/db_impl.cc	/^  Output* current_output() { return &outputs[outputs.size()-1]; }$/;"	f	struct:leveldb::DBImpl::CompactionState
cv	db/db_bench.cc	/^  port::CondVar cv;$/;"	m	struct:leveldb::__anon21::SharedState	file:
cv	db/db_impl.cc	/^  port::CondVar cv; \/\/ 写batch线程的同步变量$/;"	m	struct:leveldb::DBImpl::Writer	file:
cv_	port/port_posix.h	/^  pthread_cond_t cv_; \/\/ posix的条件变量$/;"	m	class:leveldb::port::CondVar
data	include/leveldb/slice.h	/^  const char* data() const { return data_; }$/;"	f	class:leveldb::Slice
data	table/format.h	/^  Slice data;           \/\/ Actual contents of data$/;"	m	struct:leveldb::BlockContents
data_	db/db_bench.cc	/^  std::string data_;$/;"	m	class:leveldb::__anon21::RandomGenerator	file:
data_	include/leveldb/slice.h	/^  const char* data_;$/;"	m	class:leveldb::Slice
data_	table/block.cc	/^  const char* const data_;      \/\/ underlying block contents, 数据流$/;"	m	class:leveldb::Block::Iter	file:
data_	table/block.h	/^  const char* data_; \/\/ kv数据$/;"	m	class:leveldb::Block
data_	table/filter_block.h	/^  const char* data_;    \/\/ Pointer to filter data (at block-start)$/;"	m	class:leveldb::FilterBlockReader
data_block	table/table_builder.cc	/^  BlockBuilder data_block; \/\/ key的前缀压缩数据块$/;"	m	struct:leveldb::TableBuilder::Rep	file:
data_block_handle_	table/two_level_iterator.cc	/^  std::string data_block_handle_;$/;"	m	class:leveldb::__anon12::TwoLevelIterator	file:
data_iter_	table/two_level_iterator.cc	/^  IteratorWrapper data_iter_; \/\/ May be NULL$/;"	m	class:leveldb::__anon12::TwoLevelIterator	file:
db	db/bigtable.h	/^  DB* db; \/\/ leveldb handler$/;"	m	struct:leveldb::Tablet
db_	db/db_bench.cc	/^  BigTable *db_;$/;"	m	class:leveldb::Benchmark	file:
db_	db/db_iter.cc	/^  DBImpl* db_;$/;"	m	class:leveldb::__anon20::DBIter	file:
db_lock_	db/db_impl.h	/^  FileLock* db_lock_;$/;"	m	class:leveldb::DBImpl
dbname_	db/db_impl.h	/^  const std::string dbname_;$/;"	m	class:leveldb::DBImpl
dbname_	db/repair.cc	/^  std::string const dbname_;$/;"	m	class:leveldb::__anon22::Repairer::std	file:
dbname_	db/table_cache.h	/^  const std::string dbname_;$/;"	m	class:leveldb::TableCache
dbname_	db/version_set.h	/^  const std::string dbname_;$/;"	m	class:leveldb::VersionSet
default_env	util/env_posix.cc	/^static Env* default_env;$/;"	m	namespace:leveldb	file:
deleted_files	db/version_set.cc	/^    std::set<uint64_t> deleted_files;$/;"	m	struct:leveldb::VersionSet::Builder::LevelState	file:
deleted_files_	db/version_edit.h	/^  DeletedFileSet deleted_files_; \/\/ 记录删除文件的集合$/;"	m	class:leveldb::VersionEdit
deleter	util/cache.cc	/^  void (*deleter)(const Slice&, void* value);\/\/ value对象析构器$/;"	m	struct:leveldb::__anon3::LRUHandle	file:
descriptor_file_	db/version_set.h	/^  WritableFile* descriptor_file_;$/;"	m	class:leveldb::VersionSet
descriptor_log_	db/version_set.h	/^  log::Writer* descriptor_log_; \/\/ must ->sync() before close file$/;"	m	class:leveldb::VersionSet
dest_	db/log_writer.h	/^  WritableFile* dest_; \/\/ 日志文件$/;"	m	class:leveldb::log::Writer
destructor_	db/c.cc	/^  void (*destructor_)(void*);$/;"	m	struct:leveldb_comparator_t	file:
destructor_	db/c.cc	/^  void (*destructor_)(void*);$/;"	m	struct:leveldb_filterpolicy_t	file:
direction_	db/db_iter.cc	/^  Direction direction_;$/;"	m	class:leveldb::__anon20::DBIter	file:
direction_	table/merger.cc	/^  Direction direction_;$/;"	m	class:leveldb::__anon9::MergingIterator	file:
done	db/db_impl.cc	/^  bool done; \/\/ 是否完成标志$/;"	m	struct:leveldb::DBImpl::Writer	file:
done	db/db_impl.h	/^    bool done;$/;"	m	struct:leveldb::DBImpl::ManualCompaction
done_	db/db_bench.cc	/^  int done_;$/;"	m	class:leveldb::__anon21::Stats	file:
dst_	db/dumpfile.cc	/^  WritableFile* dst_;$/;"	m	class:leveldb::__anon24::CorruptionReporter	file:
dst_	db/dumpfile.cc	/^  WritableFile* dst_;$/;"	m	class:leveldb::__anon24::WriteBatchItemPrinter	file:
dummy_versions_	db/version_set.h	/^  Version dummy_versions_;  \/\/ Head of circular doubly-linked list of versions.$/;"	m	class:leveldb::VersionSet
edit	db/version_set.h	/^  VersionEdit* edit() { return &edit_; }$/;"	f	class:leveldb::Compaction
edit_	db/repair.cc	/^  VersionEdit edit_;$/;"	m	class:leveldb::__anon22::Repairer	file:
edit_	db/version_set.h	/^  VersionEdit edit_;$/;"	m	class:leveldb::Compaction
elems_	util/cache.cc	/^  uint32_t elems_; \/\/ hash表内的元素个数$/;"	m	class:leveldb::__anon3::HandleTable	file:
empty	db/snapshot.h	/^  bool empty() const { return list_.next_ == &list_; }$/;"	f	class:leveldb::SnapshotList
empty	include/leveldb/slice.h	/^  bool empty() const { return size_ == 0; }$/;"	f	class:leveldb::Slice
empty	table/block_builder.h	/^  bool empty() const {$/;"	f	class:leveldb::BlockBuilder
end	db/db_impl.h	/^    const InternalKey* end;     \/\/ NULL means end of key range$/;"	m	struct:leveldb::DBImpl::ManualCompaction
end_	db/dbformat.h	/^  const char* end_;\/\/ c查询字符串的结束位置$/;"	m	class:leveldb::LookupKey
end_of_buffer_offset_	db/log_reader.h	/^  uint64_t end_of_buffer_offset_;$/;"	m	class:leveldb::log::Reader
entries_per_batch_	db/db_bench.cc	/^  int entries_per_batch_;$/;"	m	class:leveldb::Benchmark	file:
env	include/leveldb/options.h	/^  Env* env;$/;"	m	struct:leveldb::Options
env_	db/db_impl.h	/^  Env* const env_;$/;"	m	class:leveldb::DBImpl
env_	db/repair.cc	/^  Env* const env_;$/;"	m	class:leveldb::__anon22::Repairer	file:
env_	db/table_cache.h	/^  Env* const env_;$/;"	m	class:leveldb::TableCache
env_	db/version_set.h	/^  Env* const env_;$/;"	m	class:leveldb::VersionSet
eof_	db/log_reader.h	/^  bool eof_;   \/\/ Last Read() indicated EOF by returning < kBlockSize$/;"	m	class:leveldb::log::Reader
error_if_exists	include/leveldb/options.h	/^  bool error_if_exists;$/;"	m	struct:leveldb::Options
fd_	util/env_posix.cc	/^  int fd_;$/;"	m	class:leveldb::__anon4::PosixFileLock	file:
fd_	util/env_posix.cc	/^  int fd_;$/;"	m	class:leveldb::__anon4::PosixRandomAccessFile	file:
fdatasync	port/port_posix.h	65;"	d
fdatasync	port/port_posix.h	71;"	d
fflush_unlocked	port/port_posix.h	59;"	d
file	db/table_cache.cc	/^  RandomAccessFile* file;$/;"	m	struct:leveldb::TableAndFile	file:
file	table/table.cc	/^  RandomAccessFile* file;$/;"	m	struct:leveldb::Table::Rep	file:
file	table/table_builder.cc	/^  WritableFile* file; \/\/ sst文件$/;"	m	struct:leveldb::TableBuilder::Rep	file:
file_	db/log_reader.h	/^  SequentialFile* const file_;$/;"	m	class:leveldb::log::Reader
file_	helpers/memenv/memenv.cc	/^  FileState* file_;$/;"	m	class:leveldb::__anon13::RandomAccessFileImpl	file:
file_	helpers/memenv/memenv.cc	/^  FileState* file_;$/;"	m	class:leveldb::__anon13::SequentialFileImpl	file:
file_	helpers/memenv/memenv.cc	/^  FileState* file_;$/;"	m	class:leveldb::__anon13::WritableFileImpl	file:
file_	util/env_posix.cc	/^  FILE* file_;$/;"	m	class:leveldb::__anon4::PosixSequentialFile	file:
file_	util/env_posix.cc	/^  FILE* file_;$/;"	m	class:leveldb::__anon4::PosixWritableFile	file:
file_	util/posix_logger.h	/^  FILE* file_;$/;"	m	class:leveldb::PosixLogger
file_map_	helpers/memenv/memenv.cc	/^  FileSystem file_map_;  \/\/ Protected by mutex_.$/;"	m	class:leveldb::__anon13::InMemoryEnv	file:
file_size	db/db_impl.cc	/^    uint64_t file_size; \/\/ sst表当前的大小$/;"	m	struct:leveldb::DBImpl::CompactionState::Output	file:
file_size	db/version_edit.h	/^  uint64_t file_size;         \/\/ File size in bytes, 文件大小$/;"	m	struct:leveldb::FileMetaData
file_to_compact_	db/version_set.h	/^  FileMetaData* file_to_compact_;$/;"	m	class:leveldb::Version
file_to_compact_level_	db/version_set.h	/^  int file_to_compact_level_;$/;"	m	class:leveldb::Version
filename_	util/env_posix.cc	/^  std::string filename_;$/;"	m	class:leveldb::__anon4::PosixMmapReadableFile	file:
filename_	util/env_posix.cc	/^  std::string filename_;$/;"	m	class:leveldb::__anon4::PosixRandomAccessFile	file:
filename_	util/env_posix.cc	/^  std::string filename_;$/;"	m	class:leveldb::__anon4::PosixSequentialFile	file:
filename_	util/env_posix.cc	/^  std::string filename_;$/;"	m	class:leveldb::__anon4::PosixWritableFile	file:
files_	db/version_set.h	/^  std::vector<FileMetaData*> files_[config::kNumLevels]; \/\/ sst的内存抽象$/;"	m	class:leveldb::Version
fill_cache	include/leveldb/options.h	/^  bool fill_cache;$/;"	m	struct:leveldb::ReadOptions
filter	table/table.cc	/^  FilterBlockReader* filter;$/;"	m	struct:leveldb::Table::Rep	file:
filter_block	table/table_builder.cc	/^  FilterBlockBuilder* filter_block; \/\/ 构造bloom filter的数据块$/;"	m	struct:leveldb::TableBuilder::Rep	file:
filter_data	table/table.cc	/^  const char* filter_data;$/;"	m	struct:leveldb::Table::Rep	file:
filter_offsets_	table/filter_block.h	/^  std::vector<uint32_t> filter_offsets_;$/;"	m	class:leveldb::FilterBlockBuilder
filter_policy	include/leveldb/options.h	/^  const FilterPolicy* filter_policy;$/;"	m	struct:leveldb::Options
filter_policy_	db/db_bench.cc	/^  const FilterPolicy* filter_policy_;$/;"	m	class:leveldb::Benchmark	file:
finish_	db/db_bench.cc	/^  double finish_;$/;"	m	class:leveldb::__anon21::Stats	file:
finished_	table/block_builder.h	/^  bool                  finished_;    \/\/ Has Finish() been called?$/;"	m	class:leveldb::BlockBuilder
flist_	db/version_set.cc	/^  const std::vector<FileMetaData*>* const flist_;$/;"	m	class:leveldb::Version::LevelFileNumIterator::std	file:
fread_unlocked	port/port_posix.h	57;"	d
function	include/leveldb/iterator.h	/^    CleanupFunction function;$/;"	m	struct:leveldb::Iterator::Cleanup
function	util/env_posix.cc	/^  struct BGItem { void* arg; void (*function)(void*); };$/;"	m	struct:leveldb::__anon4::PosixEnv::BGItem	file:
fwrite_unlocked	port/port_posix.h	58;"	d
gettid	util/env_posix.cc	/^  static uint64_t gettid() {$/;"	f	class:leveldb::__anon4::PosixEnv
gettid_	util/posix_logger.h	/^  uint64_t (*gettid_)();  \/\/ Return the thread id for the current thread$/;"	m	class:leveldb::PosixLogger
grandparent_index_	db/version_set.h	/^  size_t grandparent_index_;  \/\/ Index in grandparent_starts_$/;"	m	class:leveldb::Compaction
grandparents_	db/version_set.h	/^  std::vector<FileMetaData*> grandparents_;$/;"	m	class:leveldb::Compaction
has_comparator_	db/version_edit.h	/^  bool has_comparator_;$/;"	m	class:leveldb::VersionEdit
has_imm_	db/db_impl.h	/^  port::AtomicPointer has_imm_;  \/\/ So bg thread can detect non-NULL imm_$/;"	m	class:leveldb::DBImpl
has_last_sequence_	db/version_edit.h	/^  bool has_last_sequence_;$/;"	m	class:leveldb::VersionEdit
has_log_number_	db/version_edit.h	/^  bool has_log_number_;$/;"	m	class:leveldb::VersionEdit
has_next_file_number_	db/version_edit.h	/^  bool has_next_file_number_;$/;"	m	class:leveldb::VersionEdit
has_prev_log_number_	db/version_edit.h	/^  bool has_prev_log_number_;$/;"	m	class:leveldb::VersionEdit
hash	util/cache.cc	/^  uint32_t hash;      \/\/ 元素的hash值，Hash of key(); used for fast sharding and comparisons$/;"	m	struct:leveldb::__anon3::LRUHandle	file:
head_	db/skiplist.h	/^  Node* const head_;$/;"	m	class:leveldb::SkipList
heap_allocated	table/format.h	/^  bool heap_allocated;  \/\/ True iff caller should delete[] data.data()$/;"	m	struct:leveldb::BlockContents
heap_counter_	db/db_bench.cc	/^  int heap_counter_;$/;"	m	class:leveldb::Benchmark	file:
hist_	db/db_bench.cc	/^  Histogram hist_;$/;"	m	class:leveldb::__anon21::Stats	file:
icmp_	db/repair.cc	/^  InternalKeyComparator const icmp_;$/;"	m	class:leveldb::__anon22::Repairer	file:
icmp_	db/version_set.cc	/^  const InternalKeyComparator icmp_;$/;"	m	class:leveldb::Version::LevelFileNumIterator	file:
icmp_	db/version_set.h	/^  const InternalKeyComparator icmp_;$/;"	m	class:leveldb::VersionSet
id_mutex_	util/cache.cc	/^  port::Mutex id_mutex_;$/;"	m	class:leveldb::__anon3::ShardedLRUCache	file:
imm	db/db_impl.cc	/^  MemTable* imm;$/;"	m	struct:leveldb::__anon18::IterState	file:
imm_	db/db_impl.h	/^  MemTable* imm_;                \/\/ Memtable being compacted$/;"	m	class:leveldb::DBImpl
index_	db/version_set.cc	/^  uint32_t index_;$/;"	m	class:leveldb::Version::LevelFileNumIterator	file:
index_block	table/table.cc	/^  Block* index_block; \/\/ 索引块解析器$/;"	m	struct:leveldb::Table::Rep	file:
index_block	table/table_builder.cc	/^  BlockBuilder index_block; \/\/ 索引数据块的索引块$/;"	m	struct:leveldb::TableBuilder::Rep	file:
index_block_options	table/table_builder.cc	/^  Options index_block_options;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
index_handle	table/format.h	/^  const BlockHandle& index_handle() const {$/;"	f	class:leveldb::Footer
index_handle_	table/format.h	/^  BlockHandle index_handle_;$/;"	m	class:leveldb::Footer
index_iter_	table/two_level_iterator.cc	/^  IteratorWrapper index_iter_;$/;"	m	class:leveldb::__anon12::TwoLevelIterator	file:
info_log	include/leveldb/options.h	/^  Logger* info_log;$/;"	m	struct:leveldb::Options
initial_offset_	db/log_reader.h	/^  uint64_t const initial_offset_;$/;"	m	class:leveldb::log::Reader
input	db/version_set.h	/^  FileMetaData* input(int which, int i) const { return inputs_[which][i]; }$/;"	f	class:leveldb::Compaction
input_version_	db/version_set.h	/^  Version* input_version_;$/;"	m	class:leveldb::Compaction
inputs_	db/version_set.h	/^  std::vector<FileMetaData*> inputs_[2];      \/\/ The two sets of inputs$/;"	m	class:leveldb::Compaction
internal_comparator	db/version_set.cc	/^    const InternalKeyComparator* internal_comparator;$/;"	m	struct:leveldb::VersionSet::Builder::BySmallestKey	file:
internal_comparator_	db/db_impl.h	/^  const InternalKeyComparator internal_comparator_;$/;"	m	class:leveldb::DBImpl
internal_filter_policy_	db/db_impl.h	/^  const InternalFilterPolicy internal_filter_policy_;$/;"	m	class:leveldb::DBImpl
internal_key	db/dbformat.h	/^  Slice internal_key() const { return Slice(kstart_, end_ - kstart_); }$/;"	f	class:leveldb::LookupKey
ipolicy_	db/repair.cc	/^  InternalFilterPolicy const ipolicy_;$/;"	m	class:leveldb::__anon22::Repairer	file:
is_default	db/c.cc	/^  bool is_default;$/;"	m	struct:leveldb_env_t	file:
iter	table/iterator_wrapper.h	/^  Iterator* iter() const { return iter_; }$/;"	f	class:leveldb::IteratorWrapper
iter_	db/db_iter.cc	/^  Iterator* const iter_;$/;"	m	class:leveldb::__anon20::DBIter	file:
iter_	db/memtable.cc	/^  MemTable::Table::Iterator iter_;$/;"	m	class:leveldb::MemTableIterator	file:
iter_	table/iterator_wrapper.h	/^  Iterator* iter_; \/\/ 内部遍历器$/;"	m	class:leveldb::IteratorWrapper
kBadRecord	db/log_reader.h	/^    kBadRecord = kMaxRecordType + 2$/;"	e	enum:leveldb::log::Reader::__anon16
kBlockSize	db/log_format.h	/^static const int kBlockSize = 32768;$/;"	m	namespace:leveldb::log
kBlockSize	helpers/memenv/memenv.cc	/^  enum { kBlockSize = 8 * 1024 };$/;"	e	enum:leveldb::__anon13::FileState::__anon14	file:
kBlockSize	util/arena.cc	/^static const int kBlockSize = 4096;$/;"	m	namespace:leveldb	file:
kBlockTrailerSize	table/format.h	/^static const size_t kBlockTrailerSize = 5;$/;"	m	namespace:leveldb
kBucketLimit	util/histogram.cc	/^const double Histogram::kBucketLimit[kNumBuckets] = {$/;"	m	class:leveldb::Histogram	file:
kBucketLimit	util/histogram.h	/^  static const double kBucketLimit[kNumBuckets];$/;"	m	class:leveldb::Histogram
kCompactPointer	db/version_edit.cc	/^  kCompactPointer       = 5,$/;"	e	enum:leveldb::Tag	file:
kComparator	db/version_edit.cc	/^  kComparator           = 1,$/;"	e	enum:leveldb::Tag	file:
kCorrupt	db/version_set.cc	/^  kCorrupt,$/;"	e	enum:leveldb::__anon17::SaverState	file:
kCorruption	include/leveldb/status.h	/^    kCorruption = 2,$/;"	e	enum:leveldb::Status::Code
kCurrentFile	db/filename.h	/^  kCurrentFile,$/;"	e	enum:leveldb::FileType
kDBLockFile	db/filename.h	/^  kDBLockFile,$/;"	e	enum:leveldb::FileType
kDeleted	db/version_set.cc	/^  kDeleted,$/;"	e	enum:leveldb::__anon17::SaverState	file:
kDeletedFile	db/version_edit.cc	/^  kDeletedFile          = 6,$/;"	e	enum:leveldb::Tag	file:
kDescriptorFile	db/filename.h	/^  kDescriptorFile,$/;"	e	enum:leveldb::FileType
kEncodedLength	table/format.h	/^    kEncodedLength = 2*BlockHandle::kMaxEncodedLength + 8$/;"	e	enum:leveldb::Footer::__anon11
kEof	db/log_reader.h	/^    kEof = kMaxRecordType + 1,$/;"	e	enum:leveldb::log::Reader::__anon16
kExpandedCompactionByteSizeLimit	db/version_set.cc	/^static const int64_t kExpandedCompactionByteSizeLimit = 25 * kTargetFileSize;$/;"	m	namespace:leveldb	file:
kFilterBase	table/filter_block.cc	/^static const size_t kFilterBase = 1 << kFilterBaseLg;$/;"	m	namespace:leveldb	file:
kFilterBaseLg	table/filter_block.cc	/^static const size_t kFilterBaseLg = 11;$/;"	m	namespace:leveldb	file:
kFirstType	db/log_format.h	/^  kFirstType = 2,$/;"	e	enum:leveldb::log::RecordType
kForward	db/db_iter.cc	/^    kForward,$/;"	e	enum:leveldb::__anon20::DBIter::Direction	file:
kForward	table/merger.cc	/^    kForward,$/;"	e	enum:leveldb::__anon9::MergingIterator::Direction	file:
kFound	db/version_set.cc	/^  kFound,$/;"	e	enum:leveldb::__anon17::SaverState	file:
kFullType	db/log_format.h	/^  kFullType = 1,$/;"	e	enum:leveldb::log::RecordType
kHeader	db/write_batch.cc	/^static const size_t kHeader = 12;$/;"	m	namespace:leveldb	file:
kHeaderSize	db/log_format.h	/^static const int kHeaderSize = 4 + 2 + 1;$/;"	m	namespace:leveldb::log
kIOError	include/leveldb/status.h	/^    kIOError = 5$/;"	e	enum:leveldb::Status::Code
kInfoLogFile	db/filename.h	/^  kInfoLogFile  \/\/ Either the current one, or an old one$/;"	e	enum:leveldb::FileType
kInvalidArgument	include/leveldb/status.h	/^    kInvalidArgument = 4,$/;"	e	enum:leveldb::Status::Code
kL0_CompactionTrigger	db/dbformat.h	/^static const int kL0_CompactionTrigger = 4;$/;"	m	namespace:leveldb::config
kL0_SlowdownWritesTrigger	db/dbformat.h	/^static const int kL0_SlowdownWritesTrigger = 8;$/;"	m	namespace:leveldb::config
kL0_StopWritesTrigger	db/dbformat.h	/^static const int kL0_StopWritesTrigger = 12;$/;"	m	namespace:leveldb::config
kLastSequence	db/version_edit.cc	/^  kLastSequence         = 4,$/;"	e	enum:leveldb::Tag	file:
kLastType	db/log_format.h	/^  kLastType = 4$/;"	e	enum:leveldb::log::RecordType
kLittleEndian	port/port_example.h	/^static const bool kLittleEndian = true \/* or some other expression *\/;$/;"	m	namespace:leveldb::port
kLittleEndian	port/port_posix.h	/^static const bool kLittleEndian = PLATFORM_IS_LITTLE_ENDIAN;$/;"	m	namespace:leveldb::port
kLogFile	db/filename.h	/^  kLogFile,$/;"	e	enum:leveldb::FileType
kLogNumber	db/version_edit.cc	/^  kLogNumber            = 2,$/;"	e	enum:leveldb::Tag	file:
kMajorVersion	include/leveldb/db.h	/^static const int kMajorVersion = 1;$/;"	m	namespace:leveldb
kMaskDelta	util/crc32c.h	/^static const uint32_t kMaskDelta = 0xa282ead8ul;$/;"	m	namespace:leveldb::crc32c
kMaxEncodedLength	table/format.h	/^  enum { kMaxEncodedLength = 10 + 10 };$/;"	e	enum:leveldb::BlockHandle::__anon10
kMaxGrandParentOverlapBytes	db/version_set.cc	/^static const int64_t kMaxGrandParentOverlapBytes = 10 * kTargetFileSize;$/;"	m	namespace:leveldb	file:
kMaxHeight	db/skiplist.h	/^  enum { kMaxHeight = 12 }; \/\/ 跳表的最大高度默认是12$/;"	e	enum:leveldb::SkipList::__anon15
kMaxKey	db/bigtable.h	50;"	d
kMaxKeyStr	db/bigtable.h	/^  std::string kMaxKeyStr;$/;"	m	class:leveldb::BigTable
kMaxMemCompactLevel	db/dbformat.h	/^static const int kMaxMemCompactLevel = 2;$/;"	m	namespace:leveldb::config
kMaxRecordType	db/log_format.h	/^static const int kMaxRecordType = kLastType;$/;"	m	namespace:leveldb::log
kMaxSequenceNumber	db/dbformat.h	/^static const SequenceNumber kMaxSequenceNumber =$/;"	m	namespace:leveldb
kMiddleType	db/log_format.h	/^  kMiddleType = 3,$/;"	e	enum:leveldb::log::RecordType
kMinorVersion	include/leveldb/db.h	/^static const int kMinorVersion = 18;$/;"	m	namespace:leveldb
kNewFile	db/version_edit.cc	/^  kNewFile              = 7,$/;"	e	enum:leveldb::Tag	file:
kNextFileNumber	db/version_edit.cc	/^  kNextFileNumber       = 3,$/;"	e	enum:leveldb::Tag	file:
kNoCompression	include/leveldb/options.h	/^  kNoCompression     = 0x0,$/;"	e	enum:leveldb::CompressionType
kNotFound	db/version_set.cc	/^  kNotFound,$/;"	e	enum:leveldb::__anon17::SaverState	file:
kNotFound	include/leveldb/status.h	/^    kNotFound = 1,$/;"	e	enum:leveldb::Status::Code
kNotSupported	include/leveldb/status.h	/^    kNotSupported = 3,$/;"	e	enum:leveldb::Status::Code
kNumBuckets	util/histogram.h	/^  enum { kNumBuckets = 154 };$/;"	e	enum:leveldb::Histogram::__anon6
kNumLevels	db/dbformat.h	/^static const int kNumLevels = 7;$/;"	m	namespace:leveldb::config
kNumNonTableCacheFiles	db/db_impl.cc	/^const int kNumNonTableCacheFiles = 10;$/;"	m	namespace:leveldb	file:
kNumShardBits	util/cache.cc	/^static const int kNumShardBits = 4;$/;"	m	namespace:leveldb::__anon3	file:
kNumShards	util/cache.cc	/^static const int kNumShards = 1 << kNumShardBits;$/;"	m	namespace:leveldb::__anon3	file:
kOk	include/leveldb/status.h	/^    kOk = 0,$/;"	e	enum:leveldb::Status::Code
kPrevLogNumber	db/version_edit.cc	/^  kPrevLogNumber        = 9$/;"	e	enum:leveldb::Tag	file:
kReadBytesPeriod	db/dbformat.h	/^static const int kReadBytesPeriod = 1048576;$/;"	m	namespace:leveldb::config
kReverse	db/db_iter.cc	/^    kReverse$/;"	e	enum:leveldb::__anon20::DBIter::Direction	file:
kReverse	table/merger.cc	/^    kReverse$/;"	e	enum:leveldb::__anon9::MergingIterator::Direction	file:
kSnappyCompression	include/leveldb/options.h	/^  kSnappyCompression = 0x1$/;"	e	enum:leveldb::CompressionType
kTableFile	db/filename.h	/^  kTableFile,$/;"	e	enum:leveldb::FileType
kTableMagicNumber	table/format.h	/^static const uint64_t kTableMagicNumber = 0xdb4775248b80fb57ull;$/;"	m	namespace:leveldb
kTargetFileSize	db/version_set.cc	/^static const int kTargetFileSize = 2 * 1048576;$/;"	m	namespace:leveldb	file:
kTempFile	db/filename.h	/^  kTempFile,$/;"	e	enum:leveldb::FileType
kTypeDeletion	db/dbformat.h	/^  kTypeDeletion = 0x0,$/;"	e	enum:leveldb::ValueType
kTypeValue	db/dbformat.h	/^  kTypeValue = 0x1$/;"	e	enum:leveldb::ValueType
kValueTypeForSeek	db/dbformat.h	/^static const ValueType kValueTypeForSeek = kTypeValue;$/;"	m	namespace:leveldb
kZeroType	db/log_format.h	/^  kZeroType = 0,$/;"	e	enum:leveldb::log::RecordType
k_	util/bloom.cc	/^  size_t k_;$/;"	m	class:leveldb::__anon2::BloomFilterPolicy	file:
key	db/db_iter.cc	/^  virtual Slice key() const {$/;"	f	class:leveldb::__anon20::DBIter
key	db/memtable.cc	/^  virtual Slice key() const { return GetLengthPrefixedSlice(iter_.key()); }$/;"	f	class:leveldb::MemTableIterator
key	db/skiplist.h	/^  Key const key;\/\/ 条表节点的key$/;"	m	struct:leveldb::SkipList::Node
key	db/skiplist.h	/^inline const Key& SkipList<Key,Comparator>::Iterator::key() const {$/;"	f	class:leveldb::SkipList::Iterator
key	db/version_set.cc	/^  Slice key() const {$/;"	f	class:leveldb::Version::LevelFileNumIterator
key	table/block.cc	/^  virtual Slice key() const {$/;"	f	class:leveldb::Block::Iter
key	table/iterator.cc	/^  Slice key() const { assert(false); return Slice(); }$/;"	f	class:leveldb::__anon8::EmptyIterator
key	table/iterator_wrapper.h	/^  Slice key() const         { assert(Valid()); return key_; }$/;"	f	class:leveldb::IteratorWrapper
key	table/merger.cc	/^  virtual Slice key() const {$/;"	f	class:leveldb::__anon9::MergingIterator
key	table/two_level_iterator.cc	/^  virtual Slice key() const {$/;"	f	class:leveldb::__anon12::TwoLevelIterator
key	util/cache.cc	/^  Slice key() const {$/;"	f	struct:leveldb::__anon3::LRUHandle
key_	table/block.cc	/^  std::string key_; \/\/ 用户key$/;"	m	class:leveldb::Block::Iter	file:
key_	table/iterator_wrapper.h	/^  Slice key_; \/\/ 流对应的key$/;"	m	class:leveldb::IteratorWrapper
key_data	util/cache.cc	/^  char key_data[1];   \/\/ 元数的key，Beginning of key, key的空间可变，使用key_length方能知道entry项的大小$/;"	m	struct:leveldb::__anon3::LRUHandle	file:
key_length	util/cache.cc	/^  size_t key_length; \/\/ 记录的key的长度$/;"	m	struct:leveldb::__anon3::LRUHandle	file:
key_match_	db/c.cc	/^  unsigned char (*key_match_)($/;"	m	struct:leveldb_filterpolicy_t	file:
keys_	table/filter_block.h	/^  std::string keys_;              \/\/ Flattened key contents$/;"	m	class:leveldb::FilterBlockBuilder
kstart_	db/dbformat.h	/^  const char* kstart_;$/;"	m	class:leveldb::LookupKey
largest	db/db_impl.cc	/^    InternalKey smallest, largest;\/\/ sst表当前的最大最小值$/;"	m	struct:leveldb::DBImpl::CompactionState::Output	file:
largest	db/version_edit.h	/^  InternalKey largest;        \/\/ Largest internal key served by table， key的最小值$/;"	m	struct:leveldb::FileMetaData
last_id_	util/cache.cc	/^  uint64_t last_id_;$/;"	m	class:leveldb::__anon3::ShardedLRUCache	file:
last_key	table/table_builder.cc	/^  std::string last_key; \/\/ 数据块的最后一个key$/;"	m	struct:leveldb::TableBuilder::Rep	file:
last_key_	table/block_builder.h	/^  std::string           last_key_;$/;"	m	class:leveldb::BlockBuilder
last_op_finish_	db/db_bench.cc	/^  double last_op_finish_;$/;"	m	class:leveldb::__anon21::Stats	file:
last_record_offset_	db/log_reader.h	/^  uint64_t last_record_offset_;$/;"	m	class:leveldb::log::Reader
last_sequence_	db/version_edit.h	/^  SequenceNumber last_sequence_;$/;"	m	class:leveldb::VersionEdit
last_sequence_	db/version_set.h	/^  uint64_t last_sequence_; \/\/ 用于写的序列号$/;"	m	class:leveldb::VersionSet
length_	util/cache.cc	/^  uint32_t length_; \/\/ hash表头长度大小$/;"	m	class:leveldb::__anon3::HandleTable	file:
length_	util/env_posix.cc	/^  size_t length_;$/;"	m	class:leveldb::__anon4::PosixMmapReadableFile	file:
level	db/db_impl.h	/^    int level;$/;"	m	struct:leveldb::DBImpl::ManualCompaction
level	db/version_set.h	/^  int level() const { return level_; }$/;"	f	class:leveldb::Compaction
level_	db/version_set.h	/^  int level_;$/;"	m	class:leveldb::Compaction
level_ptrs_	db/version_set.h	/^  size_t level_ptrs_[config::kNumLevels];$/;"	m	class:leveldb::Compaction
leveldb	db/bigtable.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/bigtable.h	/^namespace leveldb {$/;"	n
leveldb	db/builder.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/builder.h	/^namespace leveldb {$/;"	n
leveldb	db/db_bench.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/db_impl.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/db_impl.h	/^namespace leveldb {$/;"	n
leveldb	db/db_iter.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/db_iter.h	/^namespace leveldb {$/;"	n
leveldb	db/dbformat.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/dbformat.h	/^namespace leveldb {$/;"	n
leveldb	db/dumpfile.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/filename.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/filename.h	/^namespace leveldb {$/;"	n
leveldb	db/leveldb_main.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/log_format.h	/^namespace leveldb {$/;"	n
leveldb	db/log_reader.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/log_reader.h	/^namespace leveldb {$/;"	n
leveldb	db/log_writer.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/log_writer.h	/^namespace leveldb {$/;"	n
leveldb	db/memtable.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/memtable.h	/^namespace leveldb {$/;"	n
leveldb	db/repair.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/skiplist.h	/^namespace leveldb {$/;"	n
leveldb	db/snapshot.h	/^namespace leveldb {$/;"	n
leveldb	db/table_cache.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/table_cache.h	/^namespace leveldb {$/;"	n
leveldb	db/version_edit.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/version_edit.h	/^namespace leveldb {$/;"	n
leveldb	db/version_set.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/version_set.h	/^namespace leveldb {$/;"	n
leveldb	db/write_batch.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/write_batch_internal.h	/^namespace leveldb {$/;"	n
leveldb	helpers/memenv/memenv.cc	/^namespace leveldb {$/;"	n	file:
leveldb	helpers/memenv/memenv.h	/^namespace leveldb {$/;"	n
leveldb	include/leveldb/cache.h	/^namespace leveldb {$/;"	n
leveldb	include/leveldb/comparator.h	/^namespace leveldb {$/;"	n
leveldb	include/leveldb/db.h	/^namespace leveldb {$/;"	n
leveldb	include/leveldb/dumpfile.h	/^namespace leveldb {$/;"	n
leveldb	include/leveldb/env.h	/^namespace leveldb {$/;"	n
leveldb	include/leveldb/filter_policy.h	/^namespace leveldb {$/;"	n
leveldb	include/leveldb/iterator.h	/^namespace leveldb {$/;"	n
leveldb	include/leveldb/options.h	/^namespace leveldb {$/;"	n
leveldb	include/leveldb/slice.h	/^namespace leveldb {$/;"	n
leveldb	include/leveldb/status.h	/^namespace leveldb {$/;"	n
leveldb	include/leveldb/table.h	/^namespace leveldb {$/;"	n
leveldb	include/leveldb/table_builder.h	/^namespace leveldb {$/;"	n
leveldb	include/leveldb/write_batch.h	/^namespace leveldb {$/;"	n
leveldb	port/atomic_pointer.h	/^namespace leveldb {$/;"	n
leveldb	port/port_example.h	/^namespace leveldb {$/;"	n
leveldb	port/port_posix.cc	/^namespace leveldb {$/;"	n	file:
leveldb	port/port_posix.h	/^namespace leveldb {$/;"	n
leveldb	table/block.cc	/^namespace leveldb {$/;"	n	file:
leveldb	table/block.h	/^namespace leveldb {$/;"	n
leveldb	table/block_builder.cc	/^namespace leveldb {$/;"	n	file:
leveldb	table/block_builder.h	/^namespace leveldb {$/;"	n
leveldb	table/filter_block.cc	/^namespace leveldb {$/;"	n	file:
leveldb	table/filter_block.h	/^namespace leveldb {$/;"	n
leveldb	table/format.cc	/^namespace leveldb {$/;"	n	file:
leveldb	table/format.h	/^namespace leveldb {$/;"	n
leveldb	table/iterator.cc	/^namespace leveldb {$/;"	n	file:
leveldb	table/iterator_wrapper.h	/^namespace leveldb {$/;"	n
leveldb	table/merger.cc	/^namespace leveldb {$/;"	n	file:
leveldb	table/merger.h	/^namespace leveldb {$/;"	n
leveldb	table/table.cc	/^namespace leveldb {$/;"	n	file:
leveldb	table/table_builder.cc	/^namespace leveldb {$/;"	n	file:
leveldb	table/two_level_iterator.cc	/^namespace leveldb {$/;"	n	file:
leveldb	table/two_level_iterator.h	/^namespace leveldb {$/;"	n
leveldb	util/arena.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/arena.h	/^namespace leveldb {$/;"	n
leveldb	util/bloom.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/cache.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/coding.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/coding.h	/^namespace leveldb {$/;"	n
leveldb	util/comparator.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/crc32c.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/crc32c.h	/^namespace leveldb {$/;"	n
leveldb	util/env.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/env_posix.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/filter_policy.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/hash.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/hash.h	/^namespace leveldb {$/;"	n
leveldb	util/histogram.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/histogram.h	/^namespace leveldb {$/;"	n
leveldb	util/logging.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/logging.h	/^namespace leveldb {$/;"	n
leveldb	util/mutexlock.h	/^namespace leveldb {$/;"	n
leveldb	util/options.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/posix_logger.h	/^namespace leveldb {$/;"	n
leveldb	util/random.h	/^namespace leveldb {$/;"	n
leveldb	util/status.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/testutil.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/testutil.h	/^namespace leveldb {$/;"	n
leveldb_approximate_sizes	db/c.cc	/^void leveldb_approximate_sizes($/;"	f
leveldb_cache_create_lru	db/c.cc	/^leveldb_cache_t* leveldb_cache_create_lru(size_t capacity) {$/;"	f
leveldb_cache_destroy	db/c.cc	/^void leveldb_cache_destroy(leveldb_cache_t* cache) {$/;"	f
leveldb_cache_t	db/c.cc	/^struct leveldb_cache_t        { Cache*            rep; };$/;"	s	file:
leveldb_cache_t	include/leveldb/c.h	/^typedef struct leveldb_cache_t         leveldb_cache_t;$/;"	t	typeref:struct:leveldb_cache_t
leveldb_close	db/c.cc	/^void leveldb_close(leveldb_t* db) {$/;"	f
leveldb_compact_range	db/c.cc	/^void leveldb_compact_range($/;"	f
leveldb_comparator_create	db/c.cc	/^leveldb_comparator_t* leveldb_comparator_create($/;"	f
leveldb_comparator_destroy	db/c.cc	/^void leveldb_comparator_destroy(leveldb_comparator_t* cmp) {$/;"	f
leveldb_comparator_t	db/c.cc	/^struct leveldb_comparator_t : public Comparator {$/;"	s	file:
leveldb_comparator_t	include/leveldb/c.h	/^typedef struct leveldb_comparator_t    leveldb_comparator_t;$/;"	t	typeref:struct:leveldb_comparator_t
leveldb_create_default_env	db/c.cc	/^leveldb_env_t* leveldb_create_default_env() {$/;"	f
leveldb_create_iterator	db/c.cc	/^leveldb_iterator_t* leveldb_create_iterator($/;"	f
leveldb_create_snapshot	db/c.cc	/^const leveldb_snapshot_t* leveldb_create_snapshot($/;"	f
leveldb_delete	db/c.cc	/^void leveldb_delete($/;"	f
leveldb_destroy_db	db/c.cc	/^void leveldb_destroy_db($/;"	f
leveldb_env_destroy	db/c.cc	/^void leveldb_env_destroy(leveldb_env_t* env) {$/;"	f
leveldb_env_t	db/c.cc	/^struct leveldb_env_t {$/;"	s	file:
leveldb_env_t	include/leveldb/c.h	/^typedef struct leveldb_env_t           leveldb_env_t;$/;"	t	typeref:struct:leveldb_env_t
leveldb_filelock_t	db/c.cc	/^struct leveldb_filelock_t     { FileLock*         rep; };$/;"	s	file:
leveldb_filelock_t	include/leveldb/c.h	/^typedef struct leveldb_filelock_t      leveldb_filelock_t;$/;"	t	typeref:struct:leveldb_filelock_t
leveldb_filterpolicy_create	db/c.cc	/^leveldb_filterpolicy_t* leveldb_filterpolicy_create($/;"	f
leveldb_filterpolicy_create_bloom	db/c.cc	/^leveldb_filterpolicy_t* leveldb_filterpolicy_create_bloom(int bits_per_key) {$/;"	f
leveldb_filterpolicy_destroy	db/c.cc	/^void leveldb_filterpolicy_destroy(leveldb_filterpolicy_t* filter) {$/;"	f
leveldb_filterpolicy_t	db/c.cc	/^struct leveldb_filterpolicy_t : public FilterPolicy {$/;"	s	file:
leveldb_filterpolicy_t	include/leveldb/c.h	/^typedef struct leveldb_filterpolicy_t  leveldb_filterpolicy_t;$/;"	t	typeref:struct:leveldb_filterpolicy_t
leveldb_free	db/c.cc	/^void leveldb_free(void* ptr) {$/;"	f
leveldb_get	db/c.cc	/^char* leveldb_get($/;"	f
leveldb_iter_destroy	db/c.cc	/^void leveldb_iter_destroy(leveldb_iterator_t* iter) {$/;"	f
leveldb_iter_get_error	db/c.cc	/^void leveldb_iter_get_error(const leveldb_iterator_t* iter, char** errptr) {$/;"	f
leveldb_iter_key	db/c.cc	/^const char* leveldb_iter_key(const leveldb_iterator_t* iter, size_t* klen) {$/;"	f
leveldb_iter_next	db/c.cc	/^void leveldb_iter_next(leveldb_iterator_t* iter) {$/;"	f
leveldb_iter_prev	db/c.cc	/^void leveldb_iter_prev(leveldb_iterator_t* iter) {$/;"	f
leveldb_iter_seek	db/c.cc	/^void leveldb_iter_seek(leveldb_iterator_t* iter, const char* k, size_t klen) {$/;"	f
leveldb_iter_seek_to_first	db/c.cc	/^void leveldb_iter_seek_to_first(leveldb_iterator_t* iter) {$/;"	f
leveldb_iter_seek_to_last	db/c.cc	/^void leveldb_iter_seek_to_last(leveldb_iterator_t* iter) {$/;"	f
leveldb_iter_valid	db/c.cc	/^unsigned char leveldb_iter_valid(const leveldb_iterator_t* iter) {$/;"	f
leveldb_iter_value	db/c.cc	/^const char* leveldb_iter_value(const leveldb_iterator_t* iter, size_t* vlen) {$/;"	f
leveldb_iterator_t	db/c.cc	/^struct leveldb_iterator_t     { Iterator*         rep; };$/;"	s	file:
leveldb_iterator_t	include/leveldb/c.h	/^typedef struct leveldb_iterator_t      leveldb_iterator_t;$/;"	t	typeref:struct:leveldb_iterator_t
leveldb_logger_t	db/c.cc	/^struct leveldb_logger_t       { Logger*           rep; };$/;"	s	file:
leveldb_logger_t	include/leveldb/c.h	/^typedef struct leveldb_logger_t        leveldb_logger_t;$/;"	t	typeref:struct:leveldb_logger_t
leveldb_major_version	db/c.cc	/^int leveldb_major_version() {$/;"	f
leveldb_minor_version	db/c.cc	/^int leveldb_minor_version() {$/;"	f
leveldb_no_compression	include/leveldb/c.h	/^  leveldb_no_compression = 0,$/;"	e	enum:__anon1
leveldb_open	db/c.cc	/^leveldb_t* leveldb_open($/;"	f
leveldb_options_create	db/c.cc	/^leveldb_options_t* leveldb_options_create() {$/;"	f
leveldb_options_destroy	db/c.cc	/^void leveldb_options_destroy(leveldb_options_t* options) {$/;"	f
leveldb_options_set_block_restart_interval	db/c.cc	/^void leveldb_options_set_block_restart_interval(leveldb_options_t* opt, int n) {$/;"	f
leveldb_options_set_block_size	db/c.cc	/^void leveldb_options_set_block_size(leveldb_options_t* opt, size_t s) {$/;"	f
leveldb_options_set_cache	db/c.cc	/^void leveldb_options_set_cache(leveldb_options_t* opt, leveldb_cache_t* c) {$/;"	f
leveldb_options_set_comparator	db/c.cc	/^void leveldb_options_set_comparator($/;"	f
leveldb_options_set_compression	db/c.cc	/^void leveldb_options_set_compression(leveldb_options_t* opt, int t) {$/;"	f
leveldb_options_set_create_if_missing	db/c.cc	/^void leveldb_options_set_create_if_missing($/;"	f
leveldb_options_set_env	db/c.cc	/^void leveldb_options_set_env(leveldb_options_t* opt, leveldb_env_t* env) {$/;"	f
leveldb_options_set_error_if_exists	db/c.cc	/^void leveldb_options_set_error_if_exists($/;"	f
leveldb_options_set_filter_policy	db/c.cc	/^void leveldb_options_set_filter_policy($/;"	f
leveldb_options_set_info_log	db/c.cc	/^void leveldb_options_set_info_log(leveldb_options_t* opt, leveldb_logger_t* l) {$/;"	f
leveldb_options_set_max_open_files	db/c.cc	/^void leveldb_options_set_max_open_files(leveldb_options_t* opt, int n) {$/;"	f
leveldb_options_set_paranoid_checks	db/c.cc	/^void leveldb_options_set_paranoid_checks($/;"	f
leveldb_options_set_write_buffer_size	db/c.cc	/^void leveldb_options_set_write_buffer_size(leveldb_options_t* opt, size_t s) {$/;"	f
leveldb_options_t	db/c.cc	/^struct leveldb_options_t      { Options           rep; };$/;"	s	file:
leveldb_options_t	include/leveldb/c.h	/^typedef struct leveldb_options_t       leveldb_options_t;$/;"	t	typeref:struct:leveldb_options_t
leveldb_property_value	db/c.cc	/^char* leveldb_property_value($/;"	f
leveldb_put	db/c.cc	/^void leveldb_put($/;"	f
leveldb_randomfile_t	db/c.cc	/^struct leveldb_randomfile_t   { RandomAccessFile* rep; };$/;"	s	file:
leveldb_randomfile_t	include/leveldb/c.h	/^typedef struct leveldb_randomfile_t    leveldb_randomfile_t;$/;"	t	typeref:struct:leveldb_randomfile_t
leveldb_readoptions_create	db/c.cc	/^leveldb_readoptions_t* leveldb_readoptions_create() {$/;"	f
leveldb_readoptions_destroy	db/c.cc	/^void leveldb_readoptions_destroy(leveldb_readoptions_t* opt) {$/;"	f
leveldb_readoptions_set_fill_cache	db/c.cc	/^void leveldb_readoptions_set_fill_cache($/;"	f
leveldb_readoptions_set_snapshot	db/c.cc	/^void leveldb_readoptions_set_snapshot($/;"	f
leveldb_readoptions_set_verify_checksums	db/c.cc	/^void leveldb_readoptions_set_verify_checksums($/;"	f
leveldb_readoptions_t	db/c.cc	/^struct leveldb_readoptions_t  { ReadOptions       rep; };$/;"	s	file:
leveldb_readoptions_t	include/leveldb/c.h	/^typedef struct leveldb_readoptions_t   leveldb_readoptions_t;$/;"	t	typeref:struct:leveldb_readoptions_t
leveldb_release_snapshot	db/c.cc	/^void leveldb_release_snapshot($/;"	f
leveldb_repair_db	db/c.cc	/^void leveldb_repair_db($/;"	f
leveldb_seqfile_t	db/c.cc	/^struct leveldb_seqfile_t      { SequentialFile*   rep; };$/;"	s	file:
leveldb_seqfile_t	include/leveldb/c.h	/^typedef struct leveldb_seqfile_t       leveldb_seqfile_t;$/;"	t	typeref:struct:leveldb_seqfile_t
leveldb_snappy_compression	include/leveldb/c.h	/^  leveldb_snappy_compression = 1$/;"	e	enum:__anon1
leveldb_snapshot_t	db/c.cc	/^struct leveldb_snapshot_t     { const Snapshot*   rep; };$/;"	s	file:
leveldb_snapshot_t	include/leveldb/c.h	/^typedef struct leveldb_snapshot_t      leveldb_snapshot_t;$/;"	t	typeref:struct:leveldb_snapshot_t
leveldb_t	db/c.cc	/^struct leveldb_t              { DB*               rep; };$/;"	s	file:
leveldb_t	include/leveldb/c.h	/^typedef struct leveldb_t               leveldb_t;$/;"	t	typeref:struct:leveldb_t
leveldb_writablefile_t	db/c.cc	/^struct leveldb_writablefile_t { WritableFile*     rep; };$/;"	s	file:
leveldb_writablefile_t	include/leveldb/c.h	/^typedef struct leveldb_writablefile_t  leveldb_writablefile_t;$/;"	t	typeref:struct:leveldb_writablefile_t
leveldb_write	db/c.cc	/^void leveldb_write($/;"	f
leveldb_writebatch_clear	db/c.cc	/^void leveldb_writebatch_clear(leveldb_writebatch_t* b) {$/;"	f
leveldb_writebatch_create	db/c.cc	/^leveldb_writebatch_t* leveldb_writebatch_create() {$/;"	f
leveldb_writebatch_delete	db/c.cc	/^void leveldb_writebatch_delete($/;"	f
leveldb_writebatch_destroy	db/c.cc	/^void leveldb_writebatch_destroy(leveldb_writebatch_t* b) {$/;"	f
leveldb_writebatch_iterate	db/c.cc	/^void leveldb_writebatch_iterate($/;"	f
leveldb_writebatch_put	db/c.cc	/^void leveldb_writebatch_put($/;"	f
leveldb_writebatch_t	db/c.cc	/^struct leveldb_writebatch_t   { WriteBatch        rep; };$/;"	s	file:
leveldb_writebatch_t	include/leveldb/c.h	/^typedef struct leveldb_writebatch_t    leveldb_writebatch_t;$/;"	t	typeref:struct:leveldb_writebatch_t
leveldb_writeoptions_create	db/c.cc	/^leveldb_writeoptions_t* leveldb_writeoptions_create() {$/;"	f
leveldb_writeoptions_destroy	db/c.cc	/^void leveldb_writeoptions_destroy(leveldb_writeoptions_t* opt) {$/;"	f
leveldb_writeoptions_set_sync	db/c.cc	/^void leveldb_writeoptions_set_sync($/;"	f
leveldb_writeoptions_t	db/c.cc	/^struct leveldb_writeoptions_t { WriteOptions      rep; };$/;"	s	file:
leveldb_writeoptions_t	include/leveldb/c.h	/^typedef struct leveldb_writeoptions_t  leveldb_writeoptions_t;$/;"	t	typeref:struct:leveldb_writeoptions_t
levels_	db/version_set.cc	/^  LevelState levels_[config::kNumLevels];\/\/ 记录每一层的插入和删除文件$/;"	m	class:leveldb::VersionSet::Builder	file:
limit	include/leveldb/db.h	/^  Slice limit;          \/\/ Not included in the range$/;"	m	struct:leveldb::Range
limiter_	util/env_posix.cc	/^  MmapLimiter* limiter_;$/;"	m	class:leveldb::__anon4::PosixMmapReadableFile	file:
list_	db/skiplist.h	/^    const SkipList* list_;$/;"	m	class:leveldb::SkipList::Iterator
list_	db/snapshot.h	/^  SnapshotImpl list_;$/;"	m	class:leveldb::SnapshotList
list_	db/snapshot.h	/^  SnapshotList* list_;                 \/\/ just for sanity checks$/;"	m	class:leveldb::SnapshotImpl
list_	util/cache.cc	/^  LRUHandle** list_; \/\/ hash表头指针数组,之所以使用单向链表，为了在同一大小的hash表中，能索引更多的元素$/;"	m	class:leveldb::__anon3::HandleTable	file:
lock	db/bigtable.h	/^  port::Mutex lock; \/\/ protect tabletQueue;$/;"	m	class:leveldb::BigTable
locked_files_	util/env_posix.cc	/^  std::set<std::string> locked_files_;$/;"	m	class:leveldb::__anon4::PosixLockTable	file:
locks_	util/env_posix.cc	/^  PosixLockTable locks_;$/;"	m	class:leveldb::__anon4::PosixEnv	file:
log	db/log_format.h	/^namespace log {$/;"	n	namespace:leveldb
log	db/log_reader.cc	/^namespace log {$/;"	n	namespace:leveldb	file:
log	db/log_reader.h	/^namespace log {$/;"	n	namespace:leveldb
log	db/log_writer.cc	/^namespace log {$/;"	n	namespace:leveldb	file:
log	db/log_writer.h	/^namespace log {$/;"	n	namespace:leveldb
log	db/version_set.h	/^namespace log { class Writer; }$/;"	n	namespace:leveldb
log_	db/db_impl.h	/^  log::Writer* log_;$/;"	m	class:leveldb::DBImpl
log_number_	db/version_edit.h	/^  uint64_t log_number_;$/;"	m	class:leveldb::VersionEdit
log_number_	db/version_set.h	/^  uint64_t log_number_;$/;"	m	class:leveldb::VersionSet
logfile_	db/db_impl.h	/^  WritableFile* logfile_;$/;"	m	class:leveldb::DBImpl
logfile_number_	db/db_impl.h	/^  uint64_t logfile_number_;$/;"	m	class:leveldb::DBImpl
logs_	db/repair.cc	/^  std::vector<uint64_t> logs_;$/;"	m	class:leveldb::__anon22::Repairer	file:
lru_	util/cache.cc	/^  LRUHandle lru_; \/\/ lru链表头$/;"	m	class:leveldb::__anon3::LRUCache	file:
main	db/db_bench.cc	/^int main(int argc, char** argv) {$/;"	f
main	db/leveldb_main.cc	/^int main(int argc, char** argv) {$/;"	f
manifest_file_number_	db/version_set.h	/^  uint64_t manifest_file_number_;$/;"	m	class:leveldb::VersionSet
manifests_	db/repair.cc	/^  std::vector<std::string> manifests_;$/;"	m	class:leveldb::__anon22::Repairer	file:
manual_compaction_	db/db_impl.h	/^  ManualCompaction* manual_compaction_;$/;"	m	class:leveldb::DBImpl
max_	util/histogram.h	/^  double max_;$/;"	m	class:leveldb::Histogram
max_height_	db/skiplist.h	/^  port::AtomicPointer max_height_;   \/\/ Height of the entire list$/;"	m	class:leveldb::SkipList
max_open_files	include/leveldb/options.h	/^  int max_open_files;$/;"	m	struct:leveldb::Options
max_output_file_size_	db/version_set.h	/^  uint64_t max_output_file_size_;$/;"	m	class:leveldb::Compaction
max_sequence	db/repair.cc	/^    SequenceNumber max_sequence;$/;"	m	struct:leveldb::__anon22::Repairer::TableInfo	file:
maxkey	db/bigtable.h	/^  std::string maxkey; \/\/ max key in this tablet, value in metaTablet$/;"	m	struct:leveldb::Tablet
mem	db/db_impl.cc	/^  MemTable* mem;$/;"	m	struct:leveldb::__anon18::IterState	file:
mem_	db/db_impl.h	/^  MemTable* mem_;$/;"	m	class:leveldb::DBImpl
mem_	db/write_batch.cc	/^  MemTable* mem_;$/;"	m	class:leveldb::__anon23::MemTableInserter	file:
memtable_key	db/dbformat.h	/^  Slice memtable_key() const { return Slice(start_, end_ - start_); }$/;"	f	class:leveldb::LookupKey
message_	db/db_bench.cc	/^  std::string message_;$/;"	m	class:leveldb::__anon21::Stats	file:
meta	db/repair.cc	/^    FileMetaData meta;$/;"	m	struct:leveldb::__anon22::Repairer::TableInfo	file:
meta_tablet	db/bigtable.h	/^  DB *meta_tablet;$/;"	m	class:leveldb::BigTable
metaindex_handle	table/format.h	/^  const BlockHandle& metaindex_handle() const { return metaindex_handle_; }$/;"	f	class:leveldb::Footer
metaindex_handle	table/table.cc	/^  BlockHandle metaindex_handle;  \/\/ Handle to metaindex_block: saved from footer$/;"	m	struct:leveldb::Table::Rep	file:
metaindex_handle_	table/format.h	/^  BlockHandle metaindex_handle_;$/;"	m	class:leveldb::Footer
method	db/db_bench.cc	/^    void (Benchmark::*method)(ThreadState*);$/;"	m	struct:leveldb::Benchmark::ThreadArg	file:
micros	db/db_impl.h	/^    int64_t micros;$/;"	m	struct:leveldb::DBImpl::CompactionStats
min_	util/histogram.h	/^  double min_;$/;"	m	class:leveldb::Histogram
mmap_limit_	util/env_posix.cc	/^  MmapLimiter mmap_limit_;$/;"	m	class:leveldb::__anon4::PosixEnv	file:
mmapped_region_	util/env_posix.cc	/^  void* mmapped_region_;$/;"	m	class:leveldb::__anon4::PosixMmapReadableFile	file:
mu	db/db_bench.cc	/^  port::Mutex mu;$/;"	m	struct:leveldb::__anon21::SharedState	file:
mu	db/db_impl.cc	/^  port::Mutex* mu;$/;"	m	struct:leveldb::__anon18::IterState	file:
mu_	port/port_posix.h	/^  Mutex* mu_;$/;"	m	class:leveldb::port::CondVar
mu_	port/port_posix.h	/^  pthread_mutex_t mu_; \/\/ posix的互斥锁$/;"	m	class:leveldb::port::Mutex
mu_	util/env_posix.cc	/^  port::Mutex mu_;$/;"	m	class:leveldb::__anon4::MmapLimiter	file:
mu_	util/env_posix.cc	/^  port::Mutex mu_;$/;"	m	class:leveldb::__anon4::PosixLockTable	file:
mu_	util/env_posix.cc	/^  pthread_mutex_t mu_;$/;"	m	class:leveldb::__anon4::PosixEnv	file:
mu_	util/mutexlock.h	/^  port::Mutex *const mu_;$/;"	m	class:leveldb::MutexLock::port
mutex_	db/db_impl.h	/^  port::Mutex mutex_;$/;"	m	class:leveldb::DBImpl
mutex_	helpers/memenv/memenv.cc	/^  port::Mutex mutex_;$/;"	m	class:leveldb::__anon13::InMemoryEnv	file:
mutex_	util/cache.cc	/^  port::Mutex mutex_; \/\/ 对象包含锁$/;"	m	class:leveldb::__anon3::LRUCache	file:
n_	table/merger.cc	/^  int n_;$/;"	m	class:leveldb::__anon9::MergingIterator	file:
name_	db/c.cc	/^  const char* (*name_)(void*);$/;"	m	struct:leveldb_comparator_t	file:
name_	db/c.cc	/^  const char* (*name_)(void*);$/;"	m	struct:leveldb_filterpolicy_t	file:
name_	util/env_posix.cc	/^  std::string name_;$/;"	m	class:leveldb::__anon4::PosixFileLock	file:
new_files_	db/version_edit.h	/^  std::vector< std::pair<int, FileMetaData> > new_files_; \/\/ 记录增加文件的集合$/;"	m	class:leveldb::VersionEdit
newest	db/snapshot.h	/^  SnapshotImpl* newest() const { assert(!empty()); return list_.prev_; }$/;"	f	class:leveldb::SnapshotList
next	include/leveldb/iterator.h	/^    Cleanup* next;$/;"	m	struct:leveldb::Iterator::Cleanup
next	util/cache.cc	/^  LRUHandle* next; \/\/ 用于lru管理$/;"	m	struct:leveldb::__anon3::LRUHandle	file:
next_	db/skiplist.h	/^  port::AtomicPointer next_[1]; \/\/指针的指针,二维的指针数组, 在next_[]根据height指定指针数据大小;$/;"	m	struct:leveldb::SkipList::Node
next_	db/snapshot.h	/^  SnapshotImpl* next_;$/;"	m	class:leveldb::SnapshotImpl
next_	db/version_set.h	/^  Version* next_;               \/\/ Next version in linked list$/;"	m	class:leveldb::Version
next_file_number_	db/repair.cc	/^  uint64_t next_file_number_;$/;"	m	class:leveldb::__anon22::Repairer	file:
next_file_number_	db/version_edit.h	/^  uint64_t next_file_number_;$/;"	m	class:leveldb::VersionEdit
next_file_number_	db/version_set.h	/^  uint64_t next_file_number_;$/;"	m	class:leveldb::VersionSet
next_hash	util/cache.cc	/^  LRUHandle* next_hash; \/\/ 用于hash管理$/;"	m	struct:leveldb::__anon3::LRUHandle	file:
next_report_	db/db_bench.cc	/^  int next_report_;$/;"	m	class:leveldb::__anon21::Stats	file:
node_	db/skiplist.h	/^    Node* node_;$/;"	m	class:leveldb::SkipList::Iterator
num_	db/db_bench.cc	/^  int num_;$/;"	m	class:leveldb::Benchmark	file:
num_	table/filter_block.h	/^  size_t num_;          \/\/ Number of entries in offset array$/;"	m	class:leveldb::FilterBlockReader
num_	util/histogram.h	/^  double num_;$/;"	m	class:leveldb::Histogram
num_done	db/db_bench.cc	/^  int num_done;$/;"	m	struct:leveldb::__anon21::SharedState	file:
num_entries	table/table_builder.cc	/^  int64_t num_entries; \/\/ kv数量$/;"	m	struct:leveldb::TableBuilder::Rep	file:
num_initialized	db/db_bench.cc	/^  int num_initialized;$/;"	m	struct:leveldb::__anon21::SharedState	file:
num_input_files	db/version_set.h	/^  int num_input_files(int which) const { return inputs_[which].size(); }$/;"	f	class:leveldb::Compaction
num_restarts_	table/block.cc	/^  uint32_t const num_restarts_; \/\/ Number of uint32_t entries in restart array, 重启点的重启点个数$/;"	m	class:leveldb::Block::Iter	file:
num_writable_file_errors_	util/testutil.h	/^  int num_writable_file_errors_;$/;"	m	class:leveldb::test::ErrorEnv
number	db/db_impl.cc	/^    uint64_t number;\/\/ sst表编号$/;"	m	struct:leveldb::DBImpl::CompactionState::Output	file:
number	db/version_edit.h	/^  uint64_t number; \/\/ sst的id$/;"	m	struct:leveldb::FileMetaData
number_	db/snapshot.h	/^  SequenceNumber number_;  \/\/ const after creation$/;"	m	class:leveldb::SnapshotImpl
offset	table/format.h	/^  uint64_t offset() const { return offset_; }$/;"	f	class:leveldb::BlockHandle
offset	table/table_builder.cc	/^  uint64_t offset; \/\/ sst文件的大小, 不依赖与文件系统的stat接口获得文件大小$/;"	m	struct:leveldb::TableBuilder::Rep	file:
offset_	table/filter_block.h	/^  const char* offset_;  \/\/ Pointer to beginning of offset array (at block-end)$/;"	m	class:leveldb::FilterBlockReader
offset_	table/format.h	/^  uint64_t offset_;$/;"	m	class:leveldb::BlockHandle
ok	include/leveldb/status.h	/^  bool ok() const { return (state_ == NULL); }$/;"	f	class:leveldb::Status
ok	include/leveldb/table_builder.h	/^  bool ok() const { return status().ok(); }$/;"	f	class:leveldb::TableBuilder
oldest	db/snapshot.h	/^  SnapshotImpl* oldest() const { assert(!empty()); return list_.next_; }$/;"	f	class:leveldb::SnapshotList
once	util/comparator.cc	/^static port::OnceType once = LEVELDB_ONCE_INIT;$/;"	m	namespace:leveldb	file:
once	util/env_posix.cc	/^static pthread_once_t once = PTHREAD_ONCE_INIT;$/;"	m	namespace:leveldb	file:
operator !=	include/leveldb/slice.h	/^inline bool operator!=(const Slice& x, const Slice& y) {$/;"	f	namespace:leveldb
operator ()	db/memtable.cc	/^int MemTable::KeyComparator::operator()(const char* aptr, const char* bptr)$/;"	f	class:leveldb::MemTable::KeyComparator
operator ()	db/version_set.cc	/^    bool operator()(FileMetaData* f1, FileMetaData* f2) const {$/;"	f	struct:leveldb::VersionSet::Builder::BySmallestKey
operator =	include/leveldb/status.h	/^inline void Status::operator=(const Status& s) {$/;"	f	class:leveldb::Status
operator ==	include/leveldb/slice.h	/^inline bool operator==(const Slice& x, const Slice& y) {$/;"	f	namespace:leveldb
operator []	include/leveldb/slice.h	/^  char operator[](size_t n) const {$/;"	f	class:leveldb::Slice
options	table/table.cc	/^  Options options;$/;"	m	struct:leveldb::Table::Rep	file:
options	table/table_builder.cc	/^  Options options;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
options_	db/db_impl.h	/^  const Options options_;  \/\/ options_.comparator == &internal_comparator_$/;"	m	class:leveldb::DBImpl
options_	db/repair.cc	/^  Options const options_;$/;"	m	class:leveldb::__anon22::Repairer	file:
options_	db/table_cache.h	/^  const Options* options_;$/;"	m	class:leveldb::TableCache
options_	db/version_set.h	/^  const Options* const options_;$/;"	m	class:leveldb::VersionSet
options_	table/block_builder.h	/^  const Options*        options_;$/;"	m	class:leveldb::BlockBuilder
options_	table/two_level_iterator.cc	/^  const ReadOptions options_;$/;"	m	class:leveldb::__anon12::TwoLevelIterator	file:
outfile	db/db_impl.cc	/^  WritableFile* outfile;$/;"	m	struct:leveldb::DBImpl::CompactionState	file:
outputs	db/db_impl.cc	/^  std::vector<Output> outputs;$/;"	m	struct:leveldb::DBImpl::CompactionState	file:
overlapped_bytes_	db/version_set.h	/^  int64_t overlapped_bytes_;  \/\/ Bytes of overlap between current output$/;"	m	class:leveldb::Compaction
owned_	table/block.h	/^  bool owned_;                  \/\/ Block owns data_[]$/;"	m	class:leveldb::Block
owns_cache_	db/db_impl.h	/^  bool owns_cache_;$/;"	m	class:leveldb::DBImpl
owns_cache_	db/repair.cc	/^  bool owns_cache_;$/;"	m	class:leveldb::__anon22::Repairer	file:
owns_info_log_	db/db_impl.h	/^  bool owns_info_log_;$/;"	m	class:leveldb::DBImpl
owns_info_log_	db/repair.cc	/^  bool owns_info_log_;$/;"	m	class:leveldb::__anon22::Repairer	file:
paranoid_checks	include/leveldb/options.h	/^  bool paranoid_checks;$/;"	m	struct:leveldb::Options
pending_compact	db/db_impl.h	/^  bool pending_compact;$/;"	m	class:leveldb::DBImpl
pending_handle	table/table_builder.cc	/^  BlockHandle pending_handle;  \/\/ Handle to add to index block, 编码数据块在sst文件内的偏移和大小$/;"	m	struct:leveldb::TableBuilder::Rep	file:
pending_index_entry	table/table_builder.cc	/^  bool pending_index_entry; \/\/ 记录是否有未完成的index block，因为data block每次下刷都会设置该字段$/;"	m	struct:leveldb::TableBuilder::Rep	file:
pending_outputs_	db/db_impl.h	/^  std::set<uint64_t> pending_outputs_;$/;"	m	class:leveldb::DBImpl
policy_	table/filter_block.h	/^  const FilterPolicy* policy_;$/;"	m	class:leveldb::FilterBlockBuilder
policy_	table/filter_block.h	/^  const FilterPolicy* policy_;$/;"	m	class:leveldb::FilterBlockReader
port	db/bigtable.h	/^namespace port {$/;"	n	namespace:leveldb
port	port/atomic_pointer.h	/^namespace port {$/;"	n	namespace:leveldb
port	port/port_example.h	/^namespace port {$/;"	n	namespace:leveldb
port	port/port_posix.cc	/^namespace port { \/\/ posix规则的兼容处理$/;"	n	namespace:leveldb	file:
port	port/port_posix.h	/^namespace port {$/;"	n	namespace:leveldb
pos_	db/db_bench.cc	/^  int pos_;$/;"	m	class:leveldb::__anon21::RandomGenerator	file:
pos_	helpers/memenv/memenv.cc	/^  uint64_t pos_;$/;"	m	class:leveldb::__anon13::SequentialFileImpl	file:
prev	util/cache.cc	/^  LRUHandle* prev; \/\/ 用于lru管理$/;"	m	struct:leveldb::__anon3::LRUHandle	file:
prev_	db/snapshot.h	/^  SnapshotImpl* prev_;$/;"	m	class:leveldb::SnapshotImpl
prev_	db/version_set.h	/^  Version* prev_;               \/\/ Previous version in linked list$/;"	m	class:leveldb::Version
prev_log_number_	db/version_edit.h	/^  uint64_t prev_log_number_;$/;"	m	class:leveldb::VersionEdit
prev_log_number_	db/version_set.h	/^  uint64_t prev_log_number_;  \/\/ 0 or backing store for memtable being compacted$/;"	m	class:leveldb::VersionSet
queue_	util/env_posix.cc	/^  BGQueue queue_; \/\/ 线程池的工作队列$/;"	m	class:leveldb::__anon4::PosixEnv	file:
rand	db/db_bench.cc	/^  Random rand;         \/\/ Has different seeds for different threads$/;"	m	struct:leveldb::__anon21::ThreadState	file:
reads_	db/db_bench.cc	/^  int reads_;$/;"	m	class:leveldb::Benchmark	file:
refs	db/version_edit.h	/^  int refs; \/\/ 引用计数，保证sst不被删除$/;"	m	struct:leveldb::FileMetaData
refs	util/cache.cc	/^  uint32_t refs; \/\/ cache的引用计数$/;"	m	struct:leveldb::__anon3::LRUHandle	file:
refs_	db/memtable.h	/^  int refs_; \/\/ 引用计数$/;"	m	class:leveldb::MemTable
refs_	db/version_set.h	/^  int refs_;                    \/\/ Number of live refs to this version$/;"	m	class:leveldb::Version
refs_	helpers/memenv/memenv.cc	/^  int refs_;  \/\/ Protected by refs_mutex_;$/;"	m	class:leveldb::__anon13::FileState	file:
refs_mutex_	helpers/memenv/memenv.cc	/^  port::Mutex refs_mutex_;$/;"	m	class:leveldb::__anon13::FileState	file:
remove_prefix	include/leveldb/slice.h	/^  void remove_prefix(size_t n) {$/;"	f	class:leveldb::Slice
rep	db/c.cc	/^  Env* rep;$/;"	m	struct:leveldb_env_t	file:
rep	db/c.cc	/^struct leveldb_cache_t        { Cache*            rep; };$/;"	m	struct:leveldb_cache_t	file:
rep	db/c.cc	/^struct leveldb_filelock_t     { FileLock*         rep; };$/;"	m	struct:leveldb_filelock_t	file:
rep	db/c.cc	/^struct leveldb_iterator_t     { Iterator*         rep; };$/;"	m	struct:leveldb_iterator_t	file:
rep	db/c.cc	/^struct leveldb_logger_t       { Logger*           rep; };$/;"	m	struct:leveldb_logger_t	file:
rep	db/c.cc	/^struct leveldb_options_t      { Options           rep; };$/;"	m	struct:leveldb_options_t	file:
rep	db/c.cc	/^struct leveldb_randomfile_t   { RandomAccessFile* rep; };$/;"	m	struct:leveldb_randomfile_t	file:
rep	db/c.cc	/^struct leveldb_readoptions_t  { ReadOptions       rep; };$/;"	m	struct:leveldb_readoptions_t	file:
rep	db/c.cc	/^struct leveldb_seqfile_t      { SequentialFile*   rep; };$/;"	m	struct:leveldb_seqfile_t	file:
rep	db/c.cc	/^struct leveldb_snapshot_t     { const Snapshot*   rep; };$/;"	m	struct:leveldb_snapshot_t	file:
rep	db/c.cc	/^struct leveldb_t              { DB*               rep; };$/;"	m	struct:leveldb_t	file:
rep	db/c.cc	/^struct leveldb_writablefile_t { WritableFile*     rep; };$/;"	m	struct:leveldb_writablefile_t	file:
rep	db/c.cc	/^struct leveldb_writebatch_t   { WriteBatch        rep; };$/;"	m	struct:leveldb_writebatch_t	file:
rep	db/c.cc	/^struct leveldb_writeoptions_t { WriteOptions      rep; };$/;"	m	struct:leveldb_writeoptions_t	file:
rep_	db/dbformat.h	/^  std::string rep_;$/;"	m	class:leveldb::InternalKey
rep_	include/leveldb/cache.h	/^  Rep* rep_;$/;"	m	class:leveldb::Cache
rep_	include/leveldb/table.h	/^  Rep* rep_;$/;"	m	class:leveldb::Table
rep_	include/leveldb/table_builder.h	/^  Rep* rep_;$/;"	m	class:leveldb::TableBuilder
rep_	include/leveldb/write_batch.h	/^  std::string rep_;  \/\/ See comment in write_batch.cc for the format of rep_$/;"	m	class:leveldb::WriteBatch
rep_	port/atomic_pointer.h	/^  void* rep_;$/;"	m	class:leveldb::port::AtomicPointer
rep_	port/port_example.h	/^  intptr_t rep_;$/;"	m	class:leveldb::port::AtomicPointer
reporter_	db/log_reader.h	/^  Reporter* const reporter_;$/;"	m	class:leveldb::log::Reader
restart_index_	table/block.cc	/^  uint32_t restart_index_;  \/\/ Index of restart block in which current_ falls$/;"	m	class:leveldb::Block::Iter	file:
restart_offset_	table/block.h	/^  uint32_t restart_offset_;     \/\/ Offset in data_ of restart array$/;"	m	class:leveldb::Block
restarts_	table/block.cc	/^  uint32_t const restarts_;     \/\/ Offset of restart array (list of fixed32), 重启点列表的偏移$/;"	m	class:leveldb::Block::Iter	file:
restarts_	table/block_builder.h	/^  std::vector<uint32_t> restarts_;    \/\/ Restart points, 重启点$/;"	m	class:leveldb::BlockBuilder
result_	table/filter_block.h	/^  std::string result_;            \/\/ Filter data computed so far$/;"	m	class:leveldb::FilterBlockBuilder
rnd_	db/db_iter.cc	/^  Random rnd_;$/;"	m	class:leveldb::__anon20::DBIter	file:
rnd_	db/skiplist.h	/^  Random rnd_;$/;"	m	class:leveldb::SkipList
rwlock	db/bigtable.h	/^  port::RWLock rwlock; \/\/ split use write lock, put\/get\/delete use read lock$/;"	m	struct:leveldb::Tablet
rwlock	db/bigtable.h	/^  pthread_rwlock_t rwlock;$/;"	m	class:leveldb::port::RWLock
saved_key_	db/db_iter.cc	/^  std::string saved_key_;     \/\/ == current key when direction_==kReverse$/;"	m	class:leveldb::__anon20::DBIter	file:
saved_value_	db/db_iter.cc	/^  std::string saved_value_;   \/\/ == current raw value when direction_==kReverse$/;"	m	class:leveldb::__anon20::DBIter	file:
seconds_	db/db_bench.cc	/^  double seconds_;$/;"	m	class:leveldb::__anon21::Stats	file:
seed_	db/db_impl.h	/^  uint32_t seed_;                \/\/ For sampling.$/;"	m	class:leveldb::DBImpl
seed_	util/random.h	/^  uint32_t seed_;$/;"	m	class:leveldb::Random
seek_file	db/version_set.h	/^    FileMetaData* seek_file;$/;"	m	struct:leveldb::Version::GetStats
seek_file_level	db/version_set.h	/^    int seek_file_level;$/;"	m	struct:leveldb::Version::GetStats
seen_key_	db/version_set.h	/^  bool seen_key_;             \/\/ Some output key has been seen$/;"	m	class:leveldb::Compaction
sequence	db/dbformat.h	/^  SequenceNumber sequence;$/;"	m	struct:leveldb::ParsedInternalKey
sequence_	db/db_iter.cc	/^  SequenceNumber const sequence_;$/;"	m	class:leveldb::__anon20::DBIter	file:
sequence_	db/write_batch.cc	/^  SequenceNumber sequence_;$/;"	m	class:leveldb::__anon23::MemTableInserter	file:
set_index_handle	table/format.h	/^  void set_index_handle(const BlockHandle& h) {$/;"	f	class:leveldb::Footer
set_metaindex_handle	table/format.h	/^  void set_metaindex_handle(const BlockHandle& h) { metaindex_handle_ = h; }$/;"	f	class:leveldb::Footer
set_offset	table/format.h	/^  void set_offset(uint64_t offset) { offset_ = offset; }$/;"	f	class:leveldb::BlockHandle
set_size	table/format.h	/^  void set_size(uint64_t size) { size_ = size; }$/;"	f	class:leveldb::BlockHandle
shard_	util/cache.cc	/^  LRUCache shard_[kNumShards];\/\/ 默认有16个lrucache$/;"	m	class:leveldb::__anon3::ShardedLRUCache	file:
shared	db/db_bench.cc	/^    SharedState* shared;$/;"	m	struct:leveldb::Benchmark::ThreadArg	file:
shared	db/db_bench.cc	/^  SharedState* shared;$/;"	m	struct:leveldb::__anon21::ThreadState	file:
shutting_down_	db/db_impl.h	/^  port::AtomicPointer shutting_down_; \/\/数据库析构时，指向当前DB实例$/;"	m	class:leveldb::DBImpl
size	include/leveldb/slice.h	/^  size_t size() const { return size_; }$/;"	f	class:leveldb::Slice
size	table/block.h	/^  size_t size() const { return size_; }$/;"	f	class:leveldb::Block
size	table/format.h	/^  uint64_t size() const { return size_; }$/;"	f	class:leveldb::BlockHandle
size_	helpers/memenv/memenv.cc	/^  uint64_t size_;$/;"	m	class:leveldb::__anon13::FileState	file:
size_	include/leveldb/slice.h	/^  size_t size_;$/;"	m	class:leveldb::Slice
size_	table/block.h	/^  size_t size_; \/\/ 大小$/;"	m	class:leveldb::Block
size_	table/format.h	/^  uint64_t size_;$/;"	m	class:leveldb::BlockHandle
smallest	db/db_impl.cc	/^    InternalKey smallest, largest;\/\/ sst表当前的最大最小值$/;"	m	struct:leveldb::DBImpl::CompactionState::Output	file:
smallest	db/version_edit.h	/^  InternalKey smallest;       \/\/ Smallest internal key served by table, key的最大值$/;"	m	struct:leveldb::FileMetaData
smallest_snapshot	db/db_impl.cc	/^  SequenceNumber smallest_snapshot;$/;"	m	struct:leveldb::DBImpl::CompactionState	file:
snapshot	include/leveldb/options.h	/^  const Snapshot* snapshot;$/;"	m	struct:leveldb::ReadOptions
snapshots_	db/db_impl.h	/^  SnapshotList snapshots_;$/;"	m	class:leveldb::DBImpl
space_	db/dbformat.h	/^  char space_[200];      \/\/ Avoid allocation for short keys, 避免小内存的频繁分配$/;"	m	class:leveldb::LookupKey
start	db/db_bench.cc	/^  bool start;$/;"	m	struct:leveldb::__anon21::SharedState	file:
start	include/leveldb/db.h	/^  Slice start;          \/\/ Included in the range$/;"	m	struct:leveldb::Range
start_	db/db_bench.cc	/^  double start_;$/;"	m	class:leveldb::__anon21::Stats	file:
start_	db/dbformat.h	/^  const char* start_; \/\/ 查询字符串的起始位置$/;"	m	class:leveldb::LookupKey
start_	table/filter_block.h	/^  std::vector<size_t> start_;     \/\/ Starting index in keys_ of each key$/;"	m	class:leveldb::FilterBlockBuilder
started_bgthread_	util/env_posix.cc	/^  bool started_bgthread_;$/;"	m	class:leveldb::__anon4::PosixEnv	file:
starts_with	include/leveldb/slice.h	/^  bool starts_with(const Slice& x) const {$/;"	f	class:leveldb::Slice
state	db/version_set.cc	/^  SaverState state;$/;"	m	struct:leveldb::__anon17::Saver	file:
state_	db/c.cc	/^  void* state_;$/;"	m	struct:leveldb_comparator_t	file:
state_	db/c.cc	/^  void* state_;$/;"	m	struct:leveldb_filterpolicy_t	file:
state_	include/leveldb/status.h	/^  const char* state_;$/;"	m	class:leveldb::Status
stats	db/db_bench.cc	/^  Stats stats;$/;"	m	struct:leveldb::__anon21::ThreadState	file:
stats_	db/db_impl.h	/^  CompactionStats stats_[config::kNumLevels];$/;"	m	class:leveldb::DBImpl
status	db/db_impl.cc	/^  Status status; \/\/ 写状态$/;"	m	struct:leveldb::DBImpl::Writer	file:
status	db/db_iter.cc	/^  virtual Status status() const {$/;"	f	class:leveldb::__anon20::DBIter
status	db/memtable.cc	/^  virtual Status status() const { return Status::OK(); }$/;"	f	class:leveldb::MemTableIterator
status	db/version_set.cc	/^  virtual Status status() const { return Status::OK(); }$/;"	f	class:leveldb::Version::LevelFileNumIterator
status	table/block.cc	/^  virtual Status status() const { return status_; }$/;"	f	class:leveldb::Block::Iter
status	table/iterator.cc	/^  virtual Status status() const { return status_; }$/;"	f	class:leveldb::__anon8::EmptyIterator
status	table/iterator_wrapper.h	/^  Status status() const     { assert(iter_); return iter_->status(); }$/;"	f	class:leveldb::IteratorWrapper
status	table/merger.cc	/^  virtual Status status() const {$/;"	f	class:leveldb::__anon9::MergingIterator
status	table/table.cc	/^  Status status;$/;"	m	struct:leveldb::Table::Rep	file:
status	table/table_builder.cc	/^  Status status;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
status	table/table_builder.cc	/^Status TableBuilder::status() const {$/;"	f	class:leveldb::TableBuilder
status	table/two_level_iterator.cc	/^  virtual Status status() const {$/;"	f	class:leveldb::__anon12::TwoLevelIterator
status_	db/db_iter.cc	/^  Status status_;$/;"	m	class:leveldb::__anon20::DBIter	file:
status_	table/block.cc	/^  Status status_; \/\/ 查询状态$/;"	m	class:leveldb::Block::Iter	file:
status_	table/iterator.cc	/^  Status status_;$/;"	m	class:leveldb::__anon8::EmptyIterator	file:
status_	table/two_level_iterator.cc	/^  Status status_;$/;"	m	class:leveldb::__anon12::TwoLevelIterator	file:
sum_	util/histogram.h	/^  double sum_;$/;"	m	class:leveldb::Histogram
sum_squares_	util/histogram.h	/^  double sum_squares_;$/;"	m	class:leveldb::Histogram
sync	db/db_impl.cc	/^  bool sync; \/\/ 是否同步标志，从write_options获得$/;"	m	struct:leveldb::DBImpl::Writer	file:
sync	include/leveldb/options.h	/^  bool sync;$/;"	m	struct:leveldb::WriteOptions
table	db/table_cache.cc	/^  Table* table;$/;"	m	struct:leveldb::TableAndFile	file:
table0_	util/crc32c.cc	/^static const uint32_t table0_[256] = {$/;"	m	namespace:leveldb::crc32c	file:
table1_	util/crc32c.cc	/^static const uint32_t table1_[256] = {$/;"	m	namespace:leveldb::crc32c	file:
table2_	util/crc32c.cc	/^static const uint32_t table2_[256] = {$/;"	m	namespace:leveldb::crc32c	file:
table3_	util/crc32c.cc	/^static const uint32_t table3_[256] = {$/;"	m	namespace:leveldb::crc32c	file:
table_	db/memtable.h	/^  Table table_; \/\/ 跳表结构$/;"	m	class:leveldb::MemTable
table_	util/cache.cc	/^  HandleTable table_; \/\/ hash表，用于查询$/;"	m	class:leveldb::__anon3::LRUCache	file:
table_cache_	db/db_impl.h	/^  TableCache* table_cache_;$/;"	m	class:leveldb::DBImpl
table_cache_	db/repair.cc	/^  TableCache* table_cache_;$/;"	m	class:leveldb::__anon22::Repairer	file:
table_cache_	db/version_set.h	/^  TableCache* const table_cache_;$/;"	m	class:leveldb::VersionSet
table_numbers_	db/repair.cc	/^  std::vector<uint64_t> table_numbers_;$/;"	m	class:leveldb::__anon22::Repairer	file:
tables_	db/repair.cc	/^  std::vector<TableInfo> tables_;$/;"	m	class:leveldb::__anon22::Repairer	file:
tabletId	db/bigtable.h	/^  uint64_t tabletId; \/\/ tablets' id, dataTablet-xxx is key in metaTablet$/;"	m	struct:leveldb::Tablet
tabletQueue	db/bigtable.h	/^  std::vector<Tablet*> tabletQueue;$/;"	m	class:leveldb::BigTable
tablet_num_	db/bigtable.h	/^  uint64_t tablet_num_; $/;"	m	class:leveldb::BigTable
target	include/leveldb/env.h	/^  Env* target() const { return target_; }$/;"	f	class:leveldb::EnvWrapper
target_	include/leveldb/env.h	/^  Env* target_;$/;"	m	class:leveldb::EnvWrapper
test	util/testutil.cc	/^namespace test {$/;"	n	namespace:leveldb	file:
test	util/testutil.h	/^namespace test {$/;"	n	namespace:leveldb
thread	db/db_bench.cc	/^    ThreadState* thread;$/;"	m	struct:leveldb::Benchmark::ThreadArg	file:
tid	db/db_bench.cc	/^  int tid;             \/\/ 0..n-1 when running in n threads$/;"	m	struct:leveldb::__anon21::ThreadState	file:
tmp_	db/memtable.cc	/^  std::string tmp_;       \/\/ For passing to EncodeKey$/;"	m	class:leveldb::MemTableIterator	file:
tmp_batch_	db/db_impl.h	/^  WriteBatch* tmp_batch_; \/\/ 将多个batch合并时，存放临时的多个write batch$/;"	m	class:leveldb::DBImpl
tmp_keys_	table/filter_block.h	/^  std::vector<Slice> tmp_keys_;   \/\/ policy_->CreateFilter() argument$/;"	m	class:leveldb::FilterBlockBuilder
tmp_storage	db/db_impl.h	/^    InternalKey tmp_storage;    \/\/ Used to keep track of compaction progress$/;"	m	struct:leveldb::DBImpl::ManualCompaction
total	db/db_bench.cc	/^  int total;$/;"	m	struct:leveldb::__anon21::SharedState	file:
total_bytes	db/db_impl.cc	/^  uint64_t total_bytes;$/;"	m	struct:leveldb::DBImpl::CompactionState	file:
type	db/dbformat.h	/^  ValueType type;$/;"	m	struct:leveldb::ParsedInternalKey
type_crc_	db/log_writer.h	/^  uint32_t type_crc_[kMaxRecordType + 1];$/;"	m	class:leveldb::log::Writer
ucmp	db/version_set.cc	/^  const Comparator* ucmp;$/;"	m	struct:leveldb::__anon17::Saver	file:
usage_	util/cache.cc	/^  size_t usage_; \/\/ lru cache的空间使用量$/;"	m	class:leveldb::__anon3::LRUCache	file:
user_comparator	db/db_impl.h	/^  const Comparator* user_comparator() const {$/;"	f	class:leveldb::DBImpl
user_comparator	db/dbformat.h	/^  const Comparator* user_comparator() const { return user_comparator_; }$/;"	f	class:leveldb::InternalKeyComparator
user_comparator_	db/db_iter.cc	/^  const Comparator* const user_comparator_;$/;"	m	class:leveldb::__anon20::DBIter	file:
user_comparator_	db/dbformat.h	/^  const Comparator* user_comparator_;$/;"	m	class:leveldb::InternalKeyComparator
user_function	util/env_posix.cc	/^  void (*user_function)(void*);$/;"	m	struct:leveldb::__anon4::__anon5::StartThreadState	file:
user_key	db/dbformat.h	/^  Slice user_key() const { return ExtractUserKey(rep_); }$/;"	f	class:leveldb::InternalKey
user_key	db/dbformat.h	/^  Slice user_key() const { return Slice(kstart_, end_ - kstart_ - 8); }$/;"	f	class:leveldb::LookupKey
user_key	db/dbformat.h	/^  Slice user_key;$/;"	m	struct:leveldb::ParsedInternalKey
user_key	db/version_set.cc	/^  Slice user_key;$/;"	m	struct:leveldb::__anon17::Saver	file:
user_policy_	db/dbformat.h	/^  const FilterPolicy* const user_policy_;$/;"	m	class:leveldb::InternalFilterPolicy
valid_	db/db_iter.cc	/^  bool valid_;$/;"	m	class:leveldb::__anon20::DBIter	file:
valid_	table/iterator_wrapper.h	/^  bool valid_;\/\/ 标志该遍历器指向的内容是否有效，valid是内部遍历器的通用接口，流结束标志$/;"	m	class:leveldb::IteratorWrapper
value	db/db_iter.cc	/^  virtual Slice value() const {$/;"	f	class:leveldb::__anon20::DBIter
value	db/memtable.cc	/^  virtual Slice value() const {$/;"	f	class:leveldb::MemTableIterator
value	db/version_set.cc	/^  Slice value() const {$/;"	f	class:leveldb::Version::LevelFileNumIterator
value	db/version_set.cc	/^  std::string* value;$/;"	m	struct:leveldb::__anon17::Saver	file:
value	table/block.cc	/^  virtual Slice value() const {$/;"	f	class:leveldb::Block::Iter
value	table/iterator.cc	/^  Slice value() const { assert(false); return Slice(); }$/;"	f	class:leveldb::__anon8::EmptyIterator
value	table/iterator_wrapper.h	/^  Slice value() const       { assert(Valid()); return iter_->value(); }$/;"	f	class:leveldb::IteratorWrapper
value	table/merger.cc	/^  virtual Slice value() const {$/;"	f	class:leveldb::__anon9::MergingIterator
value	table/two_level_iterator.cc	/^  virtual Slice value() const {$/;"	f	class:leveldb::__anon12::TwoLevelIterator
value	util/cache.cc	/^  void* value; \/\/ value对象$/;"	m	struct:leveldb::__anon3::LRUHandle	file:
value_	table/block.cc	/^  Slice value_; \/\/ 用户value$/;"	m	class:leveldb::Block::Iter	file:
value_buf_	db/version_set.cc	/^  mutable char value_buf_[16];$/;"	m	class:leveldb::Version::LevelFileNumIterator	file:
value_size_	db/db_bench.cc	/^  int value_size_;$/;"	m	class:leveldb::Benchmark	file:
verify_checksums	include/leveldb/options.h	/^  bool verify_checksums;$/;"	m	struct:leveldb::ReadOptions
version	db/db_impl.cc	/^  Version* version;$/;"	m	struct:leveldb::__anon18::IterState	file:
versions_	db/db_impl.h	/^  VersionSet* versions_;$/;"	m	class:leveldb::DBImpl
vset_	db/version_set.cc	/^  VersionSet* vset_; \/\/ 系统的versionSet$/;"	m	class:leveldb::VersionSet::Builder	file:
vset_	db/version_set.h	/^  VersionSet* vset_;            \/\/ VersionSet to which this Version belongs$/;"	m	class:leveldb::Version
writable_file_error_	util/testutil.h	/^  bool writable_file_error_;$/;"	m	class:leveldb::test::ErrorEnv
write_buffer_size	include/leveldb/options.h	/^  size_t write_buffer_size;$/;"	m	struct:leveldb::Options
write_options_	db/db_bench.cc	/^  WriteOptions write_options_;$/;"	m	class:leveldb::Benchmark	file:
writers_	db/db_impl.h	/^  std::deque<Writer*> writers_; \/\/ 用于排队batch写$/;"	m	class:leveldb::DBImpl
~Arena	util/arena.cc	/^Arena::~Arena() {$/;"	f	class:leveldb::Arena
~Benchmark	db/db_bench.cc	/^  ~Benchmark() {$/;"	f	class:leveldb::Benchmark
~BigTable	db/bigtable.cc	/^BigTable::~BigTable()$/;"	f	class:leveldb::BigTable
~Block	table/block.cc	/^Block::~Block() {$/;"	f	class:leveldb::Block
~Builder	db/version_set.cc	/^  ~Builder() {$/;"	f	class:leveldb::VersionSet::Builder
~Cache	util/cache.cc	/^Cache::~Cache() {$/;"	f	class:leveldb::Cache
~Compaction	db/version_set.cc	/^Compaction::~Compaction() {$/;"	f	class:leveldb::Compaction
~Comparator	util/comparator.cc	/^Comparator::~Comparator() { }$/;"	f	class:leveldb::Comparator
~CondVar	port/port_posix.cc	/^CondVar::~CondVar() { PthreadCall("destroy cv", pthread_cond_destroy(&cv_)); }$/;"	f	class:leveldb::port::CondVar
~DB	db/db_impl.cc	/^DB::~DB() { }$/;"	f	class:leveldb::DB
~DBImpl	db/db_impl.cc	/^DBImpl::~DBImpl() {$/;"	f	class:leveldb::DBImpl
~DBIter	db/db_iter.cc	/^  virtual ~DBIter() {$/;"	f	class:leveldb::__anon20::DBIter
~Env	util/env.cc	/^Env::~Env() {$/;"	f	class:leveldb::Env
~EnvWrapper	util/env.cc	/^EnvWrapper::~EnvWrapper() {$/;"	f	class:leveldb::EnvWrapper
~FileLock	util/env.cc	/^FileLock::~FileLock() {$/;"	f	class:leveldb::FileLock
~FileState	helpers/memenv/memenv.cc	/^  ~FileState() {$/;"	f	class:leveldb::__anon13::FileState	file:
~FilterPolicy	util/filter_policy.cc	/^FilterPolicy::~FilterPolicy() { }$/;"	f	class:leveldb::FilterPolicy
~HandleTable	util/cache.cc	/^  ~HandleTable() { delete[] list_; }$/;"	f	class:leveldb::__anon3::HandleTable
~Handler	db/write_batch.cc	/^WriteBatch::Handler::~Handler() { }$/;"	f	class:leveldb::WriteBatch::Handler
~Histogram	util/histogram.h	/^  ~Histogram() { }$/;"	f	class:leveldb::Histogram
~InMemoryEnv	helpers/memenv/memenv.cc	/^  virtual ~InMemoryEnv() {$/;"	f	class:leveldb::__anon13::InMemoryEnv
~Iterator	table/iterator.cc	/^Iterator::~Iterator() {$/;"	f	class:leveldb::Iterator
~IteratorWrapper	table/iterator_wrapper.h	/^  ~IteratorWrapper() { delete iter_; }$/;"	f	class:leveldb::IteratorWrapper
~LRUCache	util/cache.cc	/^LRUCache::~LRUCache() {$/;"	f	class:leveldb::__anon3::LRUCache
~Logger	util/env.cc	/^Logger::~Logger() {$/;"	f	class:leveldb::Logger
~LookupKey	db/dbformat.h	/^inline LookupKey::~LookupKey() {$/;"	f	class:leveldb::LookupKey
~MemTable	db/memtable.cc	/^MemTable::~MemTable() {$/;"	f	class:leveldb::MemTable
~MergingIterator	table/merger.cc	/^  virtual ~MergingIterator() {$/;"	f	class:leveldb::__anon9::MergingIterator
~Mutex	port/port_posix.cc	/^Mutex::~Mutex() { PthreadCall("destroy mutex", pthread_mutex_destroy(&mu_)); }$/;"	f	class:leveldb::port::Mutex
~PosixEnv	util/env_posix.cc	/^  virtual ~PosixEnv() {$/;"	f	class:leveldb::__anon4::PosixEnv
~PosixLogger	util/posix_logger.h	/^  virtual ~PosixLogger() {$/;"	f	class:leveldb::PosixLogger
~PosixMmapReadableFile	util/env_posix.cc	/^  virtual ~PosixMmapReadableFile() {$/;"	f	class:leveldb::__anon4::PosixMmapReadableFile
~PosixRandomAccessFile	util/env_posix.cc	/^  virtual ~PosixRandomAccessFile() { close(fd_); }$/;"	f	class:leveldb::__anon4::PosixRandomAccessFile
~PosixSequentialFile	util/env_posix.cc	/^  virtual ~PosixSequentialFile() { fclose(file_); }$/;"	f	class:leveldb::__anon4::PosixSequentialFile
~PosixWritableFile	util/env_posix.cc	/^  ~PosixWritableFile() {$/;"	f	class:leveldb::__anon4::PosixWritableFile
~RWLock	db/bigtable.h	/^  ~RWLock() {$/;"	f	class:leveldb::port::RWLock
~RandomAccessFile	util/env.cc	/^RandomAccessFile::~RandomAccessFile() {$/;"	f	class:leveldb::RandomAccessFile
~RandomAccessFileImpl	helpers/memenv/memenv.cc	/^  ~RandomAccessFileImpl() {$/;"	f	class:leveldb::__anon13::RandomAccessFileImpl
~Reader	db/log_reader.cc	/^Reader::~Reader() {$/;"	f	class:leveldb::log::Reader
~Rep	table/table.cc	/^  ~Rep() {$/;"	f	struct:leveldb::Table::Rep
~Repairer	db/repair.cc	/^  ~Repairer() {$/;"	f	class:leveldb::__anon22::Repairer
~Reporter	db/log_reader.cc	/^Reader::Reporter::~Reporter() {$/;"	f	class:leveldb::log::Reader::Reporter
~SequentialFile	util/env.cc	/^SequentialFile::~SequentialFile() {$/;"	f	class:leveldb::SequentialFile
~SequentialFileImpl	helpers/memenv/memenv.cc	/^  ~SequentialFileImpl() {$/;"	f	class:leveldb::__anon13::SequentialFileImpl
~ShardedLRUCache	util/cache.cc	/^  virtual ~ShardedLRUCache() { }$/;"	f	class:leveldb::__anon3::ShardedLRUCache
~Snapshot	db/db_impl.cc	/^Snapshot::~Snapshot() {$/;"	f	class:leveldb::Snapshot
~Status	include/leveldb/status.h	/^  ~Status() { delete[] state_; }$/;"	f	class:leveldb::Status
~Table	table/table.cc	/^Table::~Table() {$/;"	f	class:leveldb::Table
~TableBuilder	table/table_builder.cc	/^TableBuilder::~TableBuilder() {$/;"	f	class:leveldb::TableBuilder
~TableCache	db/table_cache.cc	/^TableCache::~TableCache() {$/;"	f	class:leveldb::TableCache
~TwoLevelIterator	table/two_level_iterator.cc	/^TwoLevelIterator::~TwoLevelIterator() {$/;"	f	class:leveldb::__anon12::TwoLevelIterator
~Version	db/version_set.cc	/^Version::~Version() {$/;"	f	class:leveldb::Version
~VersionEdit	db/version_edit.h	/^  ~VersionEdit() { }$/;"	f	class:leveldb::VersionEdit
~VersionSet	db/version_set.cc	/^VersionSet::~VersionSet() {$/;"	f	class:leveldb::VersionSet
~WritableFile	util/env.cc	/^WritableFile::~WritableFile() {$/;"	f	class:leveldb::WritableFile
~WritableFileImpl	helpers/memenv/memenv.cc	/^  ~WritableFileImpl() {$/;"	f	class:leveldb::__anon13::WritableFileImpl
~WriteBatch	db/write_batch.cc	/^WriteBatch::~WriteBatch() { }$/;"	f	class:leveldb::WriteBatch
~Writer	db/log_writer.cc	/^Writer::~Writer() {$/;"	f	class:leveldb::log::Writer
~leveldb_comparator_t	db/c.cc	/^  virtual ~leveldb_comparator_t() {$/;"	f	struct:leveldb_comparator_t
~leveldb_filterpolicy_t	db/c.cc	/^  virtual ~leveldb_filterpolicy_t() {$/;"	f	struct:leveldb_filterpolicy_t
